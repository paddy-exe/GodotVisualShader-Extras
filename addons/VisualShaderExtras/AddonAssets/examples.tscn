[gd_scene load_steps=187 format=3 uid="uid://cn7nb6ac3skd6"]

[ext_resource type="Texture2D" uid="uid://dkwktkcfupn2y" path="res://addons/VisualShaderExtras/AddonAssets/icon.svg" id="1_cgkaa"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/BlendModes/GammaIllumination.gd" id="2_jf1ub"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/BlendModes/GammaLight.gd" id="3_khpg8"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/BlendModes/LighterColor.gd" id="4_cmt3m"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/BlendModes/LinearLight.gd" id="5_fentn"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/BlendModes/Luminosity.gd" id="7_qla21"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/BlendModes/PinLight.gd" id="8_2t3vc"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/BlendModes/VividLight.gd" id="9_uxc0e"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/BlendModes/DarkerColor.gd" id="10_8uxja"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/BlendModes/Exclusion.gd" id="11_q4an4"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/BlendModes/GammaDark.gd" id="12_q0t3q"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/BlendModes/HardMix.gd" id="13_7mfkw"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/Procedural/Checkerboard.gd" id="13_ptn0e"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/Shapes/Box.gd" id="14_jc8jc"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/ColorAdjustment/HSVAdjustment.gd" id="14_o4k34"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/Shapes/Circle.gd" id="15_ge12c"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/Shapes/Parallelogram.gd" id="16_lficu"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/Shapes/PreciseBox.gd" id="17_4su7r"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/Shapes/Rhombus.gd" id="17_kodn2"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/Shapes/RoundedBox.gd" id="19_jp1e3"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/Shapes/Trapezoid.gd" id="20_7awbu"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/Shapes/Triangle.gd" id="21_775g5"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/UV/UVTwirl.gd" id="22_0m23s"]
[ext_resource type="Texture2D" uid="uid://bn8avh1dk262a" path="res://addons/VisualShaderExtras/AddonAssets/DinoSprites - vita.png" id="23_7eq8w"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/Wave/TriangleWave.gd" id="24_b72mw"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/UV/UVFlipbook.gd" id="24_peh0q"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/UV/UVTiler.gd" id="24_xmnb7"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/Wave/SquareWave.gd" id="25_srj7y"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/Wave/SawtoothWave.gd" id="26_777un"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/Wave/SineWave.gd" id="27_5a8eg"]

[sub_resource type="FastNoiseLite" id="64"]

[sub_resource type="NoiseTexture2D" id="65"]
seamless = true
noise = SubResource("64")

[sub_resource type="VisualShaderNodeTexture" id="66"]
texture = SubResource("65")
texture_type = 1

[sub_resource type="VisualShaderNodeTexture" id="67"]
texture = ExtResource("1_cgkaa")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_hjnnn"]
default_input_values = [2, 1.0]
initialized = true
script = ExtResource("2_jf1ub")

[sub_resource type="VisualShader" id="68"]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_3 : source_color;
uniform sampler2D tex_frg_4 : source_color;


// BlendGammaIllumination

		float blend_gamma_illumination_f(float c1, float c2) 
		{
			return (1.0 - pow(c2, (1.0 / c1)));
		}
		
		vec3 blend_gamma_illumination(vec3 c1, vec3 c2, float opacity)
		{
			return opacity*vec3(blend_gamma_illumination_f(c1.x, c2.x), blend_gamma_illumination_f(c1.y, c2.y), blend_gamma_illumination_f(c1.z, c2.z)) + (1.0-opacity)*c2;
		}
	

void fragment() {
// Texture2D:3
	vec4 n_out3p0 = texture(tex_frg_3, UV);


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


	vec3 n_out5p0;
// BlendGammaIllumination:5
	float n_in5p2 = 1.00000;
	{
		n_out5p0.rgb = blend_gamma_illumination(vec3(n_out3p0.xyz).rgb, vec3(n_out4p0.xyz).rgb, n_in5p2);
	}


// Output:0
	COLOR.rgb = n_out5p0;


}
"
graph_offset = Vector2(-237, 67)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(420, 240)
nodes/fragment/3/node = SubResource("66")
nodes/fragment/3/position = Vector2(-220, 100)
nodes/fragment/4/node = SubResource("67")
nodes/fragment/4/position = Vector2(-240, 320)
nodes/fragment/5/node = SubResource("VisualShaderNodeCustom_hjnnn")
nodes/fragment/5/position = Vector2(80, 240)
nodes/fragment/connections = PackedInt32Array(3, 0, 5, 0, 4, 0, 5, 1, 5, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="69"]
shader = SubResource("68")

[sub_resource type="FastNoiseLite" id="71"]

[sub_resource type="NoiseTexture2D" id="72"]
seamless = true
noise = SubResource("71")

[sub_resource type="VisualShaderNodeTexture" id="73"]
texture = SubResource("72")
texture_type = 1

[sub_resource type="VisualShaderNodeTexture" id="74"]
texture = ExtResource("1_cgkaa")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_dpf54"]
default_input_values = [2, 1.0]
initialized = true
script = ExtResource("3_khpg8")

[sub_resource type="VisualShader" id="76"]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_2 : source_color;
uniform sampler2D tex_frg_3 : source_color;


// BlendGammaLight

		float blend_gamma_light_f(float c1, float c2) 
		{
			return pow(c2, c1);
		}
		
		vec3 blend_gamma_light(vec3 c1, vec3 c2, float opacity)
		{
			return opacity*vec3(blend_gamma_light_f(c1.x, c2.x), blend_gamma_light_f(c1.y, c2.y), blend_gamma_light_f(c1.z, c2.z)) + (1.0-opacity)*c2;
		}
	

void fragment() {
// Texture2D:2
	vec4 n_out2p0 = texture(tex_frg_2, UV);


// Texture2D:3
	vec4 n_out3p0 = texture(tex_frg_3, UV);


	vec3 n_out4p0;
// BlendGammaLight:4
	float n_in4p2 = 1.00000;
	{
		n_out4p0.rgb = blend_gamma_light(vec3(n_out2p0.xyz).rgb, vec3(n_out3p0.xyz).rgb, n_in4p2);
	}


// Output:0
	COLOR.rgb = n_out4p0;


}
"
graph_offset = Vector2(-104.186, 90)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(420, 200)
nodes/fragment/2/node = SubResource("73")
nodes/fragment/2/position = Vector2(-120, 80)
nodes/fragment/3/node = SubResource("74")
nodes/fragment/3/position = Vector2(-120, 300)
nodes/fragment/4/node = SubResource("VisualShaderNodeCustom_dpf54")
nodes/fragment/4/position = Vector2(160, 220)
nodes/fragment/connections = PackedInt32Array(2, 0, 4, 0, 3, 0, 4, 1, 4, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="77"]
shader = SubResource("76")

[sub_resource type="FastNoiseLite" id="103"]

[sub_resource type="NoiseTexture2D" id="104"]
seamless = true
noise = SubResource("103")

[sub_resource type="VisualShaderNodeTexture" id="105"]
texture = SubResource("104")
texture_type = 1

[sub_resource type="VisualShaderNodeTexture" id="106"]
texture = ExtResource("1_cgkaa")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_7yinb"]
default_input_values = [2, 1.0]
initialized = true
script = ExtResource("4_cmt3m")

[sub_resource type="VisualShader" id="107"]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_3 : source_color;
uniform sampler2D tex_frg_4 : source_color;


// BlendLighterColor

		float blend_lighter_color_f(float c1, float c2) 
		{
			return c1 > c2 ? c1 : c2;
		}
		
		vec3 blend_lighter_color(vec3 c1, vec3 c2, float opacity)
		{
			return opacity*vec3(blend_lighter_color_f(c1.x, c2.x), blend_lighter_color_f(c1.y, c2.y), blend_lighter_color_f(c1.z, c2.z)) + (1.0-opacity)*c2;
		}
	

void fragment() {
// Texture2D:3
	vec4 n_out3p0 = texture(tex_frg_3, UV);


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


	vec3 n_out5p0;
// BlendLighterColor:5
	float n_in5p2 = 1.00000;
	{
		n_out5p0.rgb = blend_lighter_color(vec3(n_out3p0.xyz).rgb, vec3(n_out4p0.xyz).rgb, n_in5p2);
	}


// Output:0
	COLOR.rgb = n_out5p0;


}
"
mode = 1
flags/light_only = false
nodes/fragment/3/node = SubResource("105")
nodes/fragment/3/position = Vector2(-160, 20)
nodes/fragment/4/node = SubResource("106")
nodes/fragment/4/position = Vector2(-160, 240)
nodes/fragment/5/node = SubResource("VisualShaderNodeCustom_7yinb")
nodes/fragment/5/position = Vector2(168, 128)
nodes/fragment/connections = PackedInt32Array(3, 0, 5, 0, 4, 0, 5, 1, 5, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="108"]
shader = SubResource("107")

[sub_resource type="FastNoiseLite" id="80"]

[sub_resource type="NoiseTexture2D" id="81"]
seamless = true
noise = SubResource("80")

[sub_resource type="VisualShaderNodeTexture" id="82"]
texture = SubResource("81")
texture_type = 1

[sub_resource type="VisualShaderNodeTexture" id="83"]
texture = ExtResource("1_cgkaa")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_p6p1e"]
default_input_values = [2, 1.0]
initialized = true
script = ExtResource("5_fentn")

[sub_resource type="VisualShader" id="84"]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_3 : source_color;
uniform sampler2D tex_frg_4 : source_color;


// BlendLinearLight

		float blend_linear_light_f(float c1, float c2) 
		{
			return (c2 + 2.0 * c1) - 1.0;
		}
		
		vec3 blend_linear_light(vec3 c1, vec3 c2, float opacity)
		{
			return opacity*vec3(blend_linear_light_f(c1.x, c2.x), blend_linear_light_f(c1.y, c2.y), blend_linear_light_f(c1.z, c2.z)) + (1.0-opacity)*c2;
		}
	

void fragment() {
// Texture2D:3
	vec4 n_out3p0 = texture(tex_frg_3, UV);


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


	vec3 n_out5p0;
// BlendLinearLight:5
	float n_in5p2 = 1.00000;
	{
		n_out5p0.rgb = blend_linear_light(vec3(n_out3p0.xyz).rgb, vec3(n_out4p0.xyz).rgb, n_in5p2);
	}


// Output:0
	COLOR.rgb = n_out5p0;


}
"
graph_offset = Vector2(-300.983, 166.5)
mode = 1
flags/light_only = false
nodes/fragment/3/node = SubResource("82")
nodes/fragment/3/position = Vector2(-600, -100)
nodes/fragment/4/node = SubResource("83")
nodes/fragment/4/position = Vector2(-600, 380)
nodes/fragment/5/node = SubResource("VisualShaderNodeCustom_p6p1e")
nodes/fragment/5/position = Vector2(71.1667, 146.667)
nodes/fragment/connections = PackedInt32Array(3, 0, 5, 0, 4, 0, 5, 1, 5, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="85"]
shader = SubResource("84")

[sub_resource type="FastNoiseLite" id="116"]

[sub_resource type="NoiseTexture2D" id="117"]
seamless = true
noise = SubResource("116")

[sub_resource type="VisualShaderNodeTexture" id="118"]
texture = SubResource("117")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="122"]
initialized = true
script = ExtResource("7_qla21")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_0lw0c"]
texture = ExtResource("1_cgkaa")
texture_type = 1

[sub_resource type="VisualShader" id="119"]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_2 : source_color;
uniform sampler2D tex_frg_5 : source_color;


// BlendLuminosity

		vec3 blend_luminosity( vec3 c1, vec3 c2 )
		{
			float dLum = dot(vec3(c2), vec3(0.3, 0.59, 0.11));
			float sLum = dot(vec3(c1), vec3(0.3, 0.59, 0.11));
			float lum = sLum - dLum;
			vec3 c = vec3(c2) + lum;
			float minC = min(min(c.x, c.y), c.z);
			float maxC = max(max(c.x, c.y), c.z);
			if(minC < 0.0) return sLum + ((c - sLum) * sLum) / (sLum - minC);
			else if(maxC > 1.0) return sLum + ((c - sLum) * (1.0 - sLum)) / (maxC - sLum);
			else return c;
		}
	

void fragment() {
// Texture2D:2
	vec4 n_out2p0 = texture(tex_frg_2, UV);


// Texture2D:5
	vec4 n_out5p0 = texture(tex_frg_5, UV);


	vec3 n_out4p0;
// BlendLuminosity:4
	{
		n_out4p0.rgb = blend_luminosity(vec3(n_out2p0.xyz).rgb, vec3(n_out5p0.xyz).rgb);
	}


// Output:0
	COLOR.rgb = n_out4p0;


}
"
graph_offset = Vector2(-227.666, 87.75)
mode = 1
flags/light_only = false
nodes/fragment/2/node = SubResource("118")
nodes/fragment/2/position = Vector2(-520, -160)
nodes/fragment/4/node = SubResource("122")
nodes/fragment/4/position = Vector2(158.685, 170.469)
nodes/fragment/5/node = SubResource("VisualShaderNodeTexture_0lw0c")
nodes/fragment/5/position = Vector2(-520, 340)
nodes/fragment/connections = PackedInt32Array(2, 0, 4, 0, 4, 0, 0, 0, 5, 0, 4, 1)

[sub_resource type="ShaderMaterial" id="120"]
shader = SubResource("119")

[sub_resource type="FastNoiseLite" id="127"]

[sub_resource type="NoiseTexture2D" id="128"]
seamless = true
noise = SubResource("127")

[sub_resource type="VisualShaderNodeTexture" id="129"]
texture = SubResource("128")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_7jcpl"]
default_input_values = [2, 1.0]
initialized = true
script = ExtResource("8_2t3vc")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_hq8ok"]
texture = ExtResource("1_cgkaa")
texture_type = 1

[sub_resource type="VisualShader" id="131"]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_3 : source_color;
uniform sampler2D tex_frg_6 : source_color;


// BlendPinLight

		float blend_pin_light_f( float c1, float c2 )
		{
			return (2.0 * c1 - 1.0 > c2) ? 2.0 * c1 - 1.0 : ((c1 < 0.5 * c2) ? 2.0 * c1 : c2);
		}
		
		vec3 blend_pin_light(vec3 c1, vec3 c2, float opacity)
		{
			return opacity*vec3(blend_pin_light_f(c1.x, c2.x), blend_pin_light_f(c1.y, c2.y), blend_pin_light_f(c1.z, c2.z)) + (1.0-opacity)*c2;
		}
	

void fragment() {
// Texture2D:3
	vec4 n_out3p0 = texture(tex_frg_3, UV);


// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, UV);


	vec3 n_out5p0;
// BlendPinLight:5
	float n_in5p2 = 1.00000;
	{
		n_out5p0.rgb = blend_pin_light(vec3(n_out3p0.xyz).rgb, vec3(n_out6p0.xyz).rgb, n_in5p2);
	}


// Output:0
	COLOR.rgb = n_out5p0;


}
"
graph_offset = Vector2(-254.678, 76.5)
mode = 1
flags/light_only = false
nodes/fragment/3/node = SubResource("129")
nodes/fragment/3/position = Vector2(-560, -220)
nodes/fragment/5/node = SubResource("VisualShaderNodeCustom_7jcpl")
nodes/fragment/5/position = Vector2(120, 220)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_hq8ok")
nodes/fragment/6/position = Vector2(-560, 280)
nodes/fragment/connections = PackedInt32Array(3, 0, 5, 0, 5, 0, 0, 0, 6, 0, 5, 1)

[sub_resource type="ShaderMaterial" id="125"]
shader = SubResource("131")

[sub_resource type="FastNoiseLite" id="132"]

[sub_resource type="NoiseTexture2D" id="133"]
seamless = true
noise = SubResource("132")

[sub_resource type="VisualShaderNodeTexture" id="134"]
texture = SubResource("133")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="138"]
initialized = true
script = ExtResource("9_uxc0e")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_ha3de"]
texture = ExtResource("1_cgkaa")
texture_type = 1

[sub_resource type="VisualShader" id="136"]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_2 : source_color;
uniform sampler2D tex_frg_5 : source_color;


// BlendVividLight

		vec3 blend_color_dodge(vec3 __top_col, vec3 __bot_col)
		{
			return __bot_col / (1.0 - __top_col);
		}
		
		vec3 blend_color_burn(vec3 __top_col, vec3 __bot_col)
		{
			return 1.0 - ((1.0 - __bot_col) / __top_col);
		}
		
		float blend_rgb_to_v(vec3 __col) {
			return max(max(__col.r / 255.0, __col.g / 255.0), __col.b / 255.0);
		}
		
		vec3 blend_vivid_light(vec3 __top_col, vec3 __bot_col) {
			if (blend_rgb_to_v(__top_col) > 0.5) {
				return blend_color_dodge(__top_col, __bot_col);
			} else {
				return blend_color_burn(__top_col, __bot_col);
			}
		}
	

void fragment() {
// Texture2D:2
	vec4 n_out2p0 = texture(tex_frg_2, UV);


// Texture2D:5
	vec4 n_out5p0 = texture(tex_frg_5, UV);


	vec3 n_out4p0;
// BlendVividLight:4
	{
		n_out4p0.rgb = blend_vivid_light(vec3(n_out2p0.xyz).rgb, vec3(n_out5p0.xyz).rgb);
	}


// Output:0
	COLOR.rgb = n_out4p0;


}
"
graph_offset = Vector2(-150.491, 105.75)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(520, 140)
nodes/fragment/2/node = SubResource("134")
nodes/fragment/2/position = Vector2(-320, -120)
nodes/fragment/4/node = SubResource("138")
nodes/fragment/4/position = Vector2(252.734, 164.494)
nodes/fragment/5/node = SubResource("VisualShaderNodeTexture_ha3de")
nodes/fragment/5/position = Vector2(-340, 360)
nodes/fragment/connections = PackedInt32Array(2, 0, 4, 0, 4, 0, 0, 0, 5, 0, 4, 1)

[sub_resource type="ShaderMaterial" id="137"]
shader = SubResource("136")

[sub_resource type="FastNoiseLite" id="FastNoiseLite_g7x4k"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_gh3xf"]
seamless = true
noise = SubResource("FastNoiseLite_g7x4k")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_6780m"]
texture = SubResource("NoiseTexture2D_gh3xf")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_0bpp7"]
default_input_values = [2, 1.0]
initialized = true
script = ExtResource("10_8uxja")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_b7eos"]
texture = ExtResource("1_cgkaa")
texture_type = 1

[sub_resource type="VisualShader" id="VisualShader_2gj65"]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_3 : source_color;
uniform sampler2D tex_frg_6 : source_color;


// BlendDarkerColor

		float blend_darker_color_f( float c1, float c2 )
		{
			return (c1 < c2) ? c1 : c2;
		}
		
		vec3 blend_darker_color(vec3 c1, vec3 c2, float opacity)
		{
			return opacity*vec3(blend_darker_color_f(c1.x, c2.x), blend_darker_color_f(c1.y, c2.y), blend_darker_color_f(c1.z, c2.z)) + (1.0-opacity)*c2;
		}
	

void fragment() {
// Texture2D:3
	vec4 n_out3p0 = texture(tex_frg_3, UV);


// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, UV);


	vec3 n_out5p0;
// BlendDarkerColor:5
	float n_in5p2 = 1.00000;
	{
		n_out5p0.rgb = blend_darker_color(vec3(n_out3p0.xyz).rgb, vec3(n_out6p0.xyz).rgb, n_in5p2);
	}


// Output:0
	COLOR.rgb = n_out5p0;


}
"
graph_offset = Vector2(-14.8818, 120.731)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(700, 240)
nodes/fragment/3/node = SubResource("VisualShaderNodeTexture_6780m")
nodes/fragment/3/position = Vector2(-220, 100)
nodes/fragment/5/node = SubResource("VisualShaderNodeCustom_0bpp7")
nodes/fragment/5/position = Vector2(280, 280)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_b7eos")
nodes/fragment/6/position = Vector2(-200, 580)
nodes/fragment/connections = PackedInt32Array(3, 0, 5, 0, 5, 0, 0, 0, 6, 0, 5, 1)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_kkuh1"]
shader = SubResource("VisualShader_2gj65")

[sub_resource type="FastNoiseLite" id="FastNoiseLite_vdyar"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_qcymp"]
seamless = true
noise = SubResource("FastNoiseLite_vdyar")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_8q4dt"]
texture = SubResource("NoiseTexture2D_qcymp")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_hsat7"]
default_input_values = [2, 1.0]
initialized = true
script = ExtResource("11_q4an4")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_8rw4k"]
texture = ExtResource("1_cgkaa")
texture_type = 1

[sub_resource type="VisualShader" id="VisualShader_mtah4"]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_3 : source_color;
uniform sampler2D tex_frg_6 : source_color;


// BlendExclusion

		float blend_exclusion_f( float c1, float c2 )
		{
			return c1 + c2 - 2.0 * c1 * c2;
		}
		
		vec3 blend_exclusion(vec3 c1, vec3 c2, float opacity)
		{
			return opacity*vec3(blend_exclusion_f(c1.x, c2.x), blend_exclusion_f(c1.y, c2.y), blend_exclusion_f(c1.z, c2.z)) + (1.0-opacity)*c2;
		}
	

void fragment() {
// Texture2D:3
	vec4 n_out3p0 = texture(tex_frg_3, UV);


// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, UV);


	vec3 n_out5p0;
// BlendExclusion:5
	float n_in5p2 = 1.00000;
	{
		n_out5p0.rgb = blend_exclusion(vec3(n_out3p0.xyz).rgb, vec3(n_out6p0.xyz).rgb, n_in5p2);
	}


// Output:0
	COLOR.rgb = n_out5p0;


}
"
graph_offset = Vector2(-81.0338, 153)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(420, 240)
nodes/fragment/3/node = SubResource("VisualShaderNodeTexture_8q4dt")
nodes/fragment/3/position = Vector2(-460, 0)
nodes/fragment/5/node = SubResource("VisualShaderNodeCustom_hsat7")
nodes/fragment/5/position = Vector2(142, 316)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_8rw4k")
nodes/fragment/6/position = Vector2(-480, 500)
nodes/fragment/connections = PackedInt32Array(3, 0, 5, 0, 5, 0, 0, 0, 6, 0, 5, 1)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_r04mt"]
shader = SubResource("VisualShader_mtah4")

[sub_resource type="FastNoiseLite" id="FastNoiseLite_b1xad"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_5f6le"]
seamless = true
noise = SubResource("FastNoiseLite_b1xad")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_aoou0"]
texture = SubResource("NoiseTexture2D_5f6le")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_extwf"]
default_input_values = [2, 1.0]
initialized = true
script = ExtResource("12_q0t3q")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_dxh6f"]
texture = ExtResource("1_cgkaa")
texture_type = 1

[sub_resource type="VisualShader" id="VisualShader_ew1un"]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_3 : source_color;
uniform sampler2D tex_frg_6 : source_color;


// BlendGammaDark

		float blend_gamma_dark_f(float c1, float c2)
		{
			return pow(c2, (1.0 / c1));
		}
		
		vec3 blend_gamma_dark(vec3 c1, vec3 c2, float opacity)
		{
			return opacity*vec3(blend_gamma_dark_f(c1.x, c2.x), blend_gamma_dark_f(c1.y, c2.y), blend_gamma_dark_f(c1.z, c2.z)) + (1.0-opacity)*c2;
		}
	

void fragment() {
// Texture2D:3
	vec4 n_out3p0 = texture(tex_frg_3, UV);


// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, UV);


	vec3 n_out5p0;
// BlendGammaDark:5
	float n_in5p2 = 1.00000;
	{
		n_out5p0.rgb = blend_gamma_dark(vec3(n_out3p0.xyz).rgb, vec3(n_out6p0.xyz).rgb, n_in5p2);
	}


// Output:0
	COLOR.rgb = n_out5p0;


}
"
graph_offset = Vector2(54.0225, 92.25)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(420, 240)
nodes/fragment/3/node = SubResource("VisualShaderNodeTexture_aoou0")
nodes/fragment/3/position = Vector2(-440, 20)
nodes/fragment/5/node = SubResource("VisualShaderNodeCustom_extwf")
nodes/fragment/5/position = Vector2(119, 274)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_dxh6f")
nodes/fragment/6/position = Vector2(-440, 520)
nodes/fragment/connections = PackedInt32Array(3, 0, 5, 0, 5, 0, 0, 0, 6, 0, 5, 1)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_vtjal"]
shader = SubResource("VisualShader_ew1un")

[sub_resource type="FastNoiseLite" id="FastNoiseLite_mh0kb"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_vdqcj"]
seamless = true
noise = SubResource("FastNoiseLite_mh0kb")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_q5w0l"]
texture = SubResource("NoiseTexture2D_vdqcj")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_mn3gd"]
default_input_values = [2, 1.0]
initialized = true
script = ExtResource("13_7mfkw")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_vy343"]
texture = ExtResource("1_cgkaa")
texture_type = 1

[sub_resource type="VisualShader" id="VisualShader_ywwl2"]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_3 : source_color;
uniform sampler2D tex_frg_6 : source_color;


// BlendHardMix

		float blend_hard_mix_f( float c1, float c2 )
		{
			return floor(c1 + c2);
		}
		
		vec3 blend_hard_mix(vec3 c1, vec3 c2, float opacity)
		{
			return opacity*vec3(blend_hard_mix_f(c1.x, c2.x), blend_hard_mix_f(c1.y, c2.y), blend_hard_mix_f(c1.z, c2.z)) + (1.0-opacity)*c2;
		}
	

void fragment() {
// Texture2D:3
	vec4 n_out3p0 = texture(tex_frg_3, UV);


// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, UV);


	vec3 n_out5p0;
// BlendHardMix:5
	float n_in5p2 = 1.00000;
	{
		n_out5p0.rgb = blend_hard_mix(vec3(n_out3p0.xyz).rgb, vec3(n_out6p0.xyz).rgb, n_in5p2);
	}


// Output:0
	COLOR.rgb = n_out5p0;


}
"
graph_offset = Vector2(65.5987, 49.5)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(620, 240)
nodes/fragment/3/node = SubResource("VisualShaderNodeTexture_q5w0l")
nodes/fragment/3/position = Vector2(-500, -20)
nodes/fragment/5/node = SubResource("VisualShaderNodeCustom_mn3gd")
nodes/fragment/5/position = Vector2(133, 241)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_vy343")
nodes/fragment/6/position = Vector2(-500, 460)
nodes/fragment/connections = PackedInt32Array(3, 0, 5, 0, 5, 0, 0, 0, 6, 0, 5, 1)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_c8s7p"]
shader = SubResource("VisualShader_ywwl2")

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_e0cta"]
default_input_values = [1, Vector2(8, 8)]
initialized = true
script = ExtResource("13_ptn0e")

[sub_resource type="VisualShaderNodeColorConstant" id="VisualShaderNodeColorConstant_cc80l"]

[sub_resource type="VisualShaderNodeColorConstant" id="VisualShaderNodeColorConstant_2p266"]
constant = Color(0, 0, 0, 1)

[sub_resource type="VisualShader" id="VisualShader_bbxpt"]
code = "shader_type canvas_item;


// Checkerboard

		vec3 checkerboard(vec2 _uv, vec2 _tiling, vec3 _color1, vec3 _color2) {
			float _tiling_x = floor(mod((_uv.x / (1.0 / _tiling.x)), 2.0));
			float _tiling_y = floor(mod((_uv.y / (1.0 / _tiling.y)), 2.0));
			bool _compare_bool = (abs(_tiling_x - _tiling_y) < 0.00001);
			return mix(_color1.xyz, _color2.xyz, (_compare_bool ? 1.0 : 0.0));
		}
	

void fragment() {
// ColorConstant:3
	vec4 n_out3p0 = vec4(1.000000, 1.000000, 1.000000, 1.000000);


// ColorConstant:4
	vec4 n_out4p0 = vec4(0.000000, 0.000000, 0.000000, 1.000000);


	vec3 n_out2p0;
// Checkerboard:2
	vec2 n_in2p1 = vec2(8.00000, 8.00000);
	{
		n_out2p0.xyz = checkerboard(UV.xy, n_in2p1.xy, vec3(n_out3p0.xyz), vec3(n_out4p0.xyz));
	}


// Output:0
	COLOR.rgb = n_out2p0;


}
"
graph_offset = Vector2(-61, 72)
mode = 1
flags/light_only = false
nodes/fragment/2/node = SubResource("VisualShaderNodeCustom_e0cta")
nodes/fragment/2/position = Vector2(180, 180)
nodes/fragment/3/node = SubResource("VisualShaderNodeColorConstant_cc80l")
nodes/fragment/3/position = Vector2(-60, 220)
nodes/fragment/4/node = SubResource("VisualShaderNodeColorConstant_2p266")
nodes/fragment/4/position = Vector2(-40, 300)
nodes/fragment/connections = PackedInt32Array(2, 0, 0, 0, 3, 0, 2, 2, 4, 0, 2, 3)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ijt06"]
shader = SubResource("VisualShader_bbxpt")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_5d2we"]
texture = ExtResource("1_cgkaa")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_cdqbk"]
default_input_values = [1, 129.657, 2, -0.419, 3, 0.126]
initialized = true
script = ExtResource("14_o4k34")

[sub_resource type="VisualShaderNodeColorFunc" id="VisualShaderNodeColorFunc_45eaf"]
function = 1

[sub_resource type="VisualShader" id="VisualShader_5n70k"]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_3 : source_color;


// HSVAdjustment

		vec3 hsv_adjustment(vec3 col, float hue_offset, float sat_offset, float val_offset) {
			vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
			vec4 p = mix(vec4(col.bg, K.wz), vec4(col.gb, K.xy), step(col.b, col.g));
			vec4 q = mix(vec4(p.xyw, col.r), vec4(col.r, p.yzx), step(p.x, col.r));
			float d = q.x - min(q.w, q.y);
			float e = 1.0e-10;
			vec3 hsv = vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
			hsv.x += hue_offset / 360.0;
			hsv.y += sat_offset;
			hsv.z += val_offset;
			return hsv;
		}
		
	

void fragment() {
// Texture2D:3
	vec4 n_out3p0 = texture(tex_frg_3, UV);


	vec3 n_out4p0;
// HSVAdjustment:4
	float n_in4p1 = 129.65700;
	float n_in4p2 = -0.41900;
	float n_in4p3 = 0.12600;
	{
		n_out4p0 = hsv_adjustment(vec3(n_out3p0.xyz).xyz, n_in4p1, n_in4p2, n_in4p3);
	}


	vec3 n_out6p0;
// ColorFunc:6
	{
		vec3 c = n_out4p0;
		vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
		vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
		n_out6p0 = c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
	}


// Output:0
	COLOR.rgb = n_out6p0;


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(580, 180)
nodes/fragment/3/node = SubResource("VisualShaderNodeTexture_5d2we")
nodes/fragment/3/position = Vector2(-220, 40)
nodes/fragment/4/node = SubResource("VisualShaderNodeCustom_cdqbk")
nodes/fragment/4/position = Vector2(60, 140)
nodes/fragment/6/node = SubResource("VisualShaderNodeColorFunc_45eaf")
nodes/fragment/6/position = Vector2(380, 200)
nodes/fragment/connections = PackedInt32Array(3, 0, 4, 0, 6, 0, 0, 0, 4, 0, 6, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_le34p"]
shader = SubResource("VisualShader_5n70k")

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_dkexg"]
default_input_values = [1, Vector2(0.5, 0.5), 2, Vector2(0.25, 0.25)]
initialized = true
script = ExtResource("14_jc8jc")

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_3vt21"]

[sub_resource type="VisualShader" id="VisualShader_ew583"]
code = "shader_type canvas_item;


// Box

		float sdBox( in vec2 __position, in vec2 __proportions )
		{
			vec2 __d = abs(__position) - __proportions;
			return length(max(__d, 0.0)) + min(max(__d.x, __d.y), 0.0);
		}
	

void fragment() {
	float n_out2p0;
// Box:2
	vec2 n_in2p1 = vec2(0.50000, 0.50000);
	vec2 n_in2p2 = vec2(0.25000, 0.25000);
	{
		n_out2p0 = sdBox(UV.xy - n_in2p1.xy, n_in2p2.xy);
	}


// Step:3
	float n_in3p1 = 0.00000;
	float n_out3p0 = step(n_out2p0, n_in3p1);


// Output:0
	COLOR.rgb = vec3(n_out3p0);


}
"
graph_offset = Vector2(-265, -41)
mode = 1
flags/light_only = false
nodes/fragment/2/node = SubResource("VisualShaderNodeCustom_dkexg")
nodes/fragment/2/position = Vector2(-240, 120)
nodes/fragment/3/node = SubResource("VisualShaderNodeStep_3vt21")
nodes/fragment/3/position = Vector2(60, 180)
nodes/fragment/connections = PackedInt32Array(2, 0, 3, 0, 3, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_yp0tr"]
shader = SubResource("VisualShader_ew583")

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_waqbe"]

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_7hsui"]
default_input_values = [1, Vector2(0.5, 0.5), 2, 0.25]
initialized = true
script = ExtResource("15_ge12c")

[sub_resource type="VisualShader" id="VisualShader_b85uw"]
code = "shader_type canvas_item;


// Circle

		float sdCircle(vec2 pos, float r) {
			return length(pos) - r;
		}
	

void fragment() {
	float n_out4p0;
// Circle:4
	vec2 n_in4p1 = vec2(0.50000, 0.50000);
	float n_in4p2 = 0.25000;
	{
		n_out4p0 = sdCircle(UV.xy - n_in4p1.xy, n_in4p2);
	}


// Step:3
	float n_in3p1 = 0.00000;
	float n_out3p0 = step(n_out4p0, n_in3p1);


// Output:0
	COLOR.rgb = vec3(n_out3p0);


}
"
graph_offset = Vector2(-306, -11)
mode = 1
flags/light_only = false
nodes/fragment/3/node = SubResource("VisualShaderNodeStep_waqbe")
nodes/fragment/3/position = Vector2(60, 180)
nodes/fragment/4/node = SubResource("VisualShaderNodeCustom_7hsui")
nodes/fragment/4/position = Vector2(-197, 129)
nodes/fragment/connections = PackedInt32Array(3, 0, 0, 0, 4, 0, 3, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_52mrt"]
shader = SubResource("VisualShader_b85uw")

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_287f8"]

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_jvi73"]
default_input_values = [1, Vector2(0.5, 0.5), 2, 0.15, 3, 0.3, 4, 0.2]
initialized = true
script = ExtResource("16_lficu")

[sub_resource type="VisualShader" id="VisualShader_jh5y8"]
code = "shader_type canvas_item;


// Parallelogram

		float sdParallelogram( in vec2 p, float wi, float he, float sk )
		{
			vec2 e = vec2(sk,he);
			p = (p.y<0.0)?-p:p;
			vec2  w = p - e; w.x -= clamp(w.x,-wi,wi);
			vec2  d = vec2(dot(w,w), -w.y);
			float s = p.x*e.y - p.y*e.x;
			p = (s<0.0)?-p:p;
			vec2  v = p - vec2(wi,0); v -= e*clamp(dot(v,e)/dot(e,e),-1.0,1.0);
			d = min( d, vec2(dot(v,v), wi*he-abs(s)));
			return sqrt(d.x)*sign(-d.y);
		}
	

void fragment() {
	float n_out4p0;
// Parallelogram:4
	vec2 n_in4p1 = vec2(0.50000, 0.50000);
	float n_in4p2 = 0.15000;
	float n_in4p3 = 0.30000;
	float n_in4p4 = 0.20000;
	{
		n_out4p0 = sdParallelogram(UV.xy - n_in4p1.xy, n_in4p2, n_in4p3, n_in4p4);
	}


// Step:3
	float n_in3p1 = 0.00000;
	float n_out3p0 = step(n_out4p0, n_in3p1);


// Output:0
	COLOR.rgb = vec3(n_out3p0);


}
"
graph_offset = Vector2(-335, -68.8333)
mode = 1
flags/light_only = false
nodes/fragment/3/node = SubResource("VisualShaderNodeStep_287f8")
nodes/fragment/3/position = Vector2(60, 180)
nodes/fragment/4/node = SubResource("VisualShaderNodeCustom_jvi73")
nodes/fragment/4/position = Vector2(-200, 120)
nodes/fragment/connections = PackedInt32Array(3, 0, 0, 0, 4, 0, 3, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_b8srd"]
shader = SubResource("VisualShader_jh5y8")

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_a2fts"]

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_qfav1"]
default_input_values = [1, Vector2(0.5, 0.5), 2, Vector2(0.25, 0.25)]
initialized = true
script = ExtResource("17_kodn2")

[sub_resource type="VisualShader" id="VisualShader_atxn6"]
code = "shader_type canvas_item;


// Rhombus

		float ndot(vec2 a, vec2 b ) { return a.x*b.x - a.y*b.y; }
		float sdRhombus( in vec2 p, in vec2 b ) 
		{
			p = abs(p);
			float h = clamp( ndot(b-2.0*p,b)/dot(b,b), -1.0, 1.0 );
			float d = length( p-0.5*b*vec2(1.0-h,1.0+h) );
			return d * sign( p.x*b.y + p.y*b.x - b.x*b.y );
		}
	

void fragment() {
	float n_out4p0;
// Rhombus:4
	vec2 n_in4p1 = vec2(0.50000, 0.50000);
	vec2 n_in4p2 = vec2(0.25000, 0.25000);
	{
		n_out4p0 = sdRhombus(UV.xy - n_in4p1.xy, n_in4p2.xy);
	}


// Step:3
	float n_in3p1 = 0.00000;
	float n_out3p0 = step(n_out4p0, n_in3p1);


// Output:0
	COLOR.rgb = vec3(n_out3p0);


}
"
graph_offset = Vector2(-371, -38)
mode = 1
flags/light_only = false
nodes/fragment/3/node = SubResource("VisualShaderNodeStep_a2fts")
nodes/fragment/3/position = Vector2(60, 180)
nodes/fragment/4/node = SubResource("VisualShaderNodeCustom_qfav1")
nodes/fragment/4/position = Vector2(-211, 98)
nodes/fragment/connections = PackedInt32Array(3, 0, 0, 0, 4, 0, 3, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_yyiql"]
shader = SubResource("VisualShader_atxn6")

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_ronoj"]

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_eypac"]
default_input_values = [1, Vector2(0.5, 0.5), 2, Vector2(-0.25, -0.25), 3, Vector2(0.25, 0.25), 4, 0.2]
initialized = true
script = ExtResource("17_4su7r")

[sub_resource type="VisualShader" id="VisualShader_2wk66"]
code = "shader_type canvas_item;


// PreciseBox

		float sdPreciseBox( in vec2 p, in vec2 a, in vec2 b, float th )
		{
			float l = length(b-a);
			vec2  d = (b-a)/l;
			vec2  q = (p-(a+b)*0.5);
				  q = mat2(vec2(d.x,-d.y), vec2(d.y,d.x))*q;
				  q = abs(q)-vec2(l,th)*0.5;
			return length(max(q,0.0)) + min(max(q.x,q.y),0.0);    
		}
	

void fragment() {
	float n_out4p0;
// PreciseBox:4
	vec2 n_in4p1 = vec2(0.50000, 0.50000);
	vec2 n_in4p2 = vec2(-0.25000, -0.25000);
	vec2 n_in4p3 = vec2(0.25000, 0.25000);
	float n_in4p4 = 0.20000;
	{
		n_out4p0 = sdPreciseBox(UV.xy - n_in4p1.xy, n_in4p2.xy, n_in4p3.xy, n_in4p4);
	}


// Step:3
	float n_in3p1 = 0.00000;
	float n_out3p0 = step(n_out4p0, n_in3p1);


// Output:0
	COLOR.rgb = vec3(n_out3p0);


}
"
graph_offset = Vector2(-282, -33)
mode = 1
flags/light_only = false
nodes/fragment/3/node = SubResource("VisualShaderNodeStep_ronoj")
nodes/fragment/3/position = Vector2(60, 180)
nodes/fragment/4/node = SubResource("VisualShaderNodeCustom_eypac")
nodes/fragment/4/position = Vector2(-200, 140)
nodes/fragment/connections = PackedInt32Array(3, 0, 0, 0, 4, 0, 3, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_lucsr"]
shader = SubResource("VisualShader_2wk66")

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_mvbda"]

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_d8n2b"]
default_input_values = [1, Vector2(0.5, 0.5), 2, Vector2(0.25, 0.25), 3, Vector4(0, 0, 0, 0)]
initialized = true
script = ExtResource("19_jp1e3")

[sub_resource type="VisualShaderNodeVec4Parameter" id="VisualShaderNodeVec4Parameter_ma1o7"]
parameter_name = "Vector4Parameter"
default_value_enabled = true

[sub_resource type="VisualShader" id="VisualShader_e1125"]
code = "shader_type canvas_item;
uniform vec4 Vector4Parameter = vec4(0.000000, 0.000000, 0.000000, 0.000000);


// RoundedBox

		float sdRoundedBox( in vec2 __pos, in vec2 __proportions, in vec4 __radia )
		{
			__radia.xy = (__pos.x > 0.0) ? __radia.xy : vec2(__radia.w, __radia.z);
			__radia.x  = (__pos.y > 0.0) ? __radia.x  : __radia.y;
			vec2 __q = abs(__pos) - __proportions + __radia.x;
			return min(max(__q.x, __q.y), 0.0) + length(max(__q, 0.0)) - __radia.x;
		}
	

void fragment() {
// Vector4Parameter:7
	vec4 n_out7p0 = Vector4Parameter;


	float n_out6p0;
// RoundedBox:6
	vec2 n_in6p1 = vec2(0.50000, 0.50000);
	vec2 n_in6p2 = vec2(0.25000, 0.25000);
	{
		n_out6p0 = sdRoundedBox(UV.xy - n_in6p1.xy, n_in6p2.xy, n_out7p0.xyzw);
	}


// Step:3
	float n_in3p1 = 0.00000;
	float n_out3p0 = step(n_out6p0, n_in3p1);


// Output:0
	COLOR.rgb = vec3(n_out3p0);


}
"
graph_offset = Vector2(-616.6, 32.6)
mode = 1
flags/light_only = false
nodes/fragment/3/node = SubResource("VisualShaderNodeStep_mvbda")
nodes/fragment/3/position = Vector2(60, 180)
nodes/fragment/6/node = SubResource("VisualShaderNodeCustom_d8n2b")
nodes/fragment/6/position = Vector2(-191, 197)
nodes/fragment/7/node = SubResource("VisualShaderNodeVec4Parameter_ma1o7")
nodes/fragment/7/position = Vector2(-560, 180)
nodes/fragment/connections = PackedInt32Array(3, 0, 0, 0, 6, 0, 3, 0, 7, 0, 6, 3)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_pr0po"]
shader = SubResource("VisualShader_e1125")
shader_parameter/Vector4Parameter = Vector4(0.25, 0.056, 0.25, 0)

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_46s00"]

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_543dt"]
default_input_values = [1, Vector2(0.5, 0.5), 2, 0.15, 3, 0.35, 4, 0.25]
initialized = true
script = ExtResource("20_7awbu")

[sub_resource type="VisualShader" id="VisualShader_7tc5t"]
code = "shader_type canvas_item;


// Trapezoid

		float sdTrapezoid( in vec2 p, in float r1, float r2, float he )
		{
			vec2 k1 = vec2(r2,he);
			vec2 k2 = vec2(r2-r1,2.0*he);
			p.x = abs(p.x);
			vec2 ca = vec2(p.x-min(p.x,(p.y<0.0)?r1:r2), abs(p.y)-he);
			vec2 cb = p - k1 + k2*clamp( dot(k1-p,k2)/dot(k2, k2), 0.0, 1.0 );
			float s = (cb.x<0.0 && ca.y<0.0) ? -1.0 : 1.0;
			return s*sqrt( min(dot(ca, ca),dot(cb, cb)) );
		}
	

void fragment() {
	float n_out4p0;
// Trapezoid:4
	vec2 n_in4p1 = vec2(0.50000, 0.50000);
	float n_in4p2 = 0.15000;
	float n_in4p3 = 0.35000;
	float n_in4p4 = 0.25000;
	{
		n_out4p0 = sdTrapezoid(UV.xy - n_in4p1.xy, n_in4p2, n_in4p3, n_in4p4);
	}


// Step:3
	float n_in3p1 = 0.00000;
	float n_out3p0 = step(n_out4p0, n_in3p1);


// Output:0
	COLOR.rgb = vec3(n_out3p0);


}
"
graph_offset = Vector2(-411, -37)
mode = 1
flags/light_only = false
nodes/fragment/3/node = SubResource("VisualShaderNodeStep_46s00")
nodes/fragment/3/position = Vector2(60, 180)
nodes/fragment/4/node = SubResource("VisualShaderNodeCustom_543dt")
nodes/fragment/4/position = Vector2(-172, 144)
nodes/fragment/connections = PackedInt32Array(3, 0, 0, 0, 4, 0, 3, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_wr7cc"]
shader = SubResource("VisualShader_7tc5t")

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_rjno1"]

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_0ievt"]
default_input_values = [1, Vector2(0.5, 0.25), 2, Vector2(0.25, 0.5)]
initialized = true
script = ExtResource("21_775g5")

[sub_resource type="VisualShader" id="VisualShader_sqnwd"]
code = "shader_type canvas_item;


// Triangle

		float sdTriangleIsosceles( in vec2 p, in vec2 q )
		{
			p.x = abs(p.x);
			vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );
			vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );
			float s = -sign( q.y );
			vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),
						  vec2( dot(b,b), s*(p.y-q.y)  ));
			return -sqrt(d.x)*sign(d.y);
		}
	

void fragment() {
	float n_out4p0;
// Triangle:4
	vec2 n_in4p1 = vec2(0.50000, 0.25000);
	vec2 n_in4p2 = vec2(0.25000, 0.50000);
	{
		n_out4p0 = sdTriangleIsosceles(UV.xy - n_in4p1.xy, n_in4p2.xy);
	}


// Step:3
	float n_in3p1 = 0.00000;
	float n_out3p0 = step(n_out4p0, n_in3p1);


// Output:0
	COLOR.rgb = vec3(n_out3p0);


}
"
graph_offset = Vector2(-386, -13)
mode = 1
flags/light_only = false
nodes/fragment/3/node = SubResource("VisualShaderNodeStep_rjno1")
nodes/fragment/3/position = Vector2(60, 180)
nodes/fragment/4/node = SubResource("VisualShaderNodeCustom_0ievt")
nodes/fragment/4/position = Vector2(-198, 163)
nodes/fragment/connections = PackedInt32Array(3, 0, 0, 0, 4, 0, 3, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_7wkl2"]
shader = SubResource("VisualShader_sqnwd")

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_8dss3"]
default_input_values = [1, Vector2(0.5, 0.5), 2, 10.0, 3, Vector2(0, 0)]
initialized = true
script = ExtResource("22_0m23s")

[sub_resource type="VisualShader" id="VisualShader_eqdrg"]
code = "shader_type canvas_item;


// UVTwirl

		vec2 Twirl(vec2 __uv, vec2 __center, float __strength, vec2 __offset)
		{
			vec2 __delta = __uv - __center;
			float __angle = __strength * length(__delta);
			float __x = cos(__angle) * __delta.x - sin(__angle) * __delta.y;
			float __y = sin(__angle) * __delta.x + cos(__angle) * __delta.y;
			return vec2(__x + __center.x + __offset.x, __y + __center.y + __offset.y);
		}
	

void fragment() {
	vec2 n_out2p0;
// UVTwirl:2
	vec2 n_in2p1 = vec2(0.50000, 0.50000);
	float n_in2p2 = 10.00000;
	vec2 n_in2p3 = vec2(0.00000, 0.00000);
	{
		n_out2p0.xy = Twirl(UV.xy, n_in2p1.xy, n_in2p2, n_in2p3.xy);
	}


// Output:0
	COLOR.rgb = vec3(n_out2p0, 0.0);


}
"
graph_offset = Vector2(-66.5925, -60.75)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(340, 40)
nodes/fragment/2/node = SubResource("VisualShaderNodeCustom_8dss3")
nodes/fragment/2/position = Vector2(-31.185, 12.5)
nodes/fragment/connections = PackedInt32Array(2, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_nk7cv"]
shader = SubResource("VisualShader_eqdrg")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_vdmwd"]
source = 5
texture = ExtResource("23_7eq8w")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_72wbf"]
default_input_values = [1, 24, 2, 1, 3, 0, 4, 24, 5, 0.3]
initialized = true
script = ExtResource("24_peh0q")

[sub_resource type="VisualShaderNodeVectorDecompose" id="VisualShaderNodeVectorDecompose_4i80k"]
default_input_values = [0, Quaternion(0, 0, 0, 0)]
op_type = 2

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_3avxn"]
parameter_name = "MainTex"
texture_type = 1
texture_filter = 1
texture_repeat = 2

[sub_resource type="VisualShader" id="VisualShader_pgiym"]
code = "shader_type canvas_item;
uniform sampler2D MainTex : source_color, filter_nearest, repeat_disable;


// UVFlipbook

		vec2 flipbook_anim(vec2 __uv, int __columns, int __rows, int __starting_frame, int __ending_frame, float __anim_speed) {
			__starting_frame += int(fract(TIME * __anim_speed) * float(__ending_frame));
			float frame = float(clamp(__starting_frame, 0, __ending_frame));
			vec2 offPerFrame = vec2((1.0 / float(__columns)), (1.0 / float(__rows)));
			
			vec2 sprite_size = vec2(__uv.x / float(__columns), __uv.y / float(__rows));
			vec2 current_sprite = vec2(0.0, 1.0 - offPerFrame.y);
			current_sprite.x += frame * offPerFrame.x;
			float rowIndex;
			float _mod = modf(frame / float(__columns), rowIndex);
			current_sprite.y -= rowIndex * offPerFrame.y;
			current_sprite.x -= rowIndex * float(__columns) * offPerFrame.x;
			
			vec2 sprite_uv = (sprite_size + current_sprite);
			
			return sprite_uv;
		}
	

void fragment() {
	vec2 n_out4p0;
// UVFlipbook:4
	int n_in4p1 = 24;
	int n_in4p2 = 1;
	int n_in4p3 = 0;
	int n_in4p4 = 24;
	float n_in4p5 = 0.30000;
	{
		n_out4p0.xy = flipbook_anim(UV.xy, n_in4p1, n_in4p2, n_in4p3, n_in4p4, n_in4p5 );
	}


	vec4 n_out3p0;
// Texture2D:3
	n_out3p0 = texture(MainTex, n_out4p0);


// VectorDecompose:5
	float n_out5p0 = n_out3p0.x;
	float n_out5p1 = n_out3p0.y;
	float n_out5p2 = n_out3p0.z;
	float n_out5p3 = n_out3p0.w;


// Output:0
	COLOR.rgb = vec3(n_out3p0.xyz);
	COLOR.a = n_out5p3;


}
"
graph_offset = Vector2(-105.011, 27.9852)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(1040, 60)
nodes/fragment/3/node = SubResource("VisualShaderNodeTexture_vdmwd")
nodes/fragment/3/position = Vector2(220, 20)
nodes/fragment/4/node = SubResource("VisualShaderNodeCustom_72wbf")
nodes/fragment/4/position = Vector2(-340, 80)
nodes/fragment/5/node = SubResource("VisualShaderNodeVectorDecompose_4i80k")
nodes/fragment/5/position = Vector2(560, 300)
nodes/fragment/7/node = SubResource("VisualShaderNodeTexture2DParameter_3avxn")
nodes/fragment/7/position = Vector2(-520, 400)
nodes/fragment/connections = PackedInt32Array(3, 0, 0, 0, 3, 0, 5, 0, 5, 3, 0, 1, 7, 0, 3, 2, 4, 0, 3, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_esshf"]
shader = SubResource("VisualShader_pgiym")
shader_parameter/MainTex = ExtResource("23_7eq8w")

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_fuam6"]
default_input_values = [0, Vector2(2, 2), 1, 4.0, 2, 2.08165e-12]
initialized = true
script = ExtResource("24_xmnb7")

[sub_resource type="VisualShader" id="VisualShader_8gnev"]
code = "shader_type canvas_item;


// UVTiler

		vec2 tile(vec2 _uv, float _zoom){
			_uv *= _zoom;
			return fract(_uv);
		}
		
		vec2 rotate(vec2 _uv, float _angle) {
			_uv -= 0.5;
			_uv = mat2( vec2(cos(_angle), -sin(_angle)), vec2(sin(_angle), cos(_angle)) ) * _uv;
			_uv += 0.5;
			return _uv;
		}
	

void fragment() {
	vec2 n_out2p0;
// UVTiler:2
	vec2 n_in2p0 = vec2(2.00000, 2.00000);
	float n_in2p1 = 4.00000;
	float n_in2p2 = 0.00000;
	{
		
			vec2 st = UV.xy/n_in2p0.xy;
			st = tile(st,n_in2p1);
			st = rotate(st, n_in2p2);
			n_out2p0 = st;
			
	}


// Output:0
	COLOR.rgb = vec3(n_out2p0, 0.0);


}
"
graph_offset = Vector2(-215.28, -54)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(340, 40)
nodes/fragment/2/node = SubResource("VisualShaderNodeCustom_fuam6")
nodes/fragment/2/position = Vector2(-260, 60)
nodes/fragment/connections = PackedInt32Array(2, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_v8ct1"]
shader = SubResource("VisualShader_8gnev")

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_qhyoa"]
default_input_values = [1, 2.0, 2, 1.0, 3, 0.0]
initialized = true
script = ExtResource("24_b72mw")

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_3o0vd"]
input_name = "time"

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_eqdgy"]
texture = ExtResource("1_cgkaa")
texture_type = 1

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_67ujy"]
operator = 2

[sub_resource type="VisualShader" id="VisualShader_wx5y0"]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_4 : source_color;


// TriangleWave

		float triangle_wave(float IN, float __amplitude, float __frequency, float __height) {
			return 1.0 - __amplitude * abs(round(IN / __frequency) - (IN / __frequency)) + __height;
		}
	

void fragment() {
// Input:3
	float n_out3p0 = TIME;


	float n_out2p0;
// TriangleWave:2
	float n_in2p1 = 2.00000;
	float n_in2p2 = 1.00000;
	float n_in2p3 = 0.00000;
	{
		n_out2p0 = triangle_wave(n_out3p0, n_in2p1, n_in2p2, n_in2p3);
	}


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


// VectorOp:5
	vec3 n_out5p0 = vec3(n_out2p0) * vec3(n_out4p0.xyz);


// Output:0
	COLOR.rgb = n_out5p0;


}
"
graph_offset = Vector2(-276.615, 2.24999)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(680, 140)
nodes/fragment/2/node = SubResource("VisualShaderNodeCustom_qhyoa")
nodes/fragment/2/position = Vector2(-280, 80)
nodes/fragment/3/node = SubResource("VisualShaderNodeInput_3o0vd")
nodes/fragment/3/position = Vector2(-1020, 60)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_eqdgy")
nodes/fragment/4/position = Vector2(-420, 400)
nodes/fragment/5/node = SubResource("VisualShaderNodeVectorOp_67ujy")
nodes/fragment/5/position = Vector2(200, 200)
nodes/fragment/connections = PackedInt32Array(3, 0, 2, 0, 2, 0, 5, 0, 4, 0, 5, 1, 5, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_o3d0f"]
shader = SubResource("VisualShader_wx5y0")

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_0j4rd"]
default_input_values = [1, 2.0, 2, 1.0, 3, 0.0]
initialized = true
script = ExtResource("25_srj7y")

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_baknj"]
operator = 2

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_ikytu"]
texture = ExtResource("1_cgkaa")
texture_type = 1

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_gcea3"]
input_name = "time"

[sub_resource type="VisualShader" id="VisualShader_puwg7"]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_4 : source_color;


// SquareWave

		float square_wave(float IN, float __amplitude, float __frequency, float __height) {
			return __amplitude*sign(sin(2.0 * PI * IN * __frequency)) + __height;
		}
	

void fragment() {
// Input:5
	float n_out5p0 = TIME;


	float n_out2p0;
// SquareWave:2
	float n_in2p1 = 2.00000;
	float n_in2p2 = 1.00000;
	float n_in2p3 = 0.00000;
	{
		n_out2p0 = square_wave(n_out5p0, n_in2p1, n_in2p2, n_in2p3);
	}


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


// VectorOp:3
	vec3 n_out3p0 = vec3(n_out2p0) * vec3(n_out4p0.xyz);


// Output:0
	COLOR.rgb = n_out3p0;


}
"
graph_offset = Vector2(-133.185, 13.5)
mode = 1
flags/light_only = false
nodes/fragment/2/node = SubResource("VisualShaderNodeCustom_0j4rd")
nodes/fragment/2/position = Vector2(-380, 100)
nodes/fragment/3/node = SubResource("VisualShaderNodeVectorOp_baknj")
nodes/fragment/3/position = Vector2(-19.005, 181)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_ikytu")
nodes/fragment/4/position = Vector2(-520, 420)
nodes/fragment/5/node = SubResource("VisualShaderNodeInput_gcea3")
nodes/fragment/5/position = Vector2(-1140, 120)
nodes/fragment/connections = PackedInt32Array(2, 0, 3, 0, 4, 0, 3, 1, 5, 0, 2, 0, 3, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_t427w"]
shader = SubResource("VisualShader_puwg7")

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_nfkyf"]
default_input_values = [1, 1.0, 2, 1.0, 3, 0.0]
initialized = true
script = ExtResource("26_777un")

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_won18"]
operator = 2

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_3hn32"]
texture = ExtResource("1_cgkaa")
texture_type = 1

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_g3y1n"]
input_name = "time"

[sub_resource type="VisualShader" id="VisualShader_y5gtx"]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_4 : source_color;


// SawtoothWave

		float sawtooth_wave(float IN, float __amplitude, float __period, float __height) {
			return 2.0 * __amplitude * ((IN/__period) - floor((1.0/2.0) + (IN / __period))) + __height;
		}
	

void fragment() {
// Input:5
	float n_out5p0 = TIME;


	float n_out2p0;
// SawtoothWave:2
	float n_in2p1 = 1.00000;
	float n_in2p2 = 1.00000;
	float n_in2p3 = 0.00000;
	{
		n_out2p0 = sawtooth_wave(n_out5p0, n_in2p1, n_in2p2, n_in2p3);
	}


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


// VectorOp:3
	vec3 n_out3p0 = vec3(n_out2p0) * vec3(n_out4p0.xyz);


// Output:0
	COLOR.rgb = n_out3p0;


}
"
graph_offset = Vector2(-76.8375, 63)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(560, 320)
nodes/fragment/2/node = SubResource("VisualShaderNodeCustom_nfkyf")
nodes/fragment/2/position = Vector2(-280, 120)
nodes/fragment/3/node = SubResource("VisualShaderNodeVectorOp_won18")
nodes/fragment/3/position = Vector2(108.16, 266.5)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_3hn32")
nodes/fragment/4/position = Vector2(-420, 420)
nodes/fragment/5/node = SubResource("VisualShaderNodeInput_g3y1n")
nodes/fragment/5/position = Vector2(-980, 100)
nodes/fragment/connections = PackedInt32Array(2, 0, 3, 0, 4, 0, 3, 1, 5, 0, 2, 0, 3, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_7g4dk"]
shader = SubResource("VisualShader_y5gtx")

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_8d5ov"]
default_input_values = [1, 1.0, 2, 1.0, 3, 0.0, 4, 0.0]
initialized = true
script = ExtResource("27_5a8eg")

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_esgtp"]
input_name = "time"

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_28nfh"]
operator = 2

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_qt8jv"]
texture = ExtResource("1_cgkaa")
texture_type = 1

[sub_resource type="VisualShader" id="VisualShader_enkir"]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_5 : source_color;


// SineWave

		float sine_wave(float IN, float __amplitude, float __frequency, float __phase, float __height) {
			return __amplitude * sin(2.0 * PI * __frequency * IN + __phase) + __height;
		}
	

void fragment() {
// Input:3
	float n_out3p0 = TIME;


	float n_out2p0;
// SineWave:2
	float n_in2p1 = 1.00000;
	float n_in2p2 = 1.00000;
	float n_in2p3 = 0.00000;
	float n_in2p4 = 0.00000;
	{
		n_out2p0 = sine_wave(n_out3p0, n_in2p1, n_in2p2, n_in2p3, n_in2p4);
	}


// Texture2D:5
	vec4 n_out5p0 = texture(tex_frg_5, UV);


// VectorOp:4
	vec3 n_out4p0 = vec3(n_out2p0) * vec3(n_out5p0.xyz);


// Output:0
	COLOR.rgb = n_out4p0;


}
"
graph_offset = Vector2(-148.553, 29.25)
mode = 1
flags/light_only = false
nodes/fragment/2/node = SubResource("VisualShaderNodeCustom_8d5ov")
nodes/fragment/2/position = Vector2(-320, 40)
nodes/fragment/3/node = SubResource("VisualShaderNodeInput_esgtp")
nodes/fragment/3/position = Vector2(-1040, 60)
nodes/fragment/4/node = SubResource("VisualShaderNodeVectorOp_28nfh")
nodes/fragment/4/position = Vector2(60, 140)
nodes/fragment/5/node = SubResource("VisualShaderNodeTexture_qt8jv")
nodes/fragment/5/position = Vector2(-480, 400)
nodes/fragment/connections = PackedInt32Array(3, 0, 2, 0, 2, 0, 4, 0, 5, 0, 4, 1, 4, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_20n14"]
shader = SubResource("VisualShader_enkir")

[node name="Examples" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
size_flags_horizontal = 3
size_flags_vertical = 3

[node name="BlendModes" type="Control" parent="."]
visible = false
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="VBoxContainer" type="VBoxContainer" parent="BlendModes"]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="Label" type="Label" parent="BlendModes/VBoxContainer"]
layout_mode = 2
theme_override_font_sizes/font_size = 40
text = "Blend Modes"

[node name="VBoxContainer" type="VBoxContainer" parent="BlendModes/VBoxContainer"]
layout_mode = 2
size_flags_vertical = 3

[node name="Lighten" type="VBoxContainer" parent="BlendModes/VBoxContainer/VBoxContainer"]
layout_mode = 2
size_flags_vertical = 3

[node name="LightenLabel" type="Label" parent="BlendModes/VBoxContainer/VBoxContainer/Lighten"]
layout_mode = 2
theme_override_font_sizes/font_size = 32
text = "Lighten"

[node name="ShaderExampleContainer" type="HBoxContainer" parent="BlendModes/VBoxContainer/VBoxContainer/Lighten"]
layout_mode = 2

[node name="GammaIllumination" type="VBoxContainer" parent="BlendModes/VBoxContainer/VBoxContainer/Lighten/ShaderExampleContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/VBoxContainer/Lighten/ShaderExampleContainer/GammaIllumination"]
material = SubResource("69")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_cgkaa")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/VBoxContainer/Lighten/ShaderExampleContainer/GammaIllumination"]
layout_mode = 2
text = "Gamma Illumination"
horizontal_alignment = 1

[node name="GammaLight" type="VBoxContainer" parent="BlendModes/VBoxContainer/VBoxContainer/Lighten/ShaderExampleContainer"]
material = SubResource("77")
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/VBoxContainer/Lighten/ShaderExampleContainer/GammaLight"]
material = SubResource("77")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_cgkaa")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/VBoxContainer/Lighten/ShaderExampleContainer/GammaLight"]
layout_mode = 2
text = "Gamma Light"
horizontal_alignment = 1

[node name="LighterColor" type="VBoxContainer" parent="BlendModes/VBoxContainer/VBoxContainer/Lighten/ShaderExampleContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/VBoxContainer/Lighten/ShaderExampleContainer/LighterColor"]
material = SubResource("108")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_cgkaa")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/VBoxContainer/Lighten/ShaderExampleContainer/LighterColor"]
layout_mode = 2
text = "Lighter Color"
horizontal_alignment = 1

[node name="LinearLight" type="VBoxContainer" parent="BlendModes/VBoxContainer/VBoxContainer/Lighten/ShaderExampleContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/VBoxContainer/Lighten/ShaderExampleContainer/LinearLight"]
material = SubResource("85")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_cgkaa")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/VBoxContainer/Lighten/ShaderExampleContainer/LinearLight"]
layout_mode = 2
text = "Linear Light"
horizontal_alignment = 1

[node name="Luminosity" type="VBoxContainer" parent="BlendModes/VBoxContainer/VBoxContainer/Lighten/ShaderExampleContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/VBoxContainer/Lighten/ShaderExampleContainer/Luminosity"]
material = SubResource("120")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_cgkaa")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/VBoxContainer/Lighten/ShaderExampleContainer/Luminosity"]
layout_mode = 2
text = "Luminosity"
horizontal_alignment = 1

[node name="PinLight" type="VBoxContainer" parent="BlendModes/VBoxContainer/VBoxContainer/Lighten/ShaderExampleContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/VBoxContainer/Lighten/ShaderExampleContainer/PinLight"]
material = SubResource("125")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_cgkaa")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/VBoxContainer/Lighten/ShaderExampleContainer/PinLight"]
layout_mode = 2
text = "Pin Light"
horizontal_alignment = 1

[node name="VividLight" type="VBoxContainer" parent="BlendModes/VBoxContainer/VBoxContainer/Lighten/ShaderExampleContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/VBoxContainer/Lighten/ShaderExampleContainer/VividLight"]
material = SubResource("137")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_cgkaa")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/VBoxContainer/Lighten/ShaderExampleContainer/VividLight"]
layout_mode = 2
text = "Vivid Light"
horizontal_alignment = 1

[node name="Darken" type="VBoxContainer" parent="BlendModes/VBoxContainer/VBoxContainer"]
layout_mode = 2
size_flags_vertical = 3

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/VBoxContainer/Darken"]
layout_mode = 2
theme_override_font_sizes/font_size = 32
text = "Darken"

[node name="ShaderExampleContainer" type="HBoxContainer" parent="BlendModes/VBoxContainer/VBoxContainer/Darken"]
layout_mode = 2

[node name="DarkerColor" type="VBoxContainer" parent="BlendModes/VBoxContainer/VBoxContainer/Darken/ShaderExampleContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/VBoxContainer/Darken/ShaderExampleContainer/DarkerColor"]
material = SubResource("ShaderMaterial_kkuh1")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_cgkaa")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/VBoxContainer/Darken/ShaderExampleContainer/DarkerColor"]
layout_mode = 2
text = "Darker Color"
horizontal_alignment = 1

[node name="Exclusion" type="VBoxContainer" parent="BlendModes/VBoxContainer/VBoxContainer/Darken/ShaderExampleContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/VBoxContainer/Darken/ShaderExampleContainer/Exclusion"]
material = SubResource("ShaderMaterial_r04mt")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_cgkaa")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/VBoxContainer/Darken/ShaderExampleContainer/Exclusion"]
layout_mode = 2
text = "Exclusion"
horizontal_alignment = 1

[node name="GammaDark" type="VBoxContainer" parent="BlendModes/VBoxContainer/VBoxContainer/Darken/ShaderExampleContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/VBoxContainer/Darken/ShaderExampleContainer/GammaDark"]
material = SubResource("ShaderMaterial_vtjal")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_cgkaa")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/VBoxContainer/Darken/ShaderExampleContainer/GammaDark"]
layout_mode = 2
text = "Gamma Dark"
horizontal_alignment = 1

[node name="HardMix" type="VBoxContainer" parent="BlendModes/VBoxContainer/VBoxContainer/Darken/ShaderExampleContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/VBoxContainer/Darken/ShaderExampleContainer/HardMix"]
material = SubResource("ShaderMaterial_c8s7p")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_cgkaa")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/VBoxContainer/Darken/ShaderExampleContainer/HardMix"]
layout_mode = 2
text = "Hard Mix"
horizontal_alignment = 1

[node name="Procedural" type="Control" parent="."]
visible = false
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="VBoxContainer" type="VBoxContainer" parent="Procedural"]
layout_mode = 0
offset_right = 40.0
offset_bottom = 40.0

[node name="Label" type="Label" parent="Procedural/VBoxContainer"]
layout_mode = 2
theme_override_font_sizes/font_size = 40
text = "Procedural"

[node name="HBoxContainer" type="HBoxContainer" parent="Procedural/VBoxContainer"]
layout_mode = 2

[node name="Checkerboard" type="VBoxContainer" parent="Procedural/VBoxContainer/HBoxContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="Procedural/VBoxContainer/HBoxContainer/Checkerboard"]
material = SubResource("ShaderMaterial_ijt06")
layout_mode = 2
texture = ExtResource("1_cgkaa")

[node name="Label" type="Label" parent="Procedural/VBoxContainer/HBoxContainer/Checkerboard"]
layout_mode = 2
text = "Checkerboard"
horizontal_alignment = 1

[node name="ColorAdjustment" type="Control" parent="."]
visible = false
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="VBoxContainer" type="VBoxContainer" parent="ColorAdjustment"]
layout_mode = 1
offset_right = 40.0
offset_bottom = 40.0

[node name="Label" type="Label" parent="ColorAdjustment/VBoxContainer"]
layout_mode = 2
theme_override_font_sizes/font_size = 40
text = "Color Adjustment"

[node name="HBoxContainer" type="HBoxContainer" parent="ColorAdjustment/VBoxContainer"]
layout_mode = 2

[node name="HSVAdjustment" type="VBoxContainer" parent="ColorAdjustment/VBoxContainer/HBoxContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="ColorAdjustment/VBoxContainer/HBoxContainer/HSVAdjustment"]
material = SubResource("ShaderMaterial_le34p")
layout_mode = 2
texture = ExtResource("1_cgkaa")

[node name="Label" type="Label" parent="ColorAdjustment/VBoxContainer/HBoxContainer/HSVAdjustment"]
layout_mode = 2
size_flags_vertical = 6
text = "HSVAdjustment"
horizontal_alignment = 1
vertical_alignment = 1

[node name="Shapes" type="Control" parent="."]
visible = false
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="VBoxContainer" type="VBoxContainer" parent="Shapes"]
layout_mode = 0
offset_right = 40.0
offset_bottom = 40.0

[node name="Label" type="Label" parent="Shapes/VBoxContainer"]
layout_mode = 2
theme_override_font_sizes/font_size = 40
text = "Shapes"

[node name="HBoxContainer" type="HBoxContainer" parent="Shapes/VBoxContainer"]
layout_mode = 2

[node name="Box" type="VBoxContainer" parent="Shapes/VBoxContainer/HBoxContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="Shapes/VBoxContainer/HBoxContainer/Box"]
material = SubResource("ShaderMaterial_yp0tr")
layout_mode = 2
size_flags_vertical = 3
texture = ExtResource("1_cgkaa")

[node name="Label" type="Label" parent="Shapes/VBoxContainer/HBoxContainer/Box"]
layout_mode = 2
text = "Box"
horizontal_alignment = 1
vertical_alignment = 1

[node name="Circle" type="VBoxContainer" parent="Shapes/VBoxContainer/HBoxContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="Shapes/VBoxContainer/HBoxContainer/Circle"]
material = SubResource("ShaderMaterial_52mrt")
layout_mode = 2
size_flags_vertical = 3
texture = ExtResource("1_cgkaa")

[node name="Label" type="Label" parent="Shapes/VBoxContainer/HBoxContainer/Circle"]
layout_mode = 2
text = "Circle"
horizontal_alignment = 1
vertical_alignment = 1

[node name="Parallelogram" type="VBoxContainer" parent="Shapes/VBoxContainer/HBoxContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="Shapes/VBoxContainer/HBoxContainer/Parallelogram"]
material = SubResource("ShaderMaterial_b8srd")
layout_mode = 2
size_flags_vertical = 3
texture = ExtResource("1_cgkaa")

[node name="Label" type="Label" parent="Shapes/VBoxContainer/HBoxContainer/Parallelogram"]
layout_mode = 2
text = "Parallelogram"
horizontal_alignment = 1
vertical_alignment = 1

[node name="Rhombus" type="VBoxContainer" parent="Shapes/VBoxContainer/HBoxContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="Shapes/VBoxContainer/HBoxContainer/Rhombus"]
material = SubResource("ShaderMaterial_yyiql")
layout_mode = 2
size_flags_vertical = 3
texture = ExtResource("1_cgkaa")

[node name="Label" type="Label" parent="Shapes/VBoxContainer/HBoxContainer/Rhombus"]
layout_mode = 2
text = "Rhombus"
horizontal_alignment = 1
vertical_alignment = 1

[node name="PreciseBox" type="VBoxContainer" parent="Shapes/VBoxContainer/HBoxContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="Shapes/VBoxContainer/HBoxContainer/PreciseBox"]
material = SubResource("ShaderMaterial_lucsr")
layout_mode = 2
size_flags_vertical = 3
texture = ExtResource("1_cgkaa")

[node name="Label" type="Label" parent="Shapes/VBoxContainer/HBoxContainer/PreciseBox"]
layout_mode = 2
text = "Precise Box"
horizontal_alignment = 1
vertical_alignment = 1

[node name="RoundedBox" type="VBoxContainer" parent="Shapes/VBoxContainer/HBoxContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="Shapes/VBoxContainer/HBoxContainer/RoundedBox"]
material = SubResource("ShaderMaterial_pr0po")
layout_mode = 2
size_flags_vertical = 3
texture = ExtResource("1_cgkaa")

[node name="Label" type="Label" parent="Shapes/VBoxContainer/HBoxContainer/RoundedBox"]
layout_mode = 2
text = "Rounded Box"
horizontal_alignment = 1
vertical_alignment = 1

[node name="Trapezoid" type="VBoxContainer" parent="Shapes/VBoxContainer/HBoxContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="Shapes/VBoxContainer/HBoxContainer/Trapezoid"]
material = SubResource("ShaderMaterial_wr7cc")
layout_mode = 2
size_flags_vertical = 3
texture = ExtResource("1_cgkaa")

[node name="Label" type="Label" parent="Shapes/VBoxContainer/HBoxContainer/Trapezoid"]
layout_mode = 2
text = "Trapezoid"
horizontal_alignment = 1
vertical_alignment = 1

[node name="Triangle" type="VBoxContainer" parent="Shapes/VBoxContainer/HBoxContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="Shapes/VBoxContainer/HBoxContainer/Triangle"]
material = SubResource("ShaderMaterial_7wkl2")
layout_mode = 2
size_flags_vertical = 3
texture = ExtResource("1_cgkaa")

[node name="Label" type="Label" parent="Shapes/VBoxContainer/HBoxContainer/Triangle"]
layout_mode = 2
text = "Triangle"
horizontal_alignment = 1
vertical_alignment = 1

[node name="UV" type="Control" parent="."]
layout_mode = 1
anchors_preset = 0
offset_right = 40.0
offset_bottom = 40.0

[node name="VBoxContainer" type="VBoxContainer" parent="UV"]
layout_mode = 0
offset_right = 40.0
offset_bottom = 40.0

[node name="Label" type="Label" parent="UV/VBoxContainer"]
layout_mode = 2
theme_override_font_sizes/font_size = 40
text = "UV"

[node name="HBoxContainer" type="HBoxContainer" parent="UV/VBoxContainer"]
layout_mode = 2

[node name="UVTwirl" type="VBoxContainer" parent="UV/VBoxContainer/HBoxContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="UV/VBoxContainer/HBoxContainer/UVTwirl"]
material = SubResource("ShaderMaterial_nk7cv")
layout_mode = 2
texture = ExtResource("1_cgkaa")

[node name="Label" type="Label" parent="UV/VBoxContainer/HBoxContainer/UVTwirl"]
layout_mode = 2
text = "UV Twirl"
horizontal_alignment = 1

[node name="UVFlipbook" type="VBoxContainer" parent="UV/VBoxContainer/HBoxContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="UV/VBoxContainer/HBoxContainer/UVFlipbook"]
material = SubResource("ShaderMaterial_esshf")
layout_mode = 2
texture = ExtResource("1_cgkaa")

[node name="Label" type="Label" parent="UV/VBoxContainer/HBoxContainer/UVFlipbook"]
layout_mode = 2
text = "UV Flipbook Animation"
horizontal_alignment = 1
autowrap_mode = 2

[node name="UVTiler" type="VBoxContainer" parent="UV/VBoxContainer/HBoxContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="UV/VBoxContainer/HBoxContainer/UVTiler"]
material = SubResource("ShaderMaterial_v8ct1")
layout_mode = 2
texture = ExtResource("1_cgkaa")

[node name="Label" type="Label" parent="UV/VBoxContainer/HBoxContainer/UVTiler"]
layout_mode = 2
text = "UV Tiler"
horizontal_alignment = 1

[node name="Wave" type="Control" parent="."]
visible = false
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="VBoxContainer" type="VBoxContainer" parent="Wave"]
layout_mode = 0
offset_right = 40.0
offset_bottom = 40.0

[node name="Label" type="Label" parent="Wave/VBoxContainer"]
layout_mode = 2
theme_override_font_sizes/font_size = 40
text = "Wave"

[node name="HBoxContainer" type="HBoxContainer" parent="Wave/VBoxContainer"]
layout_mode = 2

[node name="TriangleWave" type="VBoxContainer" parent="Wave/VBoxContainer/HBoxContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="Wave/VBoxContainer/HBoxContainer/TriangleWave"]
material = SubResource("ShaderMaterial_o3d0f")
layout_mode = 2
texture = ExtResource("1_cgkaa")

[node name="Label" type="Label" parent="Wave/VBoxContainer/HBoxContainer/TriangleWave"]
layout_mode = 2
text = "Triangle Wave"
horizontal_alignment = 1
vertical_alignment = 1

[node name="SquareWave" type="VBoxContainer" parent="Wave/VBoxContainer/HBoxContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="Wave/VBoxContainer/HBoxContainer/SquareWave"]
material = SubResource("ShaderMaterial_t427w")
layout_mode = 2
texture = ExtResource("1_cgkaa")

[node name="Label" type="Label" parent="Wave/VBoxContainer/HBoxContainer/SquareWave"]
layout_mode = 2
text = "Square Wave"
horizontal_alignment = 1
vertical_alignment = 1

[node name="SawtoothWave" type="VBoxContainer" parent="Wave/VBoxContainer/HBoxContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="Wave/VBoxContainer/HBoxContainer/SawtoothWave"]
material = SubResource("ShaderMaterial_7g4dk")
layout_mode = 2
texture = ExtResource("1_cgkaa")

[node name="Label" type="Label" parent="Wave/VBoxContainer/HBoxContainer/SawtoothWave"]
layout_mode = 2
text = "Sawtooth Wave"
horizontal_alignment = 1
vertical_alignment = 1

[node name="SineWave" type="VBoxContainer" parent="Wave/VBoxContainer/HBoxContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="Wave/VBoxContainer/HBoxContainer/SineWave"]
material = SubResource("ShaderMaterial_20n14")
layout_mode = 2
texture = ExtResource("1_cgkaa")

[node name="Label" type="Label" parent="Wave/VBoxContainer/HBoxContainer/SineWave"]
layout_mode = 2
text = "Sine Wave"
horizontal_alignment = 1
vertical_alignment = 1

[node name="Camera2D" type="Camera2D" parent="."]
anchor_mode = 0
