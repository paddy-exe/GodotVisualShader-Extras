[gd_scene load_steps=189 format=2]

[ext_resource path="res://addons/VisualShaderExtras/Shapes/Rhombus.gd" type="Script" id=1]
[ext_resource path="res://addons/VisualShaderExtras/Shapes/RoundedBox.gd" type="Script" id=2]
[ext_resource path="res://addons/VisualShaderExtras/UV/UVFlipbook.gd" type="Script" id=3]
[ext_resource path="res://addons/VisualShaderExtras/Shapes/RotatedBox.gd" type="Script" id=4]
[ext_resource path="res://addons/VisualShaderExtras/Shapes/Triangle.gd" type="Script" id=5]
[ext_resource path="res://addons/VisualShaderExtras/Shapes/Trapezoid.gd" type="Script" id=6]
[ext_resource path="res://addons/VisualShaderExtras/Shapes/Parallelogram.gd" type="Script" id=7]
[ext_resource path="res://addons/VisualShaderExtras/AddonAssets/Kenney Future Narrow.ttf" type="DynamicFontData" id=8]
[ext_resource path="res://addons/VisualShaderExtras/AddonAssets/icon.png" type="Texture" id=9]
[ext_resource path="res://addons/VisualShaderExtras/BlendModes/LighterColor.gd" type="Script" id=10]
[ext_resource path="res://addons/VisualShaderExtras/BlendModes/LinearBurn.gd" type="Script" id=11]
[ext_resource path="res://addons/VisualShaderExtras/BlendModes/PinLight.gd" type="Script" id=12]
[ext_resource path="res://addons/VisualShaderExtras/BlendModes/VividLight.gd" type="Script" id=13]
[ext_resource path="res://addons/VisualShaderExtras/AddonAssets/DinoSprites - vita.png" type="Texture" id=14]
[ext_resource path="res://addons/VisualShaderExtras/Shapes/Circle.gd" type="Script" id=15]
[ext_resource path="res://addons/VisualShaderExtras/Shapes/Box.gd" type="Script" id=16]
[ext_resource path="res://addons/VisualShaderExtras/BlendModes/GammaIllumination.gd" type="Script" id=17]
[ext_resource path="res://addons/VisualShaderExtras/BlendModes/GammaLight.gd" type="Script" id=18]
[ext_resource path="res://addons/VisualShaderExtras/BlendModes/LinearLight.gd" type="Script" id=19]
[ext_resource path="res://addons/VisualShaderExtras/BlendModes/HardMix.gd" type="Script" id=20]
[ext_resource path="res://addons/VisualShaderExtras/BlendModes/GammaDark.gd" type="Script" id=21]
[ext_resource path="res://addons/VisualShaderExtras/BlendModes/Luminosity.gd" type="Script" id=22]
[ext_resource path="res://addons/VisualShaderExtras/BlendModes/DarkerColor.gd" type="Script" id=23]
[ext_resource path="res://addons/VisualShaderExtras/BlendModes/Exclusion.gd" type="Script" id=24]
[ext_resource path="res://addons/VisualShaderExtras/UV/UVPolarCoord.gd" type="Script" id=25]
[ext_resource path="res://addons/VisualShaderExtras/UV/UVTwirl.gd" type="Script" id=26]
[ext_resource path="res://addons/VisualShaderExtras/Wave/TriangleWave.gd" type="Script" id=27]
[ext_resource path="res://addons/VisualShaderExtras/Wave/SquareWave.gd" type="Script" id=28]
[ext_resource path="res://addons/VisualShaderExtras/Wave/SawtoothWave.gd" type="Script" id=29]
[ext_resource path="res://addons/VisualShaderExtras/Wave/SineWave.gd" type="Script" id=30]

[sub_resource type="DynamicFont" id=27]
size = 32
font_data = ExtResource( 8 )

[sub_resource type="DynamicFont" id=28]
size = 25
font_data = ExtResource( 8 )

[sub_resource type="VisualShaderNodeCustom" id=63]
initialized = true
script = ExtResource( 17 )

[sub_resource type="OpenSimplexNoise" id=64]

[sub_resource type="NoiseTexture" id=65]
seamless = true
noise = SubResource( 64 )

[sub_resource type="VisualShaderNodeTexture" id=66]
texture = SubResource( 65 )
texture_type = 1

[sub_resource type="VisualShaderNodeTexture" id=67]
texture = ExtResource( 9 )
texture_type = 1

[sub_resource type="VisualShader" id=68]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_3 : hint_albedo;
uniform sampler2D tex_frg_4 : hint_albedo;


// BlendGammaIllumination

		vec3 blend_gamma_illumination(vec3 __top_col, vec3 __bot_col)
		{
			return (1.0 - pow(__bot_col, (1.0 / __top_col)));
		}
	

void vertex() {
// Output:0

}

void fragment() {
// Texture:3
	vec4 tex_frg_3_read = texture(tex_frg_3, UV.xy);
	vec3 n_out3p0 = tex_frg_3_read.rgb;
	float n_out3p1 = tex_frg_3_read.a;

// Texture:4
	vec4 tex_frg_4_read = texture(tex_frg_4, UV.xy);
	vec3 n_out4p0 = tex_frg_4_read.rgb;
	float n_out4p1 = tex_frg_4_read.a;

// BlendGammaIllumination:2
	vec3 n_out2p0;
	{
		n_out2p0.rgb = blend_gamma_illumination(n_out3p0.rgb, n_out4p0.rgb);
	}

// Output:0
	COLOR.rgb = n_out2p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -263.315, 8.46887 )
mode = 1
flags/light_only = false
nodes/fragment/2/node = SubResource( 63 )
nodes/fragment/2/position = Vector2( 40, 200 )
nodes/fragment/3/node = SubResource( 66 )
nodes/fragment/3/position = Vector2( -220, 100 )
nodes/fragment/4/node = SubResource( 67 )
nodes/fragment/4/position = Vector2( -240, 320 )
nodes/fragment/connections = PoolIntArray( 3, 0, 2, 0, 4, 0, 2, 1, 2, 0, 0, 0 )

[sub_resource type="ShaderMaterial" id=69]
shader = SubResource( 68 )

[sub_resource type="DynamicFont" id=70]
font_data = ExtResource( 8 )

[sub_resource type="OpenSimplexNoise" id=71]

[sub_resource type="NoiseTexture" id=72]
seamless = true
noise = SubResource( 71 )

[sub_resource type="VisualShaderNodeTexture" id=73]
texture = SubResource( 72 )
texture_type = 1

[sub_resource type="VisualShaderNodeTexture" id=74]
texture = ExtResource( 9 )
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id=75]
initialized = true
script = ExtResource( 18 )

[sub_resource type="VisualShader" id=76]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_2 : hint_albedo;
uniform sampler2D tex_frg_3 : hint_albedo;


// BlendGammaLight

		vec3 blend_gamma_light(vec3 __top_col, vec3 __bot_col)
		{
			return pow(__bot_col, __top_col);
		}
	

void vertex() {
// Output:0

}

void fragment() {
// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, UV.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// Texture:3
	vec4 tex_frg_3_read = texture(tex_frg_3, UV.xy);
	vec3 n_out3p0 = tex_frg_3_read.rgb;
	float n_out3p1 = tex_frg_3_read.a;

// BlendGammaLight:4
	vec3 n_out4p0;
	{
		n_out4p0.rgb = blend_gamma_light(n_out2p0.rgb, n_out3p0.rgb);
	}

// Output:0
	COLOR.rgb = n_out4p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -263.315, 8.46887 )
mode = 1
flags/light_only = false
nodes/fragment/2/node = SubResource( 73 )
nodes/fragment/2/position = Vector2( -120, 80 )
nodes/fragment/3/node = SubResource( 74 )
nodes/fragment/3/position = Vector2( -120, 300 )
nodes/fragment/4/node = SubResource( 75 )
nodes/fragment/4/position = Vector2( 125.685, 180.469 )
nodes/fragment/connections = PoolIntArray( 2, 0, 4, 0, 3, 0, 4, 1, 4, 0, 0, 0 )

[sub_resource type="ShaderMaterial" id=77]
shader = SubResource( 76 )

[sub_resource type="DynamicFont" id=78]
font_data = ExtResource( 8 )

[sub_resource type="VisualShaderNodeCustom" id=102]
initialized = true
script = ExtResource( 10 )

[sub_resource type="OpenSimplexNoise" id=103]

[sub_resource type="NoiseTexture" id=104]
seamless = true
noise = SubResource( 103 )

[sub_resource type="VisualShaderNodeTexture" id=105]
texture = SubResource( 104 )
texture_type = 1

[sub_resource type="VisualShaderNodeTexture" id=106]
texture = ExtResource( 9 )
texture_type = 1

[sub_resource type="VisualShader" id=107]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_3 : hint_albedo;
uniform sampler2D tex_frg_4 : hint_albedo;


// BlendLighterColor

		vec3 lighterColor( vec3 s, vec3 d )
		{
			return (s.x + s.y + s.z > d.x + d.y + d.z) ? s : d;
		}
	

void vertex() {
// Output:0

}

void fragment() {
// Texture:3
	vec4 tex_frg_3_read = texture(tex_frg_3, UV.xy);
	vec3 n_out3p0 = tex_frg_3_read.rgb;
	float n_out3p1 = tex_frg_3_read.a;

// Texture:4
	vec4 tex_frg_4_read = texture(tex_frg_4, UV.xy);
	vec3 n_out4p0 = tex_frg_4_read.rgb;
	float n_out4p1 = tex_frg_4_read.a;

// BlendLighterColor:2
	vec3 n_out2p0;
	{
		n_out2p0.rgb = lighterColor(n_out3p0.rgb, n_out4p0.rgb);
	}

// Output:0
	COLOR.rgb = n_out2p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -462.315, 50.4689 )
mode = 1
flags/light_only = false
nodes/fragment/2/node = SubResource( 102 )
nodes/fragment/2/position = Vector2( 105.685, 156.469 )
nodes/fragment/3/node = SubResource( 105 )
nodes/fragment/3/position = Vector2( -160, 20 )
nodes/fragment/4/node = SubResource( 106 )
nodes/fragment/4/position = Vector2( -160, 240 )
nodes/fragment/connections = PoolIntArray( 4, 0, 2, 1, 3, 0, 2, 0, 2, 0, 0, 0 )

[sub_resource type="ShaderMaterial" id=108]
shader = SubResource( 107 )

[sub_resource type="DynamicFont" id=86]
font_data = ExtResource( 8 )

[sub_resource type="VisualShaderNodeCustom" id=79]
initialized = true
script = ExtResource( 19 )

[sub_resource type="OpenSimplexNoise" id=80]

[sub_resource type="NoiseTexture" id=81]
seamless = true
noise = SubResource( 80 )

[sub_resource type="VisualShaderNodeTexture" id=82]
texture = SubResource( 81 )
texture_type = 1

[sub_resource type="VisualShaderNodeTexture" id=83]
texture = ExtResource( 9 )
texture_type = 1

[sub_resource type="VisualShader" id=84]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_3 : hint_albedo;
uniform sampler2D tex_frg_4 : hint_albedo;


// BlendLinearLight

		vec3 blend_linear_light(vec3 __top_col, vec3 __bot_col)
		{
			return (__bot_col + 2.0 * __top_col) - 1.0;
		}
	

void vertex() {
// Output:0

}

void fragment() {
// Texture:3
	vec4 tex_frg_3_read = texture(tex_frg_3, UV.xy);
	vec3 n_out3p0 = tex_frg_3_read.rgb;
	float n_out3p1 = tex_frg_3_read.a;

// Texture:4
	vec4 tex_frg_4_read = texture(tex_frg_4, UV.xy);
	vec3 n_out4p0 = tex_frg_4_read.rgb;
	float n_out4p1 = tex_frg_4_read.a;

// BlendLinearLight:2
	vec3 n_out2p0;
	{
		n_out2p0.rgb = blend_linear_light(n_out3p0.rgb, n_out4p0.rgb);
	}

// Output:0
	COLOR.rgb = n_out2p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -346.315, -30.5311 )
mode = 1
flags/light_only = false
nodes/fragment/2/node = SubResource( 79 )
nodes/fragment/2/position = Vector2( 100, 160 )
nodes/fragment/3/node = SubResource( 82 )
nodes/fragment/3/position = Vector2( -241.315, 27.4689 )
nodes/fragment/4/node = SubResource( 83 )
nodes/fragment/4/position = Vector2( -240, 260 )
nodes/fragment/connections = PoolIntArray( 4, 0, 2, 1, 3, 0, 2, 0, 2, 0, 0, 0 )

[sub_resource type="ShaderMaterial" id=85]
shader = SubResource( 84 )

[sub_resource type="OpenSimplexNoise" id=116]

[sub_resource type="NoiseTexture" id=117]
seamless = true
noise = SubResource( 116 )

[sub_resource type="VisualShaderNodeTexture" id=118]
texture = SubResource( 117 )
texture_type = 1

[sub_resource type="VisualShaderNodeTexture" id=121]
texture = ExtResource( 9 )
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id=122]
initialized = true
script = ExtResource( 22 )

[sub_resource type="VisualShader" id=119]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_2 : hint_albedo;
uniform sampler2D tex_frg_3 : hint_albedo;


// BlendLuminosity

		vec3 luminosity( vec3 s, vec3 d )
		{
			float dLum = dot(d, vec3(0.3, 0.59, 0.11));
			float sLum = dot(s, vec3(0.3, 0.59, 0.11));
			float lum = sLum - dLum;
			vec3 c = d + lum;
			float minC = min(min(c.x, c.y), c.z);
			float maxC = max(max(c.x, c.y), c.z);
			if(minC < 0.0) return sLum + ((c - sLum) * sLum) / (sLum - minC);
			else if(maxC > 1.0) return sLum + ((c - sLum) * (1.0 - sLum)) / (maxC - sLum);
			else return c;
		}
	

void vertex() {
// Output:0

}

void fragment() {
// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, UV.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// Texture:3
	vec4 tex_frg_3_read = texture(tex_frg_3, UV.xy);
	vec3 n_out3p0 = tex_frg_3_read.rgb;
	float n_out3p1 = tex_frg_3_read.a;

// BlendLuminosity:4
	vec3 n_out4p0;
	{
		n_out4p0.rgb = luminosity(n_out2p0.rgb, n_out3p0.rgb);
	}

// Output:0
	COLOR.rgb = n_out4p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -413.315, 95.4689 )
mode = 1
flags/light_only = false
nodes/fragment/2/node = SubResource( 118 )
nodes/fragment/2/position = Vector2( -80, 40 )
nodes/fragment/3/node = SubResource( 121 )
nodes/fragment/3/position = Vector2( -80, 260 )
nodes/fragment/4/node = SubResource( 122 )
nodes/fragment/4/position = Vector2( 158.685, 170.469 )
nodes/fragment/connections = PoolIntArray( 2, 0, 4, 0, 3, 0, 4, 1, 4, 0, 0, 0 )

[sub_resource type="ShaderMaterial" id=120]
shader = SubResource( 119 )

[sub_resource type="VisualShaderNodeCustom" id=126]
initialized = true
script = ExtResource( 12 )

[sub_resource type="OpenSimplexNoise" id=127]

[sub_resource type="NoiseTexture" id=128]
seamless = true
noise = SubResource( 127 )

[sub_resource type="VisualShaderNodeTexture" id=129]
texture = SubResource( 128 )
texture_type = 1

[sub_resource type="VisualShaderNodeTexture" id=130]
texture = ExtResource( 9 )
texture_type = 1

[sub_resource type="VisualShader" id=131]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_3 : hint_albedo;
uniform sampler2D tex_frg_4 : hint_albedo;


// BlendPinLight

		float pinLight( float s, float d )
		{
			return (2.0 * s - 1.0 > d) ? 2.0 * s - 1.0 : ((s < 0.5 * d) ? 2.0 * s : d);
		}

		vec3 blend_pin_light( vec3 s, vec3 d )
		{
			vec3 c;
			c.x = pinLight(s.x,d.x);
			c.y = pinLight(s.y,d.y);
			c.z = pinLight(s.z,d.z);
			return c;
		}
	

void vertex() {
// Output:0

}

void fragment() {
// Texture:3
	vec4 tex_frg_3_read = texture(tex_frg_3, UV.xy);
	vec3 n_out3p0 = tex_frg_3_read.rgb;
	float n_out3p1 = tex_frg_3_read.a;

// Texture:4
	vec4 tex_frg_4_read = texture(tex_frg_4, UV.xy);
	vec3 n_out4p0 = tex_frg_4_read.rgb;
	float n_out4p1 = tex_frg_4_read.a;

// BlendPinLight:2
	vec3 n_out2p0;
	{
		n_out2p0.rgb = blend_pin_light(n_out3p0.rgb, n_out4p0.rgb);
	}

// Output:0
	COLOR.rgb = n_out2p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -418.266, 13.4944 )
mode = 1
flags/light_only = false
nodes/fragment/2/node = SubResource( 126 )
nodes/fragment/2/position = Vector2( 120, 180 )
nodes/fragment/3/node = SubResource( 129 )
nodes/fragment/3/position = Vector2( -200, 40 )
nodes/fragment/4/node = SubResource( 130 )
nodes/fragment/4/position = Vector2( -200, 260 )
nodes/fragment/connections = PoolIntArray( 3, 0, 2, 0, 4, 0, 2, 1, 2, 0, 0, 0 )

[sub_resource type="ShaderMaterial" id=125]
shader = SubResource( 131 )

[sub_resource type="OpenSimplexNoise" id=132]

[sub_resource type="NoiseTexture" id=133]
seamless = true
noise = SubResource( 132 )

[sub_resource type="VisualShaderNodeTexture" id=134]
texture = SubResource( 133 )
texture_type = 1

[sub_resource type="VisualShaderNodeTexture" id=135]
texture = ExtResource( 9 )
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id=138]
initialized = true
script = ExtResource( 13 )

[sub_resource type="VisualShader" id=136]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_2 : hint_albedo;
uniform sampler2D tex_frg_3 : hint_albedo;


// BlendVividLight

		vec3 blend_color_dodge(vec3 __top_col, vec3 __bot_col)
		{
			return __bot_col / (1.0 - __top_col);
		}
		
		vec3 blend_color_burn(vec3 __top_col, vec3 __bot_col)
		{
			return 1.0 - ((1.0 - __bot_col) / __top_col);
		}
		
		float blend_rgb_to_v(vec3 __col) {
			return max(max(__col.r / 255.0, __col.g / 255.0), __col.b / 255.0);
		}
		
		vec3 blend_vivid_light(vec3 __top_col, vec3 __bot_col) {
			if (blend_rgb_to_v(__top_col) > 0.5) {
				return blend_color_dodge(__top_col, __bot_col);
			} else {
				return blend_color_burn(__top_col, __bot_col);
			}
		}
	

void vertex() {
// Output:0

}

void fragment() {
// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, UV.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// Texture:3
	vec4 tex_frg_3_read = texture(tex_frg_3, UV.xy);
	vec3 n_out3p0 = tex_frg_3_read.rgb;
	float n_out3p1 = tex_frg_3_read.a;

// BlendVividLight:4
	vec3 n_out4p0;
	{
		n_out4p0.rgb = blend_vivid_light(n_out2p0.rgb, n_out3p0.rgb);
	}

// Output:0
	COLOR.rgb = n_out4p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -418.266, 13.4944 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 520, 140 )
nodes/fragment/2/node = SubResource( 134 )
nodes/fragment/2/position = Vector2( 0, 20 )
nodes/fragment/3/node = SubResource( 135 )
nodes/fragment/3/position = Vector2( 0, 240 )
nodes/fragment/4/node = SubResource( 138 )
nodes/fragment/4/position = Vector2( 252.734, 164.494 )
nodes/fragment/connections = PoolIntArray( 2, 0, 4, 0, 3, 0, 4, 1, 4, 0, 0, 0 )

[sub_resource type="ShaderMaterial" id=137]
shader = SubResource( 136 )

[sub_resource type="DynamicFont" id=29]
size = 25
font_data = ExtResource( 8 )

[sub_resource type="OpenSimplexNoise" id=96]

[sub_resource type="NoiseTexture" id=97]
seamless = true
noise = SubResource( 96 )

[sub_resource type="VisualShaderNodeTexture" id=98]
texture = SubResource( 97 )
texture_type = 1

[sub_resource type="VisualShaderNodeTexture" id=99]
texture = ExtResource( 9 )

[sub_resource type="VisualShaderNodeCustom" id=139]
initialized = true
script = ExtResource( 23 )

[sub_resource type="VisualShader" id=140]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_3 : hint_albedo;
uniform sampler2D tex_frg_4;


// BlendDarkerColor

		vec3 darkerColor( vec3 s, vec3 d )
		{
			return (s.x + s.y + s.z < d.x + d.y + d.z) ? s : d;
		}
	

void vertex() {
// Output:0

}

void fragment() {
// Texture:3
	vec4 tex_frg_3_read = texture(tex_frg_3, UV.xy);
	vec3 n_out3p0 = tex_frg_3_read.rgb;
	float n_out3p1 = tex_frg_3_read.a;

// Texture:4
	vec4 tex_frg_4_read = texture(tex_frg_4, UV.xy);
	vec3 n_out4p0 = tex_frg_4_read.rgb;
	float n_out4p1 = tex_frg_4_read.a;

// BlendDarkerColor:5
	vec3 n_out5p0;
	{
		n_out5p0.rgb = darkerColor(n_out3p0.rgb, n_out4p0.rgb);
	}

// Output:0
	COLOR.rgb = n_out5p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -387.266, -0.505585 )
mode = 1
flags/light_only = false
nodes/fragment/3/node = SubResource( 98 )
nodes/fragment/3/position = Vector2( -160, 20 )
nodes/fragment/4/node = SubResource( 99 )
nodes/fragment/4/position = Vector2( -160, 240 )
nodes/fragment/5/node = SubResource( 139 )
nodes/fragment/5/position = Vector2( 105.734, 140.494 )
nodes/fragment/connections = PoolIntArray( 3, 0, 5, 0, 4, 0, 5, 1, 5, 0, 0, 0 )

[sub_resource type="ShaderMaterial" id=141]
shader = SubResource( 140 )

[sub_resource type="DynamicFont" id=94]
font_data = ExtResource( 8 )

[sub_resource type="VisualShaderNodeCustom" id=145]
initialized = true
script = ExtResource( 24 )

[sub_resource type="VisualShader" id=142]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_3 : hint_albedo;
uniform sampler2D tex_frg_4;


// BlendExclusion

		vec3 exclusion( vec3 s, vec3 d )
		{
			return s + d - 2.0 * s * d;
		}
	

void vertex() {
// Output:0

}

void fragment() {
// Texture:3
	vec4 tex_frg_3_read = texture(tex_frg_3, UV.xy);
	vec3 n_out3p0 = tex_frg_3_read.rgb;
	float n_out3p1 = tex_frg_3_read.a;

// Texture:4
	vec4 tex_frg_4_read = texture(tex_frg_4, UV.xy);
	vec3 n_out4p0 = tex_frg_4_read.rgb;
	float n_out4p1 = tex_frg_4_read.a;

// BlendExclusion:5
	vec3 n_out5p0;
	{
		n_out5p0.rgb = exclusion(n_out3p0.rgb, n_out4p0.rgb);
	}

// Output:0
	COLOR.rgb = n_out5p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -387.266, -0.505585 )
mode = 1
flags/light_only = false
nodes/fragment/3/node = SubResource( 98 )
nodes/fragment/3/position = Vector2( -160, 20 )
nodes/fragment/4/node = SubResource( 99 )
nodes/fragment/4/position = Vector2( -160, 240 )
nodes/fragment/5/node = SubResource( 145 )
nodes/fragment/5/position = Vector2( 109.734, 159.494 )
nodes/fragment/connections = PoolIntArray( 3, 0, 5, 0, 4, 0, 5, 1, 5, 0, 0, 0 )

[sub_resource type="ShaderMaterial" id=143]
shader = SubResource( 142 )

[sub_resource type="VisualShaderNodeCustom" id=95]
initialized = true
script = ExtResource( 21 )

[sub_resource type="VisualShader" id=144]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_3 : hint_albedo;
uniform sampler2D tex_frg_4;


// BlendGammaDark

		vec3 blend_gamma_dark(vec3 __top_col, vec3 __bot_col)
		{
			return pow(__bot_col, (1.0 / __top_col));
		}
	

void vertex() {
// Output:0

}

void fragment() {
// Texture:3
	vec4 tex_frg_3_read = texture(tex_frg_3, UV.xy);
	vec3 n_out3p0 = tex_frg_3_read.rgb;
	float n_out3p1 = tex_frg_3_read.a;

// Texture:4
	vec4 tex_frg_4_read = texture(tex_frg_4, UV.xy);
	vec3 n_out4p0 = tex_frg_4_read.rgb;
	float n_out4p1 = tex_frg_4_read.a;

// BlendGammaDark:2
	vec3 n_out2p0;
	{
		n_out2p0.rgb = blend_gamma_dark(n_out3p0.rgb, n_out4p0.rgb);
	}

// Output:0
	COLOR.rgb = n_out2p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -387.266, -0.505585 )
mode = 1
flags/light_only = false
nodes/fragment/2/node = SubResource( 95 )
nodes/fragment/2/position = Vector2( 140, 160 )
nodes/fragment/3/node = SubResource( 98 )
nodes/fragment/3/position = Vector2( -160, 20 )
nodes/fragment/4/node = SubResource( 99 )
nodes/fragment/4/position = Vector2( -160, 240 )
nodes/fragment/connections = PoolIntArray( 3, 0, 2, 0, 4, 0, 2, 1, 2, 0, 0, 0 )

[sub_resource type="ShaderMaterial" id=101]
shader = SubResource( 144 )

[sub_resource type="OpenSimplexNoise" id=87]

[sub_resource type="NoiseTexture" id=88]
seamless = true
noise = SubResource( 87 )

[sub_resource type="VisualShaderNodeTexture" id=89]
texture = SubResource( 88 )
texture_type = 1

[sub_resource type="VisualShaderNodeTexture" id=90]
texture = ExtResource( 9 )
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id=93]
initialized = true
script = ExtResource( 20 )

[sub_resource type="VisualShader" id=91]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_2 : hint_albedo;
uniform sampler2D tex_frg_3 : hint_albedo;


// BlendHardMix

		vec3 hardMix( vec3 s, vec3 d )
		{
			return floor(s + d);
		}
	

void vertex() {
// Output:0

}

void fragment() {
// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, UV.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// Texture:3
	vec4 tex_frg_3_read = texture(tex_frg_3, UV.xy);
	vec3 n_out3p0 = tex_frg_3_read.rgb;
	float n_out3p1 = tex_frg_3_read.a;

// BlendHardMix:4
	vec3 n_out4p0;
	{
		n_out4p0.rgb = hardMix(n_out2p0.rgb, n_out3p0.rgb);
	}

// Output:0
	COLOR.rgb = n_out4p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -320.315, 60.4689 )
mode = 1
flags/light_only = false
nodes/fragment/2/node = SubResource( 89 )
nodes/fragment/2/position = Vector2( -80, 40 )
nodes/fragment/3/node = SubResource( 90 )
nodes/fragment/3/position = Vector2( -80, 280 )
nodes/fragment/4/node = SubResource( 93 )
nodes/fragment/4/position = Vector2( 160, 180 )
nodes/fragment/connections = PoolIntArray( 2, 0, 4, 0, 3, 0, 4, 1, 4, 0, 0, 0 )

[sub_resource type="ShaderMaterial" id=92]
shader = SubResource( 91 )

[sub_resource type="OpenSimplexNoise" id=109]

[sub_resource type="NoiseTexture" id=110]
seamless = true
noise = SubResource( 109 )

[sub_resource type="VisualShaderNodeTexture" id=111]
texture = SubResource( 110 )
texture_type = 1

[sub_resource type="VisualShaderNodeTexture" id=112]
texture = ExtResource( 9 )
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id=115]
initialized = true
script = ExtResource( 11 )

[sub_resource type="VisualShader" id=113]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_2 : hint_albedo;
uniform sampler2D tex_frg_3 : hint_albedo;


// BlendLinearBurn

		vec3 blend_linear_burn(vec3 __top_col, vec3 __bot_col)
		{
			return 1.0- ((1.0 - __top_col) + (1.0 - __bot_col));
		}
	

void vertex() {
// Output:0

}

void fragment() {
// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, UV.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// Texture:3
	vec4 tex_frg_3_read = texture(tex_frg_3, UV.xy);
	vec3 n_out3p0 = tex_frg_3_read.rgb;
	float n_out3p1 = tex_frg_3_read.a;

// BlendLinearBurn:4
	vec3 n_out4p0;
	{
		n_out4p0.rgb = blend_linear_burn(n_out2p0.rgb, n_out3p0.rgb);
	}

// Output:0
	COLOR.rgb = n_out4p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -396.315, 7.46887 )
mode = 1
flags/light_only = false
nodes/fragment/2/node = SubResource( 111 )
nodes/fragment/2/position = Vector2( -60, 40 )
nodes/fragment/3/node = SubResource( 112 )
nodes/fragment/3/position = Vector2( -60, 260 )
nodes/fragment/4/node = SubResource( 115 )
nodes/fragment/4/position = Vector2( 162.685, 151.469 )
nodes/fragment/connections = PoolIntArray( 2, 0, 4, 0, 3, 0, 4, 1, 4, 0, 0, 0 )

[sub_resource type="ShaderMaterial" id=114]
shader = SubResource( 113 )

[sub_resource type="DynamicFont" id=30]
size = 32
font_data = ExtResource( 8 )

[sub_resource type="VisualShaderNodeVectorScalarMix" id=38]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0, 0, 0 ), 2, 0.5 ]

[sub_resource type="VisualShaderNodeScalarOp" id=39]
operator = 9

[sub_resource type="VisualShaderNodeColorUniform" id=40]
uniform_name = "color"
default_value_enabled = true

[sub_resource type="VisualShaderNodeCustom" id=54]
default_input_values = [ 1, Vector3( 0.5, 0.5, 0 ), 2, 0.25 ]
initialized = true
script = ExtResource( 15 )

[sub_resource type="VisualShader" id=55]
code = "shader_type canvas_item;
uniform vec4 color : hint_color = vec4(1.000000, 1.000000, 1.000000, 1.000000);


// Circle

		float sdCircle(vec2 pos, float r) {
			return length(pos) - r;
		}
	

void vertex() {
// Output:0

}

void fragment() {
// ColorUniform:5
	vec3 n_out5p0 = color.rgb;
	float n_out5p1 = color.a;

// Circle:6
	vec3 n_in6p1 = vec3(0.50000, 0.50000, 0.00000);
	float n_in6p2 = 0.25000;
	float n_out6p0;
	{
		n_out6p0 = sdCircle(UV.xy - n_in6p1.xy, n_in6p2);
	}

// ScalarOp:4
	float n_in4p1 = 0.00000;
	float n_out4p0 = step(n_out6p0, n_in4p1);

// VectorScalarMix:3
	vec3 n_in3p0 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out3p0 = mix(n_in3p0, n_out5p0, n_out4p0);

// Output:0
	COLOR.rgb = n_out3p0;
	COLOR.a = n_out4p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -354.315, -123.531 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 420, 80 )
nodes/fragment/3/node = SubResource( 38 )
nodes/fragment/3/position = Vector2( 120, 20 )
nodes/fragment/4/node = SubResource( 39 )
nodes/fragment/4/position = Vector2( -140, 120 )
nodes/fragment/5/node = SubResource( 40 )
nodes/fragment/5/position = Vector2( -260, -80 )
nodes/fragment/6/node = SubResource( 54 )
nodes/fragment/6/position = Vector2( -395.315, 112.469 )
nodes/fragment/connections = PoolIntArray( 4, 0, 3, 2, 3, 0, 0, 0, 5, 0, 3, 1, 4, 0, 0, 1, 6, 0, 4, 0 )

[sub_resource type="ShaderMaterial" id=56]
shader = SubResource( 55 )
shader_param/color = Color( 0.168627, 0.623529, 0.443137, 1 )

[sub_resource type="DynamicFont" id=31]
font_data = ExtResource( 8 )

[sub_resource type="VisualShaderNodeCustom" id=41]
default_input_values = [ 1, Vector3( 0.5, 0.5, 0 ), 2, Vector3( 0.25, 0.25, 0 ), 3, Vector3( 0.2, 0.2, 0.2 ), 4, 0.0 ]
initialized = true
script = ExtResource( 2 )

[sub_resource type="VisualShader" id=42]
code = "shader_type canvas_item;
uniform vec4 color : hint_color = vec4(1.000000, 1.000000, 1.000000, 1.000000);


// RoundedBox

		float sdRoundedBox( in vec2 __pos, in vec2 __proportions, in vec3 __radia, in float __4radia )
		{
			__radia.xy = (__pos.x > 0.0) ? __radia.xy : vec2(__4radia, __radia.z);
			__radia.x  = (__pos.y > 0.0) ? __radia.x  : __radia.y;
			vec2 __q = abs(__pos) - __proportions + __radia.x;
			return min(max(__q.x, __q.y), 0.0) + length(max(__q, 0.0)) - __radia.x;
		}
	

void vertex() {
// Output:0

}

void fragment() {
// ColorUniform:5
	vec3 n_out5p0 = color.rgb;
	float n_out5p1 = color.a;

// RoundedBox:6
	vec3 n_in6p1 = vec3(0.50000, 0.50000, 0.00000);
	vec3 n_in6p2 = vec3(0.25000, 0.25000, 0.00000);
	vec3 n_in6p3 = vec3(0.20000, 0.20000, 0.20000);
	float n_in6p4 = 0.00000;
	float n_out6p0;
	{
		n_out6p0 = sdRoundedBox(UV.xy - n_in6p1.xy, n_in6p2.xy, n_in6p3.xyz, n_in6p4);
	}

// ScalarOp:4
	float n_in4p1 = 0.00000;
	float n_out4p0 = step(n_out6p0, n_in4p1);

// VectorScalarMix:3
	vec3 n_in3p0 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out3p0 = mix(n_in3p0, n_out5p0, n_out4p0);

// Output:0
	COLOR.rgb = n_out3p0;
	COLOR.a = n_out4p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -584.315, -104.531 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 420, 80 )
nodes/fragment/3/node = SubResource( 38 )
nodes/fragment/3/position = Vector2( 120, 20 )
nodes/fragment/4/node = SubResource( 39 )
nodes/fragment/4/position = Vector2( -140, 120 )
nodes/fragment/5/node = SubResource( 40 )
nodes/fragment/5/position = Vector2( -260, -80 )
nodes/fragment/6/node = SubResource( 41 )
nodes/fragment/6/position = Vector2( -480, 80 )
nodes/fragment/connections = PoolIntArray( 4, 0, 3, 2, 3, 0, 0, 0, 5, 0, 3, 1, 4, 0, 0, 1, 6, 0, 4, 0 )

[sub_resource type="ShaderMaterial" id=17]
shader = SubResource( 42 )
shader_param/color = Color( 0.168627, 0.623529, 0.442279, 1 )

[sub_resource type="DynamicFont" id=32]
font_data = ExtResource( 8 )

[sub_resource type="VisualShaderNodeCustom" id=43]
default_input_values = [ 1, Vector3( 0.5, 0.5, 0 ), 2, Vector3( 0.25, 0.25, 0 ) ]
initialized = true
script = ExtResource( 16 )

[sub_resource type="VisualShaderNodeVectorScalarMix" id=44]

[sub_resource type="VisualShaderNodeScalarOp" id=45]
operator = 9

[sub_resource type="VisualShaderNodeColorUniform" id=46]
uniform_name = "color"
default_value_enabled = true

[sub_resource type="VisualShader" id=47]
code = "shader_type canvas_item;
uniform vec4 color : hint_color = vec4(1.000000, 1.000000, 1.000000, 1.000000);


// Box

		float sdBox( in vec2 __position, in vec2 __proportions )
		{
			vec2 __d = abs(__position) - __proportions;
			return length(max(__d, 0.0)) + min(max(__d.x, __d.y), 0.0);
		}
	

void vertex() {
// Output:0

}

void fragment() {
// ColorUniform:5
	vec3 n_out5p0 = color.rgb;
	float n_out5p1 = color.a;

// Box:2
	vec3 n_in2p1 = vec3(0.50000, 0.50000, 0.00000);
	vec3 n_in2p2 = vec3(0.25000, 0.25000, 0.00000);
	float n_out2p0;
	{
		n_out2p0 = sdBox(UV.xy - n_in2p1.xy, n_in2p2.xy);
	}

// ScalarOp:4
	float n_in4p1 = 0.00000;
	float n_out4p0 = step(n_out2p0, n_in4p1);

// VectorScalarMix:3
	vec3 n_in3p0 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out3p0 = mix(n_in3p0, n_out5p0, n_out4p0);

// Output:0
	COLOR.rgb = n_out3p0;
	COLOR.a = n_out4p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -534.315, -120.531 )
mode = 1
flags/light_only = false
nodes/fragment/2/node = SubResource( 43 )
nodes/fragment/2/position = Vector2( -440, 100 )
nodes/fragment/3/node = SubResource( 44 )
nodes/fragment/3/position = Vector2( 120, 80 )
nodes/fragment/4/node = SubResource( 45 )
nodes/fragment/4/position = Vector2( -120, 140 )
nodes/fragment/5/node = SubResource( 46 )
nodes/fragment/5/position = Vector2( -280, -80 )
nodes/fragment/connections = PoolIntArray( 2, 0, 4, 0, 4, 0, 3, 2, 5, 0, 3, 1, 3, 0, 0, 0, 4, 0, 0, 1 )

[sub_resource type="ShaderMaterial" id=48]
shader = SubResource( 47 )
shader_param/color = Color( 0.168627, 0.623529, 0.443137, 1 )

[sub_resource type="DynamicFont" id=33]
font_data = ExtResource( 8 )

[sub_resource type="VisualShaderNodeCustom" id=49]
default_input_values = [ 1, Vector3( 0.5, 0.5, 0 ), 2, Vector3( -0.25, -0.25, 0 ), 3, Vector3( 0.25, 0.25, 0 ), 4, 0.2 ]
initialized = true
script = ExtResource( 4 )

[sub_resource type="VisualShader" id=50]
code = "shader_type canvas_item;
uniform vec4 color : hint_color = vec4(1.000000, 1.000000, 1.000000, 1.000000);


// RotatedBox

		float sdRotatedBox( in vec2 p, in vec2 a, in vec2 b, float th )
		{
			float l = length(b-a);
			vec2  d = (b-a)/l;
			vec2  q = (p-(a+b)*0.5);
				  q = mat2(vec2(d.x,-d.y), vec2(d.y,d.x))*q;
				  q = abs(q)-vec2(l,th)*0.5;
			return length(max(q,0.0)) + min(max(q.x,q.y),0.0);    
		}
	

void vertex() {
// Output:0

}

void fragment() {
// ColorUniform:5
	vec3 n_out5p0 = color.rgb;
	float n_out5p1 = color.a;

// RotatedBox:6
	vec3 n_in6p1 = vec3(0.50000, 0.50000, 0.00000);
	vec3 n_in6p2 = vec3(-0.25000, -0.25000, 0.00000);
	vec3 n_in6p3 = vec3(0.25000, 0.25000, 0.00000);
	float n_in6p4 = 0.20000;
	float n_out6p0;
	{
		n_out6p0 = sdRotatedBox(UV.xy - n_in6p1.xy, n_in6p2.xy, n_in6p3.xy, n_in6p4);
	}

// ScalarOp:4
	float n_in4p1 = 0.00000;
	float n_out4p0 = step(n_out6p0, n_in4p1);

// VectorScalarMix:3
	vec3 n_in3p0 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out3p0 = mix(n_in3p0, n_out5p0, n_out4p0);

// Output:0
	COLOR.rgb = n_out3p0;
	COLOR.a = n_out4p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -309.315, -144.531 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 420, 80 )
nodes/fragment/3/node = SubResource( 38 )
nodes/fragment/3/position = Vector2( 120, 20 )
nodes/fragment/4/node = SubResource( 39 )
nodes/fragment/4/position = Vector2( -140, 120 )
nodes/fragment/5/node = SubResource( 40 )
nodes/fragment/5/position = Vector2( -260, -80 )
nodes/fragment/6/node = SubResource( 49 )
nodes/fragment/6/position = Vector2( -420, 100 )
nodes/fragment/connections = PoolIntArray( 4, 0, 3, 2, 3, 0, 0, 0, 5, 0, 3, 1, 4, 0, 0, 1, 6, 0, 4, 0 )

[sub_resource type="ShaderMaterial" id=51]
shader = SubResource( 50 )
shader_param/color = Color( 0.168627, 0.623529, 0.443137, 1 )

[sub_resource type="DynamicFont" id=34]
font_data = ExtResource( 8 )

[sub_resource type="VisualShaderNodeCustom" id=20]
output_port_for_preview = 0
default_input_values = [ 1, Vector3( 0.5, 0.5, 0 ), 2, Vector3( 0.25, 0.25, 0 ) ]
initialized = true
script = ExtResource( 1 )

[sub_resource type="VisualShaderNodeVectorInterp" id=21]
output_port_for_preview = 0
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0, 0, 0 ), 2, Vector3( 0.5, 0.5, 0.5 ) ]

[sub_resource type="VisualShaderNodeColorUniform" id=22]
uniform_name = "ColorUniform"
default_value_enabled = true

[sub_resource type="VisualShaderNodeScalarOp" id=23]
output_port_for_preview = 0
operator = 9

[sub_resource type="VisualShaderNodeScalarFunc" id=24]
function = 31

[sub_resource type="VisualShader" id=25]
code = "shader_type canvas_item;
uniform vec4 ColorUniform : hint_color = vec4(1.000000, 1.000000, 1.000000, 1.000000);


// Rhombus

		float ndot(vec2 a, vec2 b ) { return a.x*b.x - a.y*b.y; }
		float sdRhombus( in vec2 p, in vec2 b ) 
		{
			p = abs(p);
			float h = clamp( ndot(b-2.0*p,b)/dot(b,b), -1.0, 1.0 );
			float d = length( p-0.5*b*vec2(1.0-h,1.0+h) );
			return d * sign( p.x*b.y + p.y*b.x - b.x*b.y );
		}
	

void vertex() {
// Output:0

}

void fragment() {
// ColorUniform:5
	vec3 n_out5p0 = ColorUniform.rgb;
	float n_out5p1 = ColorUniform.a;

// Rhombus:2
	vec3 n_in2p1 = vec3(0.50000, 0.50000, 0.00000);
	vec3 n_in2p2 = vec3(0.25000, 0.25000, 0.00000);
	float n_out2p0;
	{
		n_out2p0 = sdRhombus(UV.xy - n_in2p1.xy, n_in2p2.xy);
	}

// ScalarOp:6
	float n_in6p0 = 0.00000;
	float n_out6p0 = step(n_in6p0, n_out2p0);

// VectorMix:4
	vec3 n_in4p1 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out4p0 = mix(n_out5p0, n_in4p1, vec3(n_out6p0));

// ScalarFunc:7
	float n_out7p0 = 1.0 - n_out6p0;

// Output:0
	COLOR.rgb = n_out4p0;
	COLOR.a = n_out7p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -426.417, 78.4167 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 440, 180 )
nodes/fragment/2/node = SubResource( 20 )
nodes/fragment/2/position = Vector2( -520, 320 )
nodes/fragment/4/node = SubResource( 21 )
nodes/fragment/4/position = Vector2( 180, 180 )
nodes/fragment/5/node = SubResource( 22 )
nodes/fragment/5/position = Vector2( -460, 120 )
nodes/fragment/6/node = SubResource( 23 )
nodes/fragment/6/position = Vector2( -60, 300 )
nodes/fragment/7/node = SubResource( 24 )
nodes/fragment/7/position = Vector2( 160, 440 )
nodes/fragment/connections = PoolIntArray( 5, 0, 4, 0, 2, 0, 6, 1, 6, 0, 4, 2, 4, 0, 0, 0, 6, 0, 7, 0, 7, 0, 0, 1 )

[sub_resource type="ShaderMaterial" id=26]
shader = SubResource( 25 )
shader_param/ColorUniform = Color( 0.168627, 0.623529, 0.443137, 1 )

[sub_resource type="DynamicFont" id=35]
font_data = ExtResource( 8 )

[sub_resource type="VisualShaderNodeCustom" id=52]
default_input_values = [ 1, Vector3( 0.5, 0.5, 0 ), 2, 0.15, 3, 0.35, 4, 0.25 ]
initialized = true
script = ExtResource( 6 )

[sub_resource type="VisualShader" id=37]
code = "shader_type canvas_item;
uniform vec4 color : hint_color = vec4(1.000000, 1.000000, 1.000000, 1.000000);


// Trapezoid

		float sdTrapezoid( in vec2 p, in float r1, float r2, float he )
		{
			vec2 k1 = vec2(r2,he);
			vec2 k2 = vec2(r2-r1,2.0*he);
			p.x = abs(p.x);
			vec2 ca = vec2(p.x-min(p.x,(p.y<0.0)?r1:r2), abs(p.y)-he);
			vec2 cb = p - k1 + k2*clamp( dot(k1-p,k2)/dot(k2, k2), 0.0, 1.0 );
			float s = (cb.x<0.0 && ca.y<0.0) ? -1.0 : 1.0;
			return s*sqrt( min(dot(ca, ca),dot(cb, cb)) );
		}
	

void vertex() {
// Output:0

}

void fragment() {
// ColorUniform:5
	vec3 n_out5p0 = color.rgb;
	float n_out5p1 = color.a;

// Trapezoid:6
	vec3 n_in6p1 = vec3(0.50000, 0.50000, 0.00000);
	float n_in6p2 = 0.15000;
	float n_in6p3 = 0.35000;
	float n_in6p4 = 0.25000;
	float n_out6p0;
	{
		n_out6p0 = sdTrapezoid(UV.xy - n_in6p1.xy, n_in6p2, n_in6p3, n_in6p4);
	}

// ScalarOp:4
	float n_in4p1 = 0.00000;
	float n_out4p0 = step(n_out6p0, n_in4p1);

// VectorScalarMix:3
	vec3 n_in3p0 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out3p0 = mix(n_in3p0, n_out5p0, n_out4p0);

// Output:0
	COLOR.rgb = n_out3p0;
	COLOR.a = n_out4p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -613.315, -131.531 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 420, 80 )
nodes/fragment/3/node = SubResource( 38 )
nodes/fragment/3/position = Vector2( 120, 20 )
nodes/fragment/4/node = SubResource( 39 )
nodes/fragment/4/position = Vector2( -140, 120 )
nodes/fragment/5/node = SubResource( 40 )
nodes/fragment/5/position = Vector2( -260, -80 )
nodes/fragment/6/node = SubResource( 52 )
nodes/fragment/6/position = Vector2( -434.315, 110.469 )
nodes/fragment/connections = PoolIntArray( 4, 0, 3, 2, 3, 0, 0, 0, 5, 0, 3, 1, 4, 0, 0, 1, 6, 0, 4, 0 )

[sub_resource type="ShaderMaterial" id=53]
shader = SubResource( 37 )
shader_param/color = Color( 0.168627, 0.623529, 0.443137, 1 )

[sub_resource type="VisualShaderNodeCustom" id=57]
default_input_values = [ 1, Vector3( 0.5, 0.5, 0 ), 2, 0.15, 3, 0.3, 4, 0.2 ]
initialized = true
script = ExtResource( 7 )

[sub_resource type="VisualShader" id=58]
code = "shader_type canvas_item;
uniform vec4 color : hint_color = vec4(1.000000, 1.000000, 1.000000, 1.000000);


// Parallelogram

		float sdParallelogram( in vec2 p, float wi, float he, float sk )
		{
			vec2 e = vec2(sk,he);
			p = (p.y<0.0)?-p:p;
			vec2  w = p - e; w.x -= clamp(w.x,-wi,wi);
			vec2  d = vec2(dot(w,w), -w.y);
			float s = p.x*e.y - p.y*e.x;
			p = (s<0.0)?-p:p;
			vec2  v = p - vec2(wi,0); v -= e*clamp(dot(v,e)/dot(e,e),-1.0,1.0);
			d = min( d, vec2(dot(v,v), wi*he-abs(s)));
			return sqrt(d.x)*sign(-d.y);
		}
	

void vertex() {
// Output:0

}

void fragment() {
// ColorUniform:5
	vec3 n_out5p0 = color.rgb;
	float n_out5p1 = color.a;

// Parallelogram:6
	vec3 n_in6p1 = vec3(0.50000, 0.50000, 0.00000);
	float n_in6p2 = 0.15000;
	float n_in6p3 = 0.30000;
	float n_in6p4 = 0.20000;
	float n_out6p0;
	{
		n_out6p0 = sdParallelogram(UV.xy - n_in6p1.xy, n_in6p2, n_in6p3, n_in6p4);
	}

// ScalarOp:4
	float n_in4p1 = 0.00000;
	float n_out4p0 = step(n_out6p0, n_in4p1);

// VectorScalarMix:3
	vec3 n_in3p0 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out3p0 = mix(n_in3p0, n_out5p0, n_out4p0);

// Output:0
	COLOR.rgb = n_out3p0;
	COLOR.a = n_out4p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -590.315, -58.5311 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 420, 80 )
nodes/fragment/3/node = SubResource( 38 )
nodes/fragment/3/position = Vector2( 120, 20 )
nodes/fragment/4/node = SubResource( 39 )
nodes/fragment/4/position = Vector2( -140, 120 )
nodes/fragment/5/node = SubResource( 40 )
nodes/fragment/5/position = Vector2( -260, -80 )
nodes/fragment/6/node = SubResource( 57 )
nodes/fragment/6/position = Vector2( -419.315, 130.469 )
nodes/fragment/connections = PoolIntArray( 4, 0, 3, 2, 3, 0, 0, 0, 5, 0, 3, 1, 4, 0, 0, 1, 6, 0, 4, 0 )

[sub_resource type="ShaderMaterial" id=59]
shader = SubResource( 58 )
shader_param/color = Color( 0.168627, 0.623529, 0.443137, 1 )

[sub_resource type="VisualShaderNodeCustom" id=60]
default_input_values = [ 1, Vector3( 0.5, 0.25, 0 ), 2, Vector3( 0.25, 0.5, 0 ) ]
initialized = true
script = ExtResource( 5 )

[sub_resource type="VisualShader" id=61]
code = "shader_type canvas_item;
uniform vec4 color : hint_color = vec4(1.000000, 1.000000, 1.000000, 1.000000);


// Triangle

		float sdTriangleIsosceles( in vec2 p, in vec2 q )
		{
			p.x = abs(p.x);
			vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );
			vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );
			float s = -sign( q.y );
			vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),
						  vec2( dot(b,b), s*(p.y-q.y)  ));
			return -sqrt(d.x)*sign(d.y);
		}
	

void vertex() {
// Output:0

}

void fragment() {
// ColorUniform:5
	vec3 n_out5p0 = color.rgb;
	float n_out5p1 = color.a;

// Triangle:6
	vec3 n_in6p1 = vec3(0.50000, 0.25000, 0.00000);
	vec3 n_in6p2 = vec3(0.25000, 0.50000, 0.00000);
	float n_out6p0;
	{
		n_out6p0 = sdTriangleIsosceles(UV.xy - n_in6p1.xy, n_in6p2.xy);
	}

// ScalarOp:4
	float n_in4p1 = 0.00000;
	float n_out4p0 = step(n_out6p0, n_in4p1);

// VectorScalarMix:3
	vec3 n_in3p0 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out3p0 = mix(n_in3p0, n_out5p0, n_out4p0);

// Output:0
	COLOR.rgb = n_out3p0;
	COLOR.a = n_out4p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -590.315, -58.5311 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 420, 80 )
nodes/fragment/3/node = SubResource( 38 )
nodes/fragment/3/position = Vector2( 120, 20 )
nodes/fragment/4/node = SubResource( 39 )
nodes/fragment/4/position = Vector2( -140, 120 )
nodes/fragment/5/node = SubResource( 40 )
nodes/fragment/5/position = Vector2( -260, -80 )
nodes/fragment/6/node = SubResource( 60 )
nodes/fragment/6/position = Vector2( -440, 140 )
nodes/fragment/connections = PoolIntArray( 4, 0, 3, 2, 3, 0, 0, 0, 5, 0, 3, 1, 4, 0, 0, 1, 6, 0, 4, 0 )

[sub_resource type="ShaderMaterial" id=62]
shader = SubResource( 61 )
shader_param/color = Color( 0.168627, 0.623529, 0.443137, 1 )

[sub_resource type="VisualShaderNodeCustom" id=147]
default_input_values = [ 1, Vector3( 0.5, 0.5, 0 ), 2, 1, 3, 1 ]
initialized = true
script = ExtResource( 25 )

[sub_resource type="VisualShader" id=148]
code = "shader_type canvas_item;


// UVPolarCoord

			vec2 uv_polarcoord_canvas(vec2 __uv, vec2 __center, float __zoom, float __repeat)
			{
				vec2 __dir = __uv - __center;
				float __radius = length(__dir) * 2.0;
				float __angle = atan(__dir.y, __dir.x) * 1.0/(3.1415 * 2.0);
				return mod(vec2(__radius * __zoom, __angle * __repeat), 1.0);
			}
	

void vertex() {
// Output:0

}

void fragment() {
// UVPolarCoord:3
	vec3 n_in3p1 = vec3(0.50000, 0.50000, 0.00000);
	float n_in3p2 = 1.00000;
	float n_in3p3 = 1.00000;
	vec3 n_out3p0;
	{
		n_out3p0.xy = uv_polarcoord_canvas(UV.xy, n_in3p1.xy, n_in3p2, n_in3p3);
	}

// Output:0
	COLOR.rgb = n_out3p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -254.009, -64.4733 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 340, 40 )
nodes/fragment/3/node = SubResource( 147 )
nodes/fragment/3/position = Vector2( 40, 60 )
nodes/fragment/connections = PoolIntArray( 3, 0, 0, 0 )

[sub_resource type="ShaderMaterial" id=149]
shader = SubResource( 148 )

[sub_resource type="VisualShaderNodeCustom" id=150]
default_input_values = [ 1, Vector3( 0.5, 0.5, 0 ), 2, 10, 3, Vector3( 0, 0, 0 ) ]
initialized = true
script = ExtResource( 26 )

[sub_resource type="VisualShader" id=151]
code = "shader_type canvas_item;


// UVTwirl

		vec2 Twirl(vec2 __uv, vec2 __center, float __strength, vec2 __offset)
		{
			vec2 __delta = __uv - __center;
			float __angle = __strength * length(__delta);
			float __x = cos(__angle) * __delta.x - sin(__angle) * __delta.y;
			float __y = sin(__angle) * __delta.x + cos(__angle) * __delta.y;
			return vec2(__x + __center.x + __offset.x, __y + __center.y + __offset.y);
		}
	

void vertex() {
// Output:0

}

void fragment() {
// UVTwirl:2
	vec3 n_in2p1 = vec3(0.50000, 0.50000, 0.00000);
	float n_in2p2 = 10.00000;
	vec3 n_in2p3 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out2p0;
	{
		n_out2p0.xy = Twirl(UV.xy, n_in2p1.xy, n_in2p2, n_in2p3.xy);
	}

// Output:0
	COLOR.rgb = n_out2p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -254.009, -64.4733 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 340, 40 )
nodes/fragment/2/node = SubResource( 150 )
nodes/fragment/2/position = Vector2( 120, 40 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0 )

[sub_resource type="ShaderMaterial" id=152]
shader = SubResource( 151 )

[sub_resource type="VisualShaderNodeTexture" id=154]
texture = ExtResource( 14 )
texture_type = 1

[sub_resource type="VisualShaderNodeInput" id=157]
input_name = "uv"

[sub_resource type="VisualShaderNodeCustom" id=158]
default_input_values = [ 1, 24, 2, 1, 3, 0, 4, 14, 5, 0.3 ]
initialized = true
script = ExtResource( 3 )

[sub_resource type="VisualShader" id=155]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_3 : hint_albedo;


// UVFlipbook

		vec2 flipbook_anim(vec2 __uv, int __columns, int __rows, int __starting_frame, int __ending_frame, float __anim_speed) {
			__starting_frame += int(fract(TIME * __anim_speed) * float(__ending_frame));
			float frame = float(clamp(__starting_frame, 0, __ending_frame));
			vec2 offPerFrame = vec2((1.0 / float(__columns)), (1.0 / float(__rows)));
			
			vec2 sprite_size = vec2(__uv.x / float(__columns), __uv.y / float(__rows));
			vec2 current_sprite = vec2(0.0, 1.0 - offPerFrame.y);
			current_sprite.x += frame * offPerFrame.x;
			float rowIndex;
			float _mod = modf(frame/ float(__columns), rowIndex);
			current_sprite.y -= rowIndex * offPerFrame.y;
			current_sprite.x -= rowIndex * float(__columns) * offPerFrame.x;
			
			vec2 sprite_uv = (sprite_size + current_sprite);
			
			return sprite_uv;
		}
	

void vertex() {
// Output:0

}

void fragment() {
// Input:4
	vec3 n_out4p0 = vec3(UV, 0.0);

// UVFlipbook:5
	float n_in5p1 = 24.00000;
	float n_in5p2 = 1.00000;
	float n_in5p3 = 0.00000;
	float n_in5p4 = 14.00000;
	float n_in5p5 = 0.30000;
	vec3 n_out5p0;
	{
		n_out5p0.xy = flipbook_anim(n_out4p0.xy, int(n_in5p1), int(n_in5p2), int(n_in5p3), int(n_in5p4), n_in5p5 );
	}

// Texture:3
	vec4 tex_frg_3_read = texture(tex_frg_3, n_out5p0.xy);
	vec3 n_out3p0 = tex_frg_3_read.rgb;
	float n_out3p1 = tex_frg_3_read.a;

// Output:0
	COLOR.rgb = n_out3p0;
	COLOR.a = n_out3p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -355.59, -42.75 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 520, 40 )
nodes/fragment/3/node = SubResource( 154 )
nodes/fragment/3/position = Vector2( -20, 0 )
nodes/fragment/4/node = SubResource( 157 )
nodes/fragment/4/position = Vector2( -920, 60 )
nodes/fragment/5/node = SubResource( 158 )
nodes/fragment/5/position = Vector2( -560, 20 )
nodes/fragment/connections = PoolIntArray( 3, 0, 0, 0, 4, 0, 5, 0, 5, 0, 3, 0, 3, 1, 0, 1 )

[sub_resource type="ShaderMaterial" id=156]
shader = SubResource( 155 )

[sub_resource type="VisualShaderNodeInput" id=159]
input_name = "time"

[sub_resource type="VisualShaderNodeCustom" id=160]
default_input_values = [ 1, 2.0, 2, 1.0, 3, 0.0 ]
initialized = true
script = ExtResource( 27 )

[sub_resource type="VisualShaderNodeVectorOp" id=161]
operator = 2

[sub_resource type="VisualShaderNodeTexture" id=162]
texture = ExtResource( 9 )
texture_type = 1

[sub_resource type="VisualShader" id=163]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_5 : hint_albedo;


// TriangleWave

		float triangle_wave(float IN, float __amplitude, float __frequency, float __height) {
			return 1.0 - __amplitude * abs(round(IN / __frequency) - (IN / __frequency)) + __height;
		}
	

void vertex() {
// Output:0

}

void fragment() {
// Input:2
	float n_out2p0 = TIME;

// TriangleWave:3
	float n_in3p1 = 2.00000;
	float n_in3p2 = 1.00000;
	float n_in3p3 = 0.00000;
	float n_out3p0;
	{
		n_out3p0 = triangle_wave(n_out2p0, n_in3p1, n_in3p2, n_in3p3);
	}

// Texture:5
	vec4 tex_frg_5_read = texture(tex_frg_5, UV.xy);
	vec3 n_out5p0 = tex_frg_5_read.rgb;
	float n_out5p1 = tex_frg_5_read.a;

// VectorOp:4
	vec3 n_out4p0 = vec3(n_out3p0) * n_out5p0;

// Output:0
	COLOR.rgb = n_out4p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -296.325, 4.5 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 820, 140 )
nodes/fragment/2/node = SubResource( 159 )
nodes/fragment/2/position = Vector2( -540, 140 )
nodes/fragment/3/node = SubResource( 160 )
nodes/fragment/3/position = Vector2( -120, 120 )
nodes/fragment/4/node = SubResource( 161 )
nodes/fragment/4/position = Vector2( 322.82, 228.5 )
nodes/fragment/5/node = SubResource( 162 )
nodes/fragment/5/position = Vector2( -180, 440 )
nodes/fragment/connections = PoolIntArray( 3, 0, 4, 0, 5, 0, 4, 1, 4, 0, 0, 0, 2, 0, 3, 0 )

[sub_resource type="ShaderMaterial" id=164]
shader = SubResource( 163 )

[sub_resource type="VisualShaderNodeInput" id=165]
input_name = "time"

[sub_resource type="VisualShaderNodeTexture" id=168]
texture = ExtResource( 9 )
texture_type = 1

[sub_resource type="VisualShaderNodeVectorOp" id=171]
operator = 2

[sub_resource type="VisualShaderNodeCustom" id=172]
default_input_values = [ 1, 2.0, 2, 1.0, 3, 0.0 ]
initialized = true
script = ExtResource( 28 )

[sub_resource type="VisualShader" id=169]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_5 : hint_albedo;


// SquareWave

		float square_wave(float IN, float __amplitude, float __frequency, float __height) {
			return __amplitude*sign(sin(2.0 * 3.1416 * IN * __frequency)) + __height;
		}
	

void vertex() {
// Output:0

}

void fragment() {
// Input:2
	float n_out2p0 = TIME;

// SquareWave:7
	float n_in7p1 = 2.00000;
	float n_in7p2 = 1.00000;
	float n_in7p3 = 0.00000;
	float n_out7p0;
	{
		n_out7p0 = square_wave(n_out2p0, n_in7p1, n_in7p2, n_in7p3);
	}

// Texture:5
	vec4 tex_frg_5_read = texture(tex_frg_5, UV.xy);
	vec3 n_out5p0 = tex_frg_5_read.rgb;
	float n_out5p1 = tex_frg_5_read.a;

// VectorOp:6
	vec3 n_out6p0 = vec3(n_out7p0) * n_out5p0;

// Output:0
	COLOR.rgb = n_out6p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -210.72, 49.5 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 740, 200 )
nodes/fragment/2/node = SubResource( 165 )
nodes/fragment/2/position = Vector2( -558.54, 84.5 )
nodes/fragment/5/node = SubResource( 168 )
nodes/fragment/5/position = Vector2( -140, 460 )
nodes/fragment/6/node = SubResource( 171 )
nodes/fragment/6/position = Vector2( 341.35, 259.5 )
nodes/fragment/7/node = SubResource( 172 )
nodes/fragment/7/position = Vector2( -95.3502, 185 )
nodes/fragment/connections = PoolIntArray( 2, 0, 7, 0, 7, 0, 6, 0, 5, 0, 6, 1, 6, 0, 0, 0 )

[sub_resource type="ShaderMaterial" id=170]
shader = SubResource( 169 )

[sub_resource type="VisualShaderNodeInput" id=173]
input_name = "time"

[sub_resource type="VisualShaderNodeCustom" id=174]
default_input_values = [ 1, 1.0, 2, 1.0, 3, 0.0 ]
initialized = true
script = ExtResource( 29 )

[sub_resource type="VisualShaderNodeVectorOp" id=175]
operator = 2

[sub_resource type="VisualShaderNodeTexture" id=176]
texture = ExtResource( 9 )
texture_type = 1

[sub_resource type="VisualShader" id=177]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_5 : hint_albedo;


// SawtoothWave

		float sawtooth_wave(float IN, float __amplitude, float __period, float __height) {
			return 2.0 * __amplitude * ((IN/__period) - floor((1.0/2.0) + (IN / __period))) + __height;
		}
	

void vertex() {
// Output:0

}

void fragment() {
// Input:2
	float n_out2p0 = TIME;

// SawtoothWave:3
	float n_in3p1 = 1.00000;
	float n_in3p2 = 1.00000;
	float n_in3p3 = 0.00000;
	float n_out3p0;
	{
		n_out3p0 = sawtooth_wave(n_out2p0, n_in3p1, n_in3p2, n_in3p3);
	}

// Texture:5
	vec4 tex_frg_5_read = texture(tex_frg_5, UV.xy);
	vec3 n_out5p0 = tex_frg_5_read.rgb;
	float n_out5p1 = tex_frg_5_read.a;

// VectorOp:4
	vec3 n_out4p0 = vec3(n_out3p0) * n_out5p0;

// Output:0
	COLOR.rgb = n_out4p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -296.325, 74.25 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 640, 180 )
nodes/fragment/2/node = SubResource( 173 )
nodes/fragment/2/position = Vector2( -574.73, 121.5 )
nodes/fragment/3/node = SubResource( 174 )
nodes/fragment/3/position = Vector2( -200, 140 )
nodes/fragment/4/node = SubResource( 175 )
nodes/fragment/4/position = Vector2( 220.27, 279.5 )
nodes/fragment/5/node = SubResource( 176 )
nodes/fragment/5/position = Vector2( -240, 440 )
nodes/fragment/connections = PoolIntArray( 2, 0, 3, 0, 3, 0, 4, 0, 5, 0, 4, 1, 4, 0, 0, 0 )

[sub_resource type="ShaderMaterial" id=178]
shader = SubResource( 177 )

[sub_resource type="VisualShaderNodeInput" id=179]
input_name = "time"

[sub_resource type="VisualShaderNodeCustom" id=180]
default_input_values = [ 1, 1.0, 2, 1.0, 3, 0.0, 4, 0.0 ]
initialized = true
script = ExtResource( 30 )

[sub_resource type="VisualShaderNodeVectorOp" id=181]
operator = 2

[sub_resource type="VisualShaderNodeTexture" id=182]
texture = ExtResource( 9 )
texture_type = 1

[sub_resource type="VisualShader" id=183]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_5 : hint_albedo;


// SineWave

		float sine_wave(float IN, float __amplitude, float __frequency, float __phase, float __height) {
			return __amplitude * sin(2.0 * 3.1416 * __frequency * IN + __phase) + __height;
		}
	

void vertex() {
// Output:0

}

void fragment() {
// Input:2
	float n_out2p0 = TIME;

// SineWave:3
	float n_in3p1 = 1.00000;
	float n_in3p2 = 1.00000;
	float n_in3p3 = 0.00000;
	float n_in3p4 = 0.00000;
	float n_out3p0;
	{
		n_out3p0 = sine_wave(n_out2p0, n_in3p1, n_in3p2, n_in3p3, n_in3p4);
	}

// Texture:5
	vec4 tex_frg_5_read = texture(tex_frg_5, UV.xy);
	vec3 n_out5p0 = tex_frg_5_read.rgb;
	float n_out5p1 = tex_frg_5_read.a;

// VectorOp:4
	vec3 n_out4p0 = vec3(n_out3p0) * n_out5p0;

// Output:0
	COLOR.rgb = n_out4p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -289.74, 38.25 )
mode = 1
flags/light_only = false
nodes/fragment/2/node = SubResource( 179 )
nodes/fragment/2/position = Vector2( -852.45, 68 )
nodes/fragment/3/node = SubResource( 180 )
nodes/fragment/3/position = Vector2( -500, 80 )
nodes/fragment/4/node = SubResource( 181 )
nodes/fragment/4/position = Vector2( 10.5498, 226 )
nodes/fragment/5/node = SubResource( 182 )
nodes/fragment/5/position = Vector2( -560, 420 )
nodes/fragment/connections = PoolIntArray( 2, 0, 3, 0, 3, 0, 4, 0, 5, 0, 4, 1, 4, 0, 0, 0 )

[sub_resource type="ShaderMaterial" id=184]
shader = SubResource( 183 )

[node name="Examples" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0

[node name="BlendModes" type="Control" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0

[node name="VBoxContainer" type="VBoxContainer" parent="BlendModes"]
anchor_right = 1.0
anchor_bottom = 1.0

[node name="Label" type="Label" parent="BlendModes/VBoxContainer"]
margin_right = 1024.0
margin_bottom = 36.0
size_flags_horizontal = 3
size_flags_vertical = 5
custom_fonts/font = SubResource( 27 )
text = "Blending Modes"
align = 1
valign = 1

[node name="VBoxContainer" type="VBoxContainer" parent="BlendModes/VBoxContainer"]
margin_top = 40.0
margin_right = 1024.0
margin_bottom = 600.0
size_flags_horizontal = 3
size_flags_vertical = 3

[node name="Lighten" type="VBoxContainer" parent="BlendModes/VBoxContainer/VBoxContainer"]
margin_right = 1024.0
margin_bottom = 278.0
size_flags_vertical = 3

[node name="LightenLabel" type="Label" parent="BlendModes/VBoxContainer/VBoxContainer/Lighten"]
margin_right = 1024.0
margin_bottom = 29.0
custom_fonts/font = SubResource( 28 )
text = "Lighten"
align = 1

[node name="HBoxContainer" type="HBoxContainer" parent="BlendModes/VBoxContainer/VBoxContainer/Lighten"]
margin_top = 33.0
margin_right = 1024.0
margin_bottom = 197.0

[node name="GammaIlluminationPreview" type="VBoxContainer" parent="BlendModes/VBoxContainer/VBoxContainer/Lighten/HBoxContainer"]
margin_right = 100.0
margin_bottom = 164.0
rect_min_size = Vector2( 100, 100 )

[node name="GammaIllumination" type="TextureRect" parent="BlendModes/VBoxContainer/VBoxContainer/Lighten/HBoxContainer/GammaIlluminationPreview"]
material = SubResource( 69 )
margin_right = 100.0
margin_bottom = 100.0
rect_min_size = Vector2( 100, 100 )
texture = ExtResource( 9 )
expand = true

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/VBoxContainer/Lighten/HBoxContainer/GammaIlluminationPreview"]
margin_top = 104.0
margin_right = 100.0
margin_bottom = 164.0
size_flags_vertical = 6
custom_fonts/font = SubResource( 70 )
text = "Gamma Illumination"
align = 1
valign = 1
autowrap = true

[node name="GammaLightPreview" type="VBoxContainer" parent="BlendModes/VBoxContainer/VBoxContainer/Lighten/HBoxContainer"]
margin_left = 104.0
margin_right = 204.0
margin_bottom = 164.0
rect_min_size = Vector2( 100, 100 )

[node name="GammaLight" type="TextureRect" parent="BlendModes/VBoxContainer/VBoxContainer/Lighten/HBoxContainer/GammaLightPreview"]
material = SubResource( 77 )
margin_right = 100.0
margin_bottom = 100.0
rect_min_size = Vector2( 100, 100 )
texture = ExtResource( 9 )
expand = true

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/VBoxContainer/Lighten/HBoxContainer/GammaLightPreview"]
margin_top = 114.0
margin_right = 100.0
margin_bottom = 153.0
size_flags_vertical = 6
custom_fonts/font = SubResource( 78 )
text = "Gamma Light"
align = 1
valign = 1
autowrap = true

[node name="LighterColorPreview" type="VBoxContainer" parent="BlendModes/VBoxContainer/VBoxContainer/Lighten/HBoxContainer"]
margin_left = 208.0
margin_right = 308.0
margin_bottom = 164.0
rect_min_size = Vector2( 100, 100 )

[node name="LighterColor" type="TextureRect" parent="BlendModes/VBoxContainer/VBoxContainer/Lighten/HBoxContainer/LighterColorPreview"]
material = SubResource( 108 )
margin_right = 100.0
margin_bottom = 100.0
rect_min_size = Vector2( 100, 100 )
texture = ExtResource( 9 )
expand = true

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/VBoxContainer/Lighten/HBoxContainer/LighterColorPreview"]
margin_top = 114.0
margin_right = 100.0
margin_bottom = 153.0
size_flags_vertical = 6
custom_fonts/font = SubResource( 86 )
text = "Lighter Color"
align = 1
valign = 1
autowrap = true

[node name="LinearLightPreview" type="VBoxContainer" parent="BlendModes/VBoxContainer/VBoxContainer/Lighten/HBoxContainer"]
margin_left = 312.0
margin_right = 412.0
margin_bottom = 164.0
rect_min_size = Vector2( 100, 100 )

[node name="LinearLight" type="TextureRect" parent="BlendModes/VBoxContainer/VBoxContainer/Lighten/HBoxContainer/LinearLightPreview"]
material = SubResource( 85 )
margin_right = 100.0
margin_bottom = 100.0
rect_min_size = Vector2( 100, 100 )
texture = ExtResource( 9 )
expand = true

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/VBoxContainer/Lighten/HBoxContainer/LinearLightPreview"]
margin_top = 114.0
margin_right = 100.0
margin_bottom = 153.0
size_flags_vertical = 6
custom_fonts/font = SubResource( 86 )
text = "Linear Light"
align = 1
valign = 1
autowrap = true

[node name="LuminosityPreview" type="VBoxContainer" parent="BlendModes/VBoxContainer/VBoxContainer/Lighten/HBoxContainer"]
margin_left = 416.0
margin_right = 516.0
margin_bottom = 164.0
rect_min_size = Vector2( 100, 100 )

[node name="Luminosity" type="TextureRect" parent="BlendModes/VBoxContainer/VBoxContainer/Lighten/HBoxContainer/LuminosityPreview"]
material = SubResource( 120 )
margin_right = 100.0
margin_bottom = 100.0
rect_min_size = Vector2( 100, 100 )
texture = ExtResource( 9 )
expand = true

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/VBoxContainer/Lighten/HBoxContainer/LuminosityPreview"]
margin_top = 125.0
margin_right = 100.0
margin_bottom = 143.0
size_flags_vertical = 6
custom_fonts/font = SubResource( 86 )
text = "Luminosity"
align = 1
valign = 1
autowrap = true

[node name="PinLightPreview" type="VBoxContainer" parent="BlendModes/VBoxContainer/VBoxContainer/Lighten/HBoxContainer"]
margin_left = 520.0
margin_right = 620.0
margin_bottom = 164.0
rect_min_size = Vector2( 100, 100 )

[node name="PinLight" type="TextureRect" parent="BlendModes/VBoxContainer/VBoxContainer/Lighten/HBoxContainer/PinLightPreview"]
material = SubResource( 125 )
margin_right = 100.0
margin_bottom = 100.0
rect_min_size = Vector2( 100, 100 )
texture = ExtResource( 9 )
expand = true

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/VBoxContainer/Lighten/HBoxContainer/PinLightPreview"]
margin_top = 125.0
margin_right = 100.0
margin_bottom = 143.0
size_flags_vertical = 6
custom_fonts/font = SubResource( 86 )
text = "Pin Light"
align = 1
valign = 1
autowrap = true

[node name="VividLightPreview" type="VBoxContainer" parent="BlendModes/VBoxContainer/VBoxContainer/Lighten/HBoxContainer"]
margin_left = 624.0
margin_right = 724.0
margin_bottom = 164.0
rect_min_size = Vector2( 100, 100 )

[node name="VividLight" type="TextureRect" parent="BlendModes/VBoxContainer/VBoxContainer/Lighten/HBoxContainer/VividLightPreview"]
material = SubResource( 137 )
margin_right = 100.0
margin_bottom = 100.0
rect_min_size = Vector2( 100, 100 )
texture = ExtResource( 9 )
expand = true

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/VBoxContainer/Lighten/HBoxContainer/VividLightPreview"]
margin_top = 125.0
margin_right = 100.0
margin_bottom = 143.0
size_flags_vertical = 6
custom_fonts/font = SubResource( 86 )
text = "Vivid Light"
align = 1
valign = 1
autowrap = true

[node name="Darken" type="VBoxContainer" parent="BlendModes/VBoxContainer/VBoxContainer"]
margin_top = 282.0
margin_right = 1024.0
margin_bottom = 560.0
size_flags_vertical = 3

[node name="DarkenLabel" type="Label" parent="BlendModes/VBoxContainer/VBoxContainer/Darken"]
margin_right = 1024.0
margin_bottom = 29.0
custom_fonts/font = SubResource( 29 )
text = "Darken"
align = 1

[node name="HBoxContainer" type="HBoxContainer" parent="BlendModes/VBoxContainer/VBoxContainer/Darken"]
margin_top = 33.0
margin_right = 1024.0
margin_bottom = 176.0

[node name="DarkerColorPreview" type="VBoxContainer" parent="BlendModes/VBoxContainer/VBoxContainer/Darken/HBoxContainer"]
margin_right = 100.0
margin_bottom = 143.0
rect_min_size = Vector2( 100, 100 )

[node name="DarkerColor" type="TextureRect" parent="BlendModes/VBoxContainer/VBoxContainer/Darken/HBoxContainer/DarkerColorPreview"]
material = SubResource( 141 )
margin_right = 100.0
margin_bottom = 100.0
rect_min_size = Vector2( 100, 100 )
texture = ExtResource( 9 )
expand = true

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/VBoxContainer/Darken/HBoxContainer/DarkerColorPreview"]
margin_top = 104.0
margin_right = 100.0
margin_bottom = 143.0
size_flags_vertical = 6
custom_fonts/font = SubResource( 94 )
text = "Darker Color"
align = 1
autowrap = true

[node name="ExclusionPreview" type="VBoxContainer" parent="BlendModes/VBoxContainer/VBoxContainer/Darken/HBoxContainer"]
margin_left = 104.0
margin_right = 204.0
margin_bottom = 143.0
rect_min_size = Vector2( 100, 100 )

[node name="Exclusion" type="TextureRect" parent="BlendModes/VBoxContainer/VBoxContainer/Darken/HBoxContainer/ExclusionPreview"]
material = SubResource( 143 )
margin_right = 100.0
margin_bottom = 100.0
rect_min_size = Vector2( 100, 100 )
texture = ExtResource( 9 )
expand = true

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/VBoxContainer/Darken/HBoxContainer/ExclusionPreview"]
margin_top = 114.0
margin_right = 100.0
margin_bottom = 132.0
size_flags_vertical = 6
custom_fonts/font = SubResource( 94 )
text = "Exclusion"
align = 1
autowrap = true

[node name="GammaDarkPreview" type="VBoxContainer" parent="BlendModes/VBoxContainer/VBoxContainer/Darken/HBoxContainer"]
margin_left = 208.0
margin_right = 308.0
margin_bottom = 143.0
rect_min_size = Vector2( 100, 100 )

[node name="GammaDark" type="TextureRect" parent="BlendModes/VBoxContainer/VBoxContainer/Darken/HBoxContainer/GammaDarkPreview"]
material = SubResource( 101 )
margin_right = 100.0
margin_bottom = 100.0
rect_min_size = Vector2( 100, 100 )
texture = ExtResource( 9 )
expand = true

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/VBoxContainer/Darken/HBoxContainer/GammaDarkPreview"]
margin_top = 104.0
margin_right = 100.0
margin_bottom = 143.0
size_flags_vertical = 6
custom_fonts/font = SubResource( 94 )
text = "Gamma Dark"
align = 1
autowrap = true

[node name="HardMixPreview" type="VBoxContainer" parent="BlendModes/VBoxContainer/VBoxContainer/Darken/HBoxContainer"]
margin_left = 312.0
margin_right = 412.0
margin_bottom = 143.0
rect_min_size = Vector2( 100, 100 )

[node name="HardMix" type="TextureRect" parent="BlendModes/VBoxContainer/VBoxContainer/Darken/HBoxContainer/HardMixPreview"]
material = SubResource( 92 )
margin_right = 100.0
margin_bottom = 100.0
rect_min_size = Vector2( 100, 100 )
texture = ExtResource( 9 )
expand = true

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/VBoxContainer/Darken/HBoxContainer/HardMixPreview"]
margin_top = 114.0
margin_right = 100.0
margin_bottom = 132.0
size_flags_vertical = 6
custom_fonts/font = SubResource( 86 )
text = "Hard Mix"
align = 1
valign = 1
autowrap = true

[node name="LinearBurnPreview" type="VBoxContainer" parent="BlendModes/VBoxContainer/VBoxContainer/Darken/HBoxContainer"]
margin_left = 416.0
margin_right = 516.0
margin_bottom = 143.0
rect_min_size = Vector2( 100, 100 )

[node name="LinearBurn" type="TextureRect" parent="BlendModes/VBoxContainer/VBoxContainer/Darken/HBoxContainer/LinearBurnPreview"]
material = SubResource( 114 )
margin_right = 100.0
margin_bottom = 100.0
rect_min_size = Vector2( 100, 100 )
texture = ExtResource( 9 )
expand = true

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/VBoxContainer/Darken/HBoxContainer/LinearBurnPreview"]
margin_top = 104.0
margin_right = 100.0
margin_bottom = 143.0
size_flags_vertical = 6
custom_fonts/font = SubResource( 86 )
text = "Linear Burn"
align = 1
valign = 1
autowrap = true

[node name="Shapes" type="Control" parent="."]
visible = false
anchor_right = 1.0
anchor_bottom = 1.0

[node name="VBoxContainer" type="VBoxContainer" parent="Shapes"]
anchor_right = 1.0
anchor_bottom = 1.0

[node name="Label" type="Label" parent="Shapes/VBoxContainer"]
margin_right = 1024.0
margin_bottom = 36.0
size_flags_horizontal = 3
size_flags_vertical = 5
custom_fonts/font = SubResource( 30 )
text = "Shapes"
align = 1
valign = 1

[node name="HBoxContainer" type="HBoxContainer" parent="Shapes/VBoxContainer"]
margin_top = 40.0
margin_right = 1024.0
margin_bottom = 183.0

[node name="Circle" type="VBoxContainer" parent="Shapes/VBoxContainer/HBoxContainer"]
margin_right = 100.0
margin_bottom = 143.0

[node name="ColorRect" type="ColorRect" parent="Shapes/VBoxContainer/HBoxContainer/Circle"]
material = SubResource( 56 )
margin_right = 100.0
margin_bottom = 100.0
rect_min_size = Vector2( 100, 100 )
size_flags_vertical = 3

[node name="Label" type="Label" parent="Shapes/VBoxContainer/HBoxContainer/Circle"]
margin_top = 114.0
margin_right = 100.0
margin_bottom = 132.0
size_flags_vertical = 6
custom_fonts/font = SubResource( 31 )
text = "Circle"
align = 1

[node name="RoundedBox" type="VBoxContainer" parent="Shapes/VBoxContainer/HBoxContainer"]
margin_left = 104.0
margin_right = 218.0
margin_bottom = 143.0

[node name="ColorRect" type="ColorRect" parent="Shapes/VBoxContainer/HBoxContainer/RoundedBox"]
material = SubResource( 17 )
margin_right = 114.0
margin_bottom = 100.0
rect_min_size = Vector2( 100, 100 )
size_flags_vertical = 3

[node name="Label" type="Label" parent="Shapes/VBoxContainer/HBoxContainer/RoundedBox"]
margin_top = 114.0
margin_right = 114.0
margin_bottom = 132.0
size_flags_vertical = 6
custom_fonts/font = SubResource( 32 )
text = "Rounded Box"
align = 1

[node name="Box" type="VBoxContainer" parent="Shapes/VBoxContainer/HBoxContainer"]
margin_left = 222.0
margin_right = 322.0
margin_bottom = 143.0

[node name="ColorRect" type="ColorRect" parent="Shapes/VBoxContainer/HBoxContainer/Box"]
material = SubResource( 48 )
margin_right = 100.0
margin_bottom = 100.0
rect_min_size = Vector2( 100, 100 )
size_flags_vertical = 3

[node name="Label" type="Label" parent="Shapes/VBoxContainer/HBoxContainer/Box"]
margin_top = 114.0
margin_right = 100.0
margin_bottom = 132.0
size_flags_vertical = 6
custom_fonts/font = SubResource( 33 )
text = "Box"
align = 1

[node name="RotatedBox" type="VBoxContainer" parent="Shapes/VBoxContainer/HBoxContainer"]
margin_left = 326.0
margin_right = 436.0
margin_bottom = 143.0

[node name="ColorRect" type="ColorRect" parent="Shapes/VBoxContainer/HBoxContainer/RotatedBox"]
material = SubResource( 51 )
margin_right = 110.0
margin_bottom = 100.0
rect_min_size = Vector2( 100, 100 )
size_flags_vertical = 3

[node name="Label" type="Label" parent="Shapes/VBoxContainer/HBoxContainer/RotatedBox"]
margin_top = 114.0
margin_right = 110.0
margin_bottom = 132.0
size_flags_vertical = 6
custom_fonts/font = SubResource( 34 )
text = "Rotated Box"
align = 1

[node name="Rhombus" type="VBoxContainer" parent="Shapes/VBoxContainer/HBoxContainer"]
margin_left = 440.0
margin_right = 540.0
margin_bottom = 143.0

[node name="ColorRect" type="ColorRect" parent="Shapes/VBoxContainer/HBoxContainer/Rhombus"]
material = SubResource( 26 )
margin_right = 100.0
margin_bottom = 100.0
rect_min_size = Vector2( 100, 100 )
size_flags_vertical = 3

[node name="Label" type="Label" parent="Shapes/VBoxContainer/HBoxContainer/Rhombus"]
margin_top = 114.0
margin_right = 100.0
margin_bottom = 132.0
size_flags_vertical = 6
custom_fonts/font = SubResource( 35 )
text = "Rhombus"
align = 1

[node name="Trapezoid" type="VBoxContainer" parent="Shapes/VBoxContainer/HBoxContainer"]
margin_left = 544.0
margin_right = 644.0
margin_bottom = 143.0

[node name="ColorRect" type="ColorRect" parent="Shapes/VBoxContainer/HBoxContainer/Trapezoid"]
material = SubResource( 53 )
margin_right = 100.0
margin_bottom = 100.0
rect_min_size = Vector2( 100, 100 )
size_flags_vertical = 3

[node name="Label" type="Label" parent="Shapes/VBoxContainer/HBoxContainer/Trapezoid"]
margin_top = 114.0
margin_right = 100.0
margin_bottom = 132.0
size_flags_vertical = 6
custom_fonts/font = SubResource( 35 )
text = "Trapezoid"
align = 1

[node name="Parallelogram" type="VBoxContainer" parent="Shapes/VBoxContainer/HBoxContainer"]
margin_left = 648.0
margin_right = 748.0
margin_bottom = 143.0

[node name="ColorRect" type="ColorRect" parent="Shapes/VBoxContainer/HBoxContainer/Parallelogram"]
material = SubResource( 59 )
margin_right = 100.0
margin_bottom = 100.0
rect_min_size = Vector2( 100, 100 )
size_flags_vertical = 3

[node name="Label" type="Label" parent="Shapes/VBoxContainer/HBoxContainer/Parallelogram"]
margin_top = 104.0
margin_right = 100.0
margin_bottom = 143.0
size_flags_vertical = 6
custom_fonts/font = SubResource( 35 )
text = "Parallelogram"
align = 1
autowrap = true

[node name="Triangle" type="VBoxContainer" parent="Shapes/VBoxContainer/HBoxContainer"]
margin_left = 752.0
margin_right = 852.0
margin_bottom = 143.0

[node name="ColorRect" type="ColorRect" parent="Shapes/VBoxContainer/HBoxContainer/Triangle"]
material = SubResource( 62 )
margin_right = 100.0
margin_bottom = 100.0
rect_min_size = Vector2( 100, 100 )
size_flags_vertical = 3

[node name="Label" type="Label" parent="Shapes/VBoxContainer/HBoxContainer/Triangle"]
margin_top = 114.0
margin_right = 100.0
margin_bottom = 132.0
size_flags_vertical = 6
custom_fonts/font = SubResource( 35 )
text = "Triangle"
align = 1

[node name="UV" type="Control" parent="."]
visible = false
anchor_right = 1.0
anchor_bottom = 1.0

[node name="VBoxContainer" type="VBoxContainer" parent="UV"]
anchor_right = 1.0
anchor_bottom = 1.0

[node name="Label" type="Label" parent="UV/VBoxContainer"]
margin_right = 1024.0
margin_bottom = 36.0
size_flags_horizontal = 3
size_flags_vertical = 5
custom_fonts/font = SubResource( 27 )
text = "UV"
align = 1
valign = 1

[node name="HBoxContainer" type="HBoxContainer" parent="UV/VBoxContainer"]
margin_top = 40.0
margin_right = 1024.0
margin_bottom = 183.0

[node name="PolarCoord" type="VBoxContainer" parent="UV/VBoxContainer/HBoxContainer"]
margin_right = 100.0
margin_bottom = 143.0

[node name="ColorRect" type="ColorRect" parent="UV/VBoxContainer/HBoxContainer/PolarCoord"]
material = SubResource( 149 )
margin_right = 100.0
margin_bottom = 100.0
rect_min_size = Vector2( 100, 100 )

[node name="Label" type="Label" parent="UV/VBoxContainer/HBoxContainer/PolarCoord"]
margin_top = 104.0
margin_right = 100.0
margin_bottom = 143.0
custom_fonts/font = SubResource( 31 )
text = "Polar Coord"
align = 1
autowrap = true

[node name="Twirl" type="VBoxContainer" parent="UV/VBoxContainer/HBoxContainer"]
margin_left = 104.0
margin_right = 204.0
margin_bottom = 143.0

[node name="ColorRect" type="ColorRect" parent="UV/VBoxContainer/HBoxContainer/Twirl"]
material = SubResource( 152 )
margin_right = 100.0
margin_bottom = 100.0
rect_min_size = Vector2( 100, 100 )

[node name="Label" type="Label" parent="UV/VBoxContainer/HBoxContainer/Twirl"]
margin_top = 114.0
margin_right = 100.0
margin_bottom = 132.0
size_flags_vertical = 6
custom_fonts/font = SubResource( 31 )
text = "Twirl"
align = 1
autowrap = true

[node name="Flipbook" type="VBoxContainer" parent="UV/VBoxContainer/HBoxContainer"]
margin_left = 208.0
margin_right = 308.0
margin_bottom = 143.0

[node name="ColorRect" type="ColorRect" parent="UV/VBoxContainer/HBoxContainer/Flipbook"]
material = SubResource( 156 )
margin_right = 100.0
margin_bottom = 100.0
rect_min_size = Vector2( 100, 100 )

[node name="Label" type="Label" parent="UV/VBoxContainer/HBoxContainer/Flipbook"]
margin_top = 114.0
margin_right = 100.0
margin_bottom = 132.0
size_flags_vertical = 6
custom_fonts/font = SubResource( 31 )
text = "Flipbook"
align = 1
autowrap = true

[node name="Wave" type="Control" parent="."]
visible = false
anchor_right = 1.0
anchor_bottom = 1.0

[node name="VBoxContainer" type="VBoxContainer" parent="Wave"]
anchor_right = 1.0
anchor_bottom = 1.0
__meta__ = {
"_editor_description_": ""
}

[node name="Label" type="Label" parent="Wave/VBoxContainer"]
margin_right = 1024.0
margin_bottom = 36.0
size_flags_horizontal = 3
size_flags_vertical = 5
custom_fonts/font = SubResource( 27 )
text = "Wave"
align = 1
valign = 1
__meta__ = {
"_editor_description_": ""
}

[node name="HBoxContainer" type="HBoxContainer" parent="Wave/VBoxContainer"]
margin_top = 40.0
margin_right = 1024.0
margin_bottom = 600.0
size_flags_vertical = 3

[node name="TriangleWave" type="VBoxContainer" parent="Wave/VBoxContainer/HBoxContainer"]
margin_right = 100.0
margin_bottom = 560.0
size_flags_vertical = 3
__meta__ = {
"_editor_description_": ""
}

[node name="TriangleWave" type="TextureRect" parent="Wave/VBoxContainer/HBoxContainer/TriangleWave"]
material = SubResource( 164 )
margin_right = 100.0
margin_bottom = 100.0
rect_min_size = Vector2( 100, 100 )
texture = ExtResource( 9 )
expand = true

[node name="Label" type="Label" parent="Wave/VBoxContainer/HBoxContainer/TriangleWave"]
margin_top = 104.0
margin_right = 100.0
margin_bottom = 143.0
size_flags_vertical = 1
custom_fonts/font = SubResource( 70 )
text = "Triangle Wave"
align = 1
valign = 1
autowrap = true

[node name="SquareWave" type="VBoxContainer" parent="Wave/VBoxContainer/HBoxContainer"]
margin_left = 104.0
margin_right = 204.0
margin_bottom = 560.0
size_flags_vertical = 3
__meta__ = {
"_editor_description_": ""
}

[node name="SquareWave" type="TextureRect" parent="Wave/VBoxContainer/HBoxContainer/SquareWave"]
material = SubResource( 170 )
margin_right = 100.0
margin_bottom = 100.0
rect_min_size = Vector2( 100, 100 )
texture = ExtResource( 9 )
expand = true

[node name="Label" type="Label" parent="Wave/VBoxContainer/HBoxContainer/SquareWave"]
margin_top = 104.0
margin_right = 100.0
margin_bottom = 143.0
size_flags_vertical = 1
custom_fonts/font = SubResource( 70 )
text = "Square Wave"
align = 1
valign = 1
autowrap = true

[node name="SawtoothWave" type="VBoxContainer" parent="Wave/VBoxContainer/HBoxContainer"]
margin_left = 208.0
margin_right = 308.0
margin_bottom = 560.0
size_flags_vertical = 3
__meta__ = {
"_editor_description_": ""
}

[node name="SawtoothWave" type="TextureRect" parent="Wave/VBoxContainer/HBoxContainer/SawtoothWave"]
material = SubResource( 178 )
margin_right = 100.0
margin_bottom = 100.0
rect_min_size = Vector2( 100, 100 )
texture = ExtResource( 9 )
expand = true

[node name="Label" type="Label" parent="Wave/VBoxContainer/HBoxContainer/SawtoothWave"]
margin_top = 104.0
margin_right = 100.0
margin_bottom = 143.0
size_flags_vertical = 1
custom_fonts/font = SubResource( 70 )
text = "Sawtooth Wave"
align = 1
valign = 1
autowrap = true

[node name="SineWave" type="VBoxContainer" parent="Wave/VBoxContainer/HBoxContainer"]
margin_left = 312.0
margin_right = 412.0
margin_bottom = 560.0
size_flags_vertical = 3
__meta__ = {
"_editor_description_": ""
}

[node name="SineWave" type="TextureRect" parent="Wave/VBoxContainer/HBoxContainer/SineWave"]
material = SubResource( 184 )
margin_right = 100.0
margin_bottom = 100.0
rect_min_size = Vector2( 100, 100 )
texture = ExtResource( 9 )
expand = true

[node name="Label" type="Label" parent="Wave/VBoxContainer/HBoxContainer/SineWave"]
margin_top = 104.0
margin_right = 100.0
margin_bottom = 122.0
size_flags_vertical = 1
custom_fonts/font = SubResource( 70 )
text = "Sine Wave"
align = 1
valign = 1
autowrap = true

[node name="Camera2D" type="Camera2D" parent="."]
position = Vector2( 512, 300 )
