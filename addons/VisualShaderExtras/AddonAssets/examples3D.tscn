[gd_scene load_steps=55 format=2]

[ext_resource path="res://addons/VisualShaderExtras/Shapes/Rhombus.gd" type="Script" id=1]
[ext_resource path="res://addons/VisualShaderExtras/Shapes/RotatedBox.gd" type="Script" id=2]
[ext_resource path="res://addons/VisualShaderExtras/Shapes/Triangle.gd" type="Script" id=3]
[ext_resource path="res://addons/VisualShaderExtras/Shapes/Trapezoid.gd" type="Script" id=4]
[ext_resource path="res://addons/VisualShaderExtras/Shapes/RoundedBox.gd" type="Script" id=5]
[ext_resource path="res://addons/VisualShaderExtras/Shapes/Circle.gd" type="Script" id=6]
[ext_resource path="res://addons/VisualShaderExtras/Shapes/Parallelogram.gd" type="Script" id=7]
[ext_resource path="res://addons/VisualShaderExtras/UV/UVPolarCoord.gd" type="Script" id=8]
[ext_resource path="res://addons/VisualShaderExtras/UV/UVTwirl.gd" type="Script" id=9]
[ext_resource path="res://addons/VisualShaderExtras/UV/UVFlipbook.gd" type="Script" id=10]
[ext_resource path="res://addons/VisualShaderExtras/Shapes/Box.gd" type="Script" id=11]
[ext_resource path="res://addons/VisualShaderExtras/AddonAssets/DinoSprites - vita.png" type="Texture" id=12]

[sub_resource type="PlaneMesh" id=1]

[sub_resource type="VisualShaderNodeCustom" id=34]
default_input_values = [ 1, Vector3( 0.5, 0.5, 0 ), 2, 0.25 ]
initialized = true
script = ExtResource( 6 )

[sub_resource type="VisualShader" id=35]
code = "shader_type spatial;
render_mode specular_schlick_ggx, async_visible;



// Circle

		float sdCircle(vec2 pos, float r) {
			return length(pos) - r;
		}
	

void vertex() {
// Output:0

}

void fragment() {
// Circle:2
	vec3 n_in2p1 = vec3(0.50000, 0.50000, 0.00000);
	float n_in2p2 = 0.25000;
	float n_out2p0;
	{
		n_out2p0 = sdCircle(UV.xy - n_in2p1.xy, n_in2p2);
	}

// Output:0
	ALBEDO = vec3(n_out2p0);

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -402, 101 )
nodes/fragment/2/node = SubResource( 34 )
nodes/fragment/2/position = Vector2( 120, 160 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0 )

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 35 )

[sub_resource type="VisualShaderNodeCustom" id=36]
default_input_values = [ 1, Vector3( 0.5, 0.5, 0 ), 2, Vector3( 0.25, 0.25, 0 ), 3, Vector3( 0.2, 0.2, 0.2 ), 4, 0.0 ]
initialized = true
script = ExtResource( 5 )

[sub_resource type="VisualShader" id=37]
code = "shader_type spatial;
render_mode specular_schlick_ggx, async_visible;



// RoundedBox

		float sdRoundedBox( in vec2 __pos, in vec2 __proportions, in vec3 __radia, in float __4radia )
		{
			__radia.xy = (__pos.x > 0.0) ? __radia.xy : vec2(__4radia, __radia.z);
			__radia.x  = (__pos.y > 0.0) ? __radia.x  : __radia.y;
			vec2 __q = abs(__pos) - __proportions + __radia.x;
			return min(max(__q.x, __q.y), 0.0) + length(max(__q, 0.0)) - __radia.x;
		}
	

void vertex() {
// Output:0

}

void fragment() {
// RoundedBox:2
	vec3 n_in2p1 = vec3(0.50000, 0.50000, 0.00000);
	vec3 n_in2p2 = vec3(0.25000, 0.25000, 0.00000);
	vec3 n_in2p3 = vec3(0.20000, 0.20000, 0.20000);
	float n_in2p4 = 0.00000;
	float n_out2p0;
	{
		n_out2p0 = sdRoundedBox(UV.xy - n_in2p1.xy, n_in2p2.xy, n_in2p3.xyz, n_in2p4);
	}

// Output:0
	ALBEDO = vec3(n_out2p0);

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -402, 101 )
nodes/fragment/2/node = SubResource( 36 )
nodes/fragment/2/position = Vector2( 100, 160 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0 )

[sub_resource type="ShaderMaterial" id=5]
shader = SubResource( 37 )

[sub_resource type="VisualShaderNodeCustom" id=38]
default_input_values = [ 1, Vector3( 0.5, 0.5, 0 ), 2, Vector3( 0.25, 0.25, 0 ) ]
initialized = true
script = ExtResource( 11 )

[sub_resource type="VisualShader" id=39]
code = "shader_type spatial;
render_mode specular_schlick_ggx, async_visible;



// Box

		float sdBox( in vec2 __position, in vec2 __proportions )
		{
			vec2 __d = abs(__position) - __proportions;
			return length(max(__d, 0.0)) + min(max(__d.x, __d.y), 0.0);
		}
	

void vertex() {
// Output:0

}

void fragment() {
// Box:2
	vec3 n_in2p1 = vec3(0.50000, 0.50000, 0.00000);
	vec3 n_in2p2 = vec3(0.25000, 0.25000, 0.00000);
	float n_out2p0;
	{
		n_out2p0 = sdBox(UV.xy - n_in2p1.xy, n_in2p2.xy);
	}

// Output:0
	ALBEDO = vec3(n_out2p0);

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -402, 101 )
nodes/fragment/2/node = SubResource( 38 )
nodes/fragment/2/position = Vector2( 100, 180 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0 )

[sub_resource type="ShaderMaterial" id=7]
shader = SubResource( 39 )

[sub_resource type="VisualShaderNodeCustom" id=20]
default_input_values = [ 1, Vector3( 0.5, 0.5, 0 ), 2, Vector3( -0.25, -0.25, 0 ), 3, Vector3( 0.25, 0.25, 0 ), 4, 0.2 ]
initialized = true
script = ExtResource( 2 )

[sub_resource type="VisualShader" id=19]
code = "shader_type spatial;
render_mode specular_schlick_ggx, async_visible;



// RotatedBox

		float sdRotatedBox( in vec2 p, in vec2 a, in vec2 b, float th )
		{
			float l = length(b-a);
			vec2  d = (b-a)/l;
			vec2  q = (p-(a+b)*0.5);
				  q = mat2(vec2(d.x,-d.y), vec2(d.y,d.x))*q;
				  q = abs(q)-vec2(l,th)*0.5;
			return length(max(q,0.0)) + min(max(q.x,q.y),0.0);    
		}
	

void vertex() {
// Output:0

}

void fragment() {
// RotatedBox:6
	vec3 n_in6p1 = vec3(0.50000, 0.50000, 0.00000);
	vec3 n_in6p2 = vec3(-0.25000, -0.25000, 0.00000);
	vec3 n_in6p3 = vec3(0.25000, 0.25000, 0.00000);
	float n_in6p4 = 0.20000;
	float n_out6p0;
	{
		n_out6p0 = sdRotatedBox(UV.xy - n_in6p1.xy, n_in6p2.xy, n_in6p3.xy, n_in6p4);
	}

// Output:0
	ALBEDO = vec3(n_out6p0);

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -221, 79 )
nodes/fragment/6/node = SubResource( 20 )
nodes/fragment/6/position = Vector2( 40, 160 )
nodes/fragment/connections = PoolIntArray( 6, 0, 0, 0 )

[sub_resource type="ShaderMaterial" id=9]
shader = SubResource( 19 )

[sub_resource type="VisualShaderNodeCustom" id=23]
default_input_values = [ 1, Vector3( 0.5, 0.5, 0 ), 2, Vector3( 0.25, 0.25, 0 ) ]
initialized = true
script = ExtResource( 1 )

[sub_resource type="VisualShader" id=21]
code = "shader_type spatial;
render_mode specular_schlick_ggx, async_visible;



// Rhombus

		float ndot(vec2 a, vec2 b ) { return a.x*b.x - a.y*b.y; }
		float sdRhombus( in vec2 p, in vec2 b ) 
		{
			p = abs(p);
			float h = clamp( ndot(b-2.0*p,b)/dot(b,b), -1.0, 1.0 );
			float d = length( p-0.5*b*vec2(1.0-h,1.0+h) );
			return d * sign( p.x*b.y + p.y*b.x - b.x*b.y );
		}
	

void vertex() {
// Output:0

}

void fragment() {
// Rhombus:2
	vec3 n_in2p1 = vec3(0.50000, 0.50000, 0.00000);
	vec3 n_in2p2 = vec3(0.25000, 0.25000, 0.00000);
	float n_out2p0;
	{
		n_out2p0 = sdRhombus(UV.xy - n_in2p1.xy, n_in2p2.xy);
	}

// Output:0
	ALBEDO = vec3(n_out2p0);

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -299, 55 )
nodes/fragment/2/node = SubResource( 23 )
nodes/fragment/2/position = Vector2( 40, 160 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0 )

[sub_resource type="ShaderMaterial" id=22]
shader = SubResource( 21 )

[sub_resource type="VisualShaderNodeCustom" id=26]
default_input_values = [ 1, Vector3( 0.5, 0.5, 0 ), 2, 0.15, 3, 0.35, 4, 0.25 ]
initialized = true
script = ExtResource( 4 )

[sub_resource type="VisualShader" id=27]
code = "shader_type spatial;
render_mode specular_schlick_ggx, async_visible;



// Trapezoid

		float sdTrapezoid( in vec2 p, in float r1, float r2, float he )
		{
			vec2 k1 = vec2(r2,he);
			vec2 k2 = vec2(r2-r1,2.0*he);
			p.x = abs(p.x);
			vec2 ca = vec2(p.x-min(p.x,(p.y<0.0)?r1:r2), abs(p.y)-he);
			vec2 cb = p - k1 + k2*clamp( dot(k1-p,k2)/dot(k2, k2), 0.0, 1.0 );
			float s = (cb.x<0.0 && ca.y<0.0) ? -1.0 : 1.0;
			return s*sqrt( min(dot(ca, ca),dot(cb, cb)) );
		}
	

void vertex() {
// Output:0

}

void fragment() {
// Trapezoid:2
	vec3 n_in2p1 = vec3(0.50000, 0.50000, 0.00000);
	float n_in2p2 = 0.15000;
	float n_in2p3 = 0.35000;
	float n_in2p4 = 0.25000;
	float n_out2p0;
	{
		n_out2p0 = sdTrapezoid(UV.xy - n_in2p1.xy, n_in2p2, n_in2p3, n_in2p4);
	}

// Output:0
	ALBEDO = vec3(n_out2p0);

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -313, 99 )
nodes/fragment/2/node = SubResource( 26 )
nodes/fragment/2/position = Vector2( 60, 160 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0 )

[sub_resource type="ShaderMaterial" id=25]
shader = SubResource( 27 )

[sub_resource type="VisualShaderNodeCustom" id=28]
default_input_values = [ 1, Vector3( 0.5, 0.5, 0 ), 2, 0.15, 3, 0.3, 4, 0.2 ]
initialized = true
script = ExtResource( 7 )

[sub_resource type="VisualShader" id=29]
code = "shader_type spatial;
render_mode specular_schlick_ggx, async_visible;



// Parallelogram

		float sdParallelogram( in vec2 p, float wi, float he, float sk )
		{
			vec2 e = vec2(sk,he);
			p = (p.y<0.0)?-p:p;
			vec2  w = p - e; w.x -= clamp(w.x,-wi,wi);
			vec2  d = vec2(dot(w,w), -w.y);
			float s = p.x*e.y - p.y*e.x;
			p = (s<0.0)?-p:p;
			vec2  v = p - vec2(wi,0); v -= e*clamp(dot(v,e)/dot(e,e),-1.0,1.0);
			d = min( d, vec2(dot(v,v), wi*he-abs(s)));
			return sqrt(d.x)*sign(-d.y);
		}
	

void vertex() {
// Output:0

}

void fragment() {
// Parallelogram:2
	vec3 n_in2p1 = vec3(0.50000, 0.50000, 0.00000);
	float n_in2p2 = 0.15000;
	float n_in2p3 = 0.30000;
	float n_in2p4 = 0.20000;
	float n_out2p0;
	{
		n_out2p0 = sdParallelogram(UV.xy - n_in2p1.xy, n_in2p2, n_in2p3, n_in2p4);
	}

// Output:0
	ALBEDO = vec3(n_out2p0);

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -402, 101 )
nodes/fragment/2/node = SubResource( 28 )
nodes/fragment/2/position = Vector2( 140, 180 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0 )

[sub_resource type="ShaderMaterial" id=30]
shader = SubResource( 29 )

[sub_resource type="VisualShaderNodeCustom" id=31]
default_input_values = [ 1, Vector3( 0.5, 0.25, 0 ), 2, Vector3( 0.25, 0.5, 0 ) ]
initialized = true
script = ExtResource( 3 )

[sub_resource type="VisualShader" id=32]
code = "shader_type spatial;
render_mode specular_schlick_ggx, async_visible;



// Triangle

		float sdTriangleIsosceles( in vec2 p, in vec2 q )
		{
			p.x = abs(p.x);
			vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );
			vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );
			float s = -sign( q.y );
			vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),
						  vec2( dot(b,b), s*(p.y-q.y)  ));
			return -sqrt(d.x)*sign(d.y);
		}
	

void vertex() {
// Output:0

}

void fragment() {
// Triangle:2
	vec3 n_in2p1 = vec3(0.50000, 0.25000, 0.00000);
	vec3 n_in2p2 = vec3(0.25000, 0.50000, 0.00000);
	float n_out2p0;
	{
		n_out2p0 = sdTriangleIsosceles(UV.xy - n_in2p1.xy, n_in2p2.xy);
	}

// Output:0
	ALBEDO = vec3(n_out2p0);

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -402, 101 )
nodes/fragment/2/node = SubResource( 31 )
nodes/fragment/2/position = Vector2( 120, 180 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0 )

[sub_resource type="ShaderMaterial" id=33]
shader = SubResource( 32 )

[sub_resource type="PlaneMesh" id=40]

[sub_resource type="VisualShaderNodeCustom" id=47]
default_input_values = [ 1, Vector3( 0.5, 0.5, 0 ), 2, 1, 3, 1 ]
initialized = true
script = ExtResource( 8 )

[sub_resource type="VisualShader" id=41]
code = "shader_type spatial;
render_mode specular_schlick_ggx, async_visible;



// UVPolarCoord

			vec2 uv_polarcoord_spatial(vec2 __uv, vec2 __center, float __zoom, float __repeat)
			{
				vec2 __dir = __uv - __center;
				float __radius = length(__dir) * 2.0;
				float __angle = atan(__dir.y, __dir.x) * 1.0/(3.1415 * 2.0);
				return vec2(__radius * __zoom, __angle * __repeat);
			}
		

void vertex() {
// Output:0

}

void fragment() {
// UVPolarCoord:2
	vec3 n_in2p1 = vec3(0.50000, 0.50000, 0.00000);
	float n_in2p2 = 1.00000;
	float n_in2p3 = 1.00000;
	vec3 n_out2p0;
	{
		n_out2p0.xy = uv_polarcoord_spatial(UV.xy, n_in2p1.xy, n_in2p2, n_in2p3);
	}

// Output:0
	ALBEDO = n_out2p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -491, 90 )
nodes/fragment/2/node = SubResource( 47 )
nodes/fragment/2/position = Vector2( 120, 180 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0 )

[sub_resource type="ShaderMaterial" id=42]
shader = SubResource( 41 )

[sub_resource type="PlaneMesh" id=43]

[sub_resource type="VisualShaderNodeCustom" id=44]
default_input_values = [ 1, Vector3( 0.5, 0.5, 0 ), 2, 10, 3, Vector3( 0, 0, 0 ) ]
initialized = true
script = ExtResource( 9 )

[sub_resource type="VisualShader" id=45]
code = "shader_type spatial;
render_mode specular_schlick_ggx, async_visible;



// UVTwirl

		vec2 Twirl(vec2 __uv, vec2 __center, float __strength, vec2 __offset)
		{
			vec2 __delta = __uv - __center;
			float __angle = __strength * length(__delta);
			float __x = cos(__angle) * __delta.x - sin(__angle) * __delta.y;
			float __y = sin(__angle) * __delta.x + cos(__angle) * __delta.y;
			return vec2(__x + __center.x + __offset.x, __y + __center.y + __offset.y);
		}
	

void vertex() {
// Output:0

}

void fragment() {
// UVTwirl:2
	vec3 n_in2p1 = vec3(0.50000, 0.50000, 0.00000);
	float n_in2p2 = 10.00000;
	vec3 n_in2p3 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out2p0;
	{
		n_out2p0.xy = Twirl(UV.xy, n_in2p1.xy, n_in2p2, n_in2p3.xy);
	}

// Output:0
	ALBEDO = n_out2p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -491, 90 )
nodes/fragment/2/node = SubResource( 44 )
nodes/fragment/2/position = Vector2( 80, 180 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0 )

[sub_resource type="ShaderMaterial" id=46]
shader = SubResource( 45 )

[sub_resource type="VisualShaderNodeCustom" id=59]
default_input_values = [ 1, 1, 2, 1, 3, 0, 4, 1, 5, 0.3 ]
initialized = true
script = ExtResource( 10 )

[sub_resource type="VisualShaderNodeTexture" id=52]
texture = ExtResource( 12 )
texture_type = 1

[sub_resource type="VisualShaderNodeScalarUniform" id=54]
uniform_name = "columns"
default_value_enabled = true
default_value = 24.0

[sub_resource type="VisualShaderNodeScalarUniform" id=55]
uniform_name = "rows"
default_value_enabled = true
default_value = 1.0

[sub_resource type="VisualShaderNodeScalarUniform" id=56]
uniform_name = "start_frame"
default_value_enabled = true

[sub_resource type="VisualShaderNodeScalarUniform" id=57]
uniform_name = "end_frame"
default_value_enabled = true
default_value = 14.0

[sub_resource type="VisualShaderNodeScalarUniform" id=58]
uniform_name = "animation_speed"
default_value_enabled = true

[sub_resource type="VisualShader" id=50]
code = "shader_type spatial;
render_mode specular_schlick_ggx, async_visible;

uniform float columns = 24;
uniform float rows = 1;
uniform float start_frame = 0;
uniform float end_frame = 14;
uniform float animation_speed = 0;
uniform sampler2D tex_frg_3 : hint_albedo;


// UVFlipbook

		vec2 flipbook_anim(vec2 __uv, int __columns, int __rows, int __starting_frame, int __ending_frame, float __anim_speed) {
			__starting_frame += int(fract(TIME * __anim_speed) * float(__ending_frame));
			float frame = float(clamp(__starting_frame, 0, __ending_frame));
			vec2 offPerFrame = vec2((1.0 / float(__columns)), (1.0 / float(__rows)));
			
			vec2 sprite_size = vec2(__uv.x / float(__columns), __uv.y / float(__rows));
			vec2 current_sprite = vec2(0.0, 1.0 - offPerFrame.y);
			current_sprite.x += frame * offPerFrame.x;
			float rowIndex;
			float _mod = modf(frame/ float(columns), rowIndex);
			current_sprite.y -= rowIndex * offPerFrame.y;
			current_sprite.x -= rowIndex * float(__columns) * offPerFrame.x;
			
			vec2 sprite_uv = (sprite_size + current_sprite);
			
			return sprite_uv;
		}
	

void vertex() {
// Output:0

}

void fragment() {
// ScalarUniform:5
	float n_out5p0 = columns;

// ScalarUniform:6
	float n_out6p0 = rows;

// ScalarUniform:7
	float n_out7p0 = start_frame;

// ScalarUniform:8
	float n_out8p0 = end_frame;

// ScalarUniform:9
	float n_out9p0 = animation_speed;

// UVFlipbook:10
	vec3 n_out10p0;
	{
		n_out10p0.xy = flipbook_anim(UV.xy, int(n_out5p0), int(n_out6p0), int(n_out7p0), int(n_out8p0), n_out9p0 );
	}

// Texture:3
	vec4 tex_frg_3_read = texture(tex_frg_3, n_out10p0.xy);
	vec3 n_out3p0 = tex_frg_3_read.rgb;
	float n_out3p1 = tex_frg_3_read.a;

// Output:0
	ALBEDO = n_out3p0;
	ALPHA = n_out3p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -698.315, 77.4689 )
nodes/fragment/3/node = SubResource( 52 )
nodes/fragment/3/position = Vector2( 100, 140 )
nodes/fragment/5/node = SubResource( 54 )
nodes/fragment/5/position = Vector2( -560, 80 )
nodes/fragment/6/node = SubResource( 55 )
nodes/fragment/6/position = Vector2( -580, 240 )
nodes/fragment/7/node = SubResource( 56 )
nodes/fragment/7/position = Vector2( -580, 380 )
nodes/fragment/8/node = SubResource( 57 )
nodes/fragment/8/position = Vector2( -580, 500 )
nodes/fragment/9/node = SubResource( 58 )
nodes/fragment/9/position = Vector2( -580, 640 )
nodes/fragment/10/node = SubResource( 59 )
nodes/fragment/10/position = Vector2( -216.239, 178.197 )
nodes/fragment/connections = PoolIntArray( 3, 0, 0, 0, 3, 1, 0, 1, 5, 0, 10, 1, 6, 0, 10, 2, 7, 0, 10, 3, 8, 0, 10, 4, 9, 0, 10, 5, 10, 0, 3, 0 )

[sub_resource type="ShaderMaterial" id=51]
shader = SubResource( 50 )
shader_param/columns = 24
shader_param/rows = 1
shader_param/start_frame = 0.0
shader_param/end_frame = 14.0
shader_param/animation_speed = 0.377

[node name="examples3D" type="Spatial"]

[node name="DirectionalLight" type="DirectionalLight" parent="."]
transform = Transform( 1, 0, 0, 0, 0.171482, 0.985187, 0, -0.985187, 0.171482, 0, 2.84318, 0 )

[node name="Shapes" type="Spatial" parent="."]
visible = false

[node name="Circle" type="MeshInstance" parent="Shapes"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.00569987, 0 )
mesh = SubResource( 1 )
skeleton = NodePath("../..")
material/0 = SubResource( 3 )

[node name="RoundedBox" type="MeshInstance" parent="Shapes"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 2.21705, 0.0241101, 0 )
mesh = SubResource( 1 )
skeleton = NodePath("../..")
material/0 = SubResource( 5 )

[node name="Box" type="MeshInstance" parent="Shapes"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 4.59847, 0.0241101, 0 )
mesh = SubResource( 1 )
skeleton = NodePath("../..")
material/0 = SubResource( 7 )

[node name="RotatedBox" type="MeshInstance" parent="Shapes"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 7.17774, 0.0241101, 0 )
mesh = SubResource( 1 )
skeleton = NodePath("../..")
material/0 = SubResource( 9 )

[node name="Rhombus" type="MeshInstance" parent="Shapes"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.00569987, 2.46924 )
mesh = SubResource( 1 )
skeleton = NodePath("../..")
material/0 = SubResource( 22 )

[node name="Trapezoid" type="MeshInstance" parent="Shapes"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 2.20994, 0.00569987, 2.46924 )
mesh = SubResource( 1 )
skeleton = NodePath("../..")
material/0 = SubResource( 25 )

[node name="Parallelogram" type="MeshInstance" parent="Shapes"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 4.59188, 0.00569987, 2.46924 )
mesh = SubResource( 1 )
skeleton = NodePath("../..")
material/0 = SubResource( 30 )

[node name="Triangle" type="MeshInstance" parent="Shapes"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 7.12483, 0.00569987, 2.46924 )
mesh = SubResource( 1 )
skeleton = NodePath("../..")
material/0 = SubResource( 33 )

[node name="UV" type="Spatial" parent="."]

[node name="PolarCoord" type="MeshInstance" parent="UV"]
mesh = SubResource( 40 )
material/0 = SubResource( 42 )

[node name="Twirl" type="MeshInstance" parent="UV"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 2.2275, 0.0289924, 0 )
mesh = SubResource( 43 )
material/0 = SubResource( 46 )

[node name="Flipbook" type="MeshInstance" parent="UV"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 4.42791, 0.0289924, 0 )
mesh = SubResource( 43 )
material/0 = SubResource( 51 )
