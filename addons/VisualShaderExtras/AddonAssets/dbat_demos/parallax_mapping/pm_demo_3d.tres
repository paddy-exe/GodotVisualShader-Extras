[gd_resource type="VisualShader" load_steps=10 format=3 uid="uid://6gmb8xxcbpq"]

[ext_resource type="Script" path="res://addons/VisualShaderExtras/UV/ParallaxMapping.gd" id="1_l416p"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/Utility/TextureStack.gd" id="2_i20sn"]

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_qibuv"]
default_input_values = [2, 32.0, 3, 2, 4, 32, 5, Vector2(1, 1)]
initialized = true
script = ExtResource("1_l416p")

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_clofw"]
parameter_name = "RockHeight"
color_default = 1
texture_filter = 4
texture_repeat = 1

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_g6kfu"]
parameter_name = "RockAlbedo"
texture_type = 1
texture_filter = 4
texture_repeat = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_yygue"]
initialized = true
script = ExtResource("2_i20sn")

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_qnp5j"]
parameter_name = "RockNormalMap"
texture_type = 2
texture_filter = 4
texture_repeat = 1

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_7fnxx"]
default_input_values = [1, Vector2(8, 8), 2, Vector2(0, 0)]
function = 1

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_hw5fa"]
parameter_name = "RockORM"
texture_filter = 4
texture_repeat = 1

[resource]
code = "shader_type spatial;
uniform sampler2D RockHeight : hint_default_black, filter_linear_mipmap, repeat_enable;
uniform sampler2D RockAlbedo : source_color, filter_linear_mipmap, repeat_enable;
uniform sampler2D RockORM : filter_linear_mipmap, repeat_enable;
uniform sampler2D RockNormalMap : hint_normal, filter_linear_mipmap, repeat_enable;



void fragment() {
// UVFunc:7
	vec2 n_in7p1 = vec2(8.00000, 8.00000);
	vec2 n_in7p2 = vec2(0.00000, 0.00000);
	vec2 n_out7p0 = (UV - n_in7p2) * n_in7p1 + n_in7p2;


	vec2 n_out2p0;
	float n_out2p1;
// ParallaxMapping:2
	float n_in2p2 = 32.00000;
	int n_in2p3 = 2;
	int n_in2p4 = 32;
	vec2 n_in2p5 = vec2(1.00000, 1.00000);
	{
		
		// Code taken from Godot's Spatial Shader
		float heightmap_scale = n_in2p2;
		int heightmap_min_layers = n_in2p3;
		int heightmap_max_layers = n_in2p4;
		vec2 heightmap_flip = n_in2p5;
		vec2 base_uv = n_out7p0;
		{
			
			vec3 view_dir = normalize(normalize(-VERTEX)*mat3(TANGENT*heightmap_flip.x,-BINORMAL*heightmap_flip.y,NORMAL));
			float num_layers = mix(float(heightmap_max_layers),float(heightmap_min_layers), abs(dot(vec3(0.0, 0.0, 1.0), view_dir)));
			float layer_depth = 1.0 / num_layers;
			float current_layer_depth = 0.0;
			vec2 P = view_dir.xy * heightmap_scale * 0.01;
			vec2 delta = P / num_layers;
			vec2 ofs = base_uv;
			float depth = 1.0 - texture(RockHeight, ofs).r;
			float current_depth = 0.0;
			while(current_depth < depth) {
				ofs -= delta;
				depth = 1.0 - texture(RockHeight, ofs).r;
				current_depth += layer_depth;
			}
			vec2 prev_ofs = ofs + delta;
			float after_depth  = depth - current_depth;
			float before_depth = ( 1.0 - texture(RockHeight, prev_ofs).r  ) - current_depth + layer_depth;
			float weight = after_depth / (after_depth - before_depth);
			ofs = mix(ofs,prev_ofs,weight);
			
			n_out2p0 = ofs;
			n_out2p1 = layer_depth;
		}
	}


	vec2 n_out5p0;
	vec4 n_out5p1;
	vec3 n_out5p2;
	float n_out5p3;
	float n_out5p4;
	float n_out5p5;
	vec3 n_out5p6;
	float n_out5p7;
// TextureStack:5
	{
		n_out5p1 = textureLod(RockAlbedo, n_out2p0, 0.);
		
		n_out5p3 = textureLod(RockORM, n_out2p0, 0.).r;
		n_out5p4 = textureLod(RockORM, n_out2p0, 0.).g;
		n_out5p5 = textureLod(RockORM, n_out2p0, 0.).b;
		
		n_out5p6 = textureLod(RockNormalMap, n_out2p0, 0.).rgb;
		
		
		n_out5p0 = n_out2p0;
	}


// Output:0
	ALBEDO = vec3(n_out5p1.xyz);
	METALLIC = n_out5p5;
	ROUGHNESS = n_out5p4;
	AO = n_out5p3;
	NORMAL_MAP = n_out5p6;
	NORMAL_MAP_DEPTH = n_out2p1;


}
"
graph_offset = Vector2(-585.374, 13.8933)
nodes/fragment/2/node = SubResource("VisualShaderNodeCustom_qibuv")
nodes/fragment/2/position = Vector2(-260, 180)
nodes/fragment/3/node = SubResource("VisualShaderNodeTexture2DParameter_clofw")
nodes/fragment/3/position = Vector2(-840, 80)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture2DParameter_g6kfu")
nodes/fragment/4/position = Vector2(-840, 360)
nodes/fragment/5/node = SubResource("VisualShaderNodeCustom_yygue")
nodes/fragment/5/position = Vector2(80, 300)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture2DParameter_qnp5j")
nodes/fragment/6/position = Vector2(-840, 920)
nodes/fragment/7/node = SubResource("VisualShaderNodeUVFunc_7fnxx")
nodes/fragment/7/position = Vector2(-520, 80)
nodes/fragment/8/node = SubResource("VisualShaderNodeTexture2DParameter_hw5fa")
nodes/fragment/8/position = Vector2(-840, 640)
nodes/fragment/connections = PackedInt32Array(3, 0, 2, 1, 2, 0, 5, 0, 5, 1, 0, 0, 4, 0, 5, 1, 2, 1, 0, 10, 6, 0, 5, 6, 7, 0, 2, 0, 5, 6, 0, 9, 8, 0, 5, 2, 5, 3, 0, 6, 5, 4, 0, 3, 5, 5, 0, 2)
