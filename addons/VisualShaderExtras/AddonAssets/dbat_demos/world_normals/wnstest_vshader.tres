[gd_resource type="VisualShader" load_steps=30 format=3]

[ext_resource type="Script" path="res://addons/VisualShaderExtras/WorldNormal/WorldNormalMapMixer.gd" id="1_bkjt5"]
[ext_resource type="Texture2D" uid="uid://dq3jk3ga3vpy8" path="res://addons/VisualShaderExtras/AddonAssets/dbat_demos/_resources/textures/rock_orm_albedo.png" id="2_5m13w"]
[ext_resource type="Texture2D" uid="uid://dhfswrmammtnt" path="res://addons/VisualShaderExtras/AddonAssets/dbat_demos/_resources/textures/moss_orm_albedo.png" id="3_3y52a"]

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_avdsx"]
default_input_values = [2, Vector3(0, 1, 0), 3, 0.0, 4, 0.0]
initialized = true
script = ExtResource("1_bkjt5")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_wsq0g"]
source = 5
texture = ExtResource("3_3y52a")
texture_type = 1

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_nfigh"]
parameter_name = "ForeGroundAlbedo"
texture_type = 1
texture_filter = 2

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_dmu1v"]
parameter_name = "BackgroundAlbedo"
texture_type = 1
texture_filter = 2

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_ywjnk"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1), 2, 0.5]
op_type = 4

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_kaaba"]
parameter_name = "ForeGroundORM"
texture_filter = 2

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_01wcq"]
source = 5
texture = ExtResource("3_3y52a")
texture_type = 1

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_seenw"]
parameter_name = "BackgroundORM"
texture_filter = 2

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_ao2oe"]
source = 5
texture = ExtResource("3_3y52a")
texture_type = 1

[sub_resource type="VisualShaderNodeComment" id="VisualShaderNodeComment_gwat6"]
size = Vector2(799.435, 691.375)
title = "Albedos"

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_2f28t"]
parameter_name = "BackgroundNormalMap"
texture_type = 2
texture_filter = 2

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_7uyoh"]
parameter_name = "ForegroundNormalMap"
texture_type = 2
texture_filter = 2

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_328ma"]
source = 5

[sub_resource type="VisualShaderNodeColorFunc" id="VisualShaderNodeColorFunc_uj8gt"]

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_f3a5i"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1), 2, 0.5]
op_type = 4

[sub_resource type="VisualShaderNodeVectorDecompose" id="VisualShaderNodeVectorDecompose_0gmxc"]

[sub_resource type="VisualShaderNodeComment" id="VisualShaderNodeComment_2o202"]
size = Vector2(1248.02, 656.815)
title = "ORM"

[sub_resource type="VisualShaderNodeComment" id="VisualShaderNodeComment_55bab"]
size = Vector2(708.197, 390.703)
title = "Foreground Normal Map"

[sub_resource type="VisualShaderNodeComment" id="VisualShaderNodeComment_sworv"]
size = Vector2(827.636, 854.774)
title = "World Normal Mixer Mask"

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_pyo5e"]
default_input_values = [0, 0.0, 1, 5.023]
operator = 2

[sub_resource type="VisualShaderNodeComment" id="VisualShaderNodeComment_jaa3j"]
size = Vector2(454.2, 369.4)
title = "Mix Normal Map Stuff"

[sub_resource type="VisualShaderNodeComment" id="VisualShaderNodeComment_mcwss"]
size = Vector2(319.8, 241)
title = "Mix Fore and Background Albedos"

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_husir"]
source = 5
texture = ExtResource("2_5m13w")
texture_type = 1

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_e8a6r"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1), 2, 0.5]
op_type = 4

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_yshv2"]
parameter_name = "Offset"
default_value_enabled = true

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_7jdar"]
parameter_name = "Fade"
hint = 1
default_value_enabled = true

[resource]
code = "shader_type spatial;
uniform sampler2D BackgroundAlbedo : source_color, filter_linear;
uniform sampler2D ForeGroundAlbedo : source_color, filter_linear;
uniform sampler2D BackgroundNormalMap : hint_normal, filter_linear;
uniform float Offset = 0;
uniform float Fade : hint_range(0, 1) = 0;
uniform sampler2D BackgroundORM : filter_linear;
uniform sampler2D ForeGroundORM : filter_linear;
uniform sampler2D ForegroundNormalMap : hint_normal, filter_linear;


// World_Normal_Map_Mixer

// Godot strips the z value from imported Normal Maps.
// It does this for two reasons:
// 1. Obtaining better compression because the z can be calculated by shader.
//    Compression boosts speed of CPU to GPU transfer.
// 2. On mobile devices they do not do that calculation. They either ignore the z
//    or do some other calculation, but the normal one (below) is apparently too slow
//    or power-hungry for mobile devices.
//
// Create the texture to pass in like this:
//  vec3 normal_map_texture = textureLod(normal_texture_sampler, inuv, 0.).rgb;
vec3 normal_map_add_z_VisualShaderExtrasWorldNormalWorldNormalMapMixer(
	vec3 normal_map_texture, 
	vec2 inuv,
	vec3 _TANGENT,
	vec3 _BINORMAL,
	vec3 _NORMAL) {
	// 2022 Kasper Arnklit Frandsen - Public Domain - No Rights Reserved

	// Unpack the background normal map.
	vec3 bg_normal = normal_map_texture * 2.0 - 1.0;

	// Recalculate z-component of the normal map with the Pythagorean theorem.
	bg_normal.z = sqrt(1.0 - bg_normal.x * bg_normal.x - bg_normal.y * bg_normal.y);

	// Apply the tangent-space normal map to the view-space normals.
	vec3 normal_applied = bg_normal.x * _TANGENT + bg_normal.y * _BINORMAL + bg_normal.z * _NORMAL;
	return normal_applied;
}


// Create the texture to pass in like this:
//  vec3 normal_map_texture = textureLod(normal_texture_sampler, inuv, 0.).rgb;
float world_normal_mask_VisualShaderExtrasWorldNormalWorldNormalMapMixer(
	vec3 normal_map_texture, 
	vec3 vector_direction,
	mat4 _VIEW_MATRIX
	) {
	// 2022 Kasper Arnklit Frandsen - Public Domain - No Rights Reserved
	// Convert the world up vector into view-space with a matrix multiplication.
	vec3 up_vector_viewspace = mat3(_VIEW_MATRIX) * vector_direction;

	// Compare the up vector to the surface with the normal map applied using the dot product.
	float dot_product = dot(up_vector_viewspace, normal_map_texture);

	return dot_product;
}


float mask_blend_VisualShaderExtrasWorldNormalWorldNormalMapMixer(float offset, float fade, float mask_in) {
	offset *= -1.;

	// 2022 Kasper Arnklit Frandsen - Public Domain - No Rights Reserved
	return smoothstep(offset - fade, offset + fade, mask_in);
}



void fragment() {
	vec4 n_out5p0;
// Texture2D:5
	n_out5p0 = texture(BackgroundAlbedo, UV);


	vec4 n_out11p0;
// Texture2D:11
	n_out11p0 = texture(ForeGroundAlbedo, UV);


// FloatParameter:8
	float n_out8p0 = Offset;


// FloatParameter:9
	float n_out9p0 = Fade;


	float n_out10p0;
	vec3 n_out10p1;
// World_Normal_Map_Mixer:10
	vec3 n_in10p2 = vec3(0.00000, 1.00000, 0.00000);
	{
		
		vec3 normal_map_texture = textureLod(BackgroundNormalMap, UV, 0.).rgb;
		
		vec3 normal_applied = normal_map_add_z_VisualShaderExtrasWorldNormalWorldNormalMapMixer(
			normal_map_texture, 
			UV,
			TANGENT,
			BINORMAL,
			NORMAL);  
		float mask = world_normal_mask_VisualShaderExtrasWorldNormalWorldNormalMapMixer(
			normal_applied,
			n_in10p2,
			VIEW_MATRIX);
		float blended_mask = mask_blend_VisualShaderExtrasWorldNormalWorldNormalMapMixer(n_out8p0, n_out9p0, mask);
		n_out10p0 = blended_mask;
		n_out10p1 = normal_map_texture;
			
	}


// Mix:6
	vec3 n_out6p0 = mix(vec3(n_out5p0.xyz), vec3(n_out11p0.xyz), n_out10p0);


	vec4 n_out18p0;
// Texture2D:18
	n_out18p0 = texture(BackgroundORM, UV);


	vec4 n_out16p0;
// Texture2D:16
	n_out16p0 = texture(ForeGroundORM, UV);


// Mix:27
	vec3 n_out27p0 = mix(vec3(n_out18p0.xyz), vec3(n_out16p0.xyz), n_out10p0);


// VectorDecompose:28
	float n_out28p0 = n_out27p0.x;
	float n_out28p1 = n_out27p0.y;
	float n_out28p2 = n_out27p0.z;


	vec4 n_out21p0;
// Texture2D:21
	n_out21p0 = texture(ForegroundNormalMap, UV);


// Mix:14
	vec3 n_out14p0 = mix(n_out10p1, vec3(n_out21p0.xyz), n_out10p0);


	vec3 n_out22p0;
// ColorFunc:22
	{
		vec3 c = n_out6p0;
		float max1 = max(c.r, c.g);
		float max2 = max(max1, c.b);
		n_out22p0 = vec3(max2, max2, max2);
	}


// FloatOp:32
	float n_in32p1 = 5.02300;
	float n_out32p0 = n_out22p0.x * n_in32p1;


// Output:0
	ALBEDO = n_out6p0;
	METALLIC = n_out28p2;
	ROUGHNESS = n_out28p1;
	AO = n_out28p0;
	NORMAL_MAP = n_out14p0;
	NORMAL_MAP_DEPTH = n_out32p0;


}
"
nodes/fragment/0/position = Vector2(1600, 400)
nodes/fragment/2/node = SubResource("VisualShaderNodeTexture2DParameter_2f28t")
nodes/fragment/2/position = Vector2(-820, 220)
nodes/fragment/5/node = SubResource("VisualShaderNodeTexture_husir")
nodes/fragment/5/position = Vector2(240, -220)
nodes/fragment/6/node = SubResource("VisualShaderNodeMix_e8a6r")
nodes/fragment/6/position = Vector2(820, -80)
nodes/fragment/8/node = SubResource("VisualShaderNodeFloatParameter_yshv2")
nodes/fragment/8/position = Vector2(-780, 460)
nodes/fragment/9/node = SubResource("VisualShaderNodeFloatParameter_7jdar")
nodes/fragment/9/position = Vector2(-780, 680)
nodes/fragment/10/node = SubResource("VisualShaderNodeCustom_avdsx")
nodes/fragment/10/position = Vector2(-480, 460)
nodes/fragment/11/node = SubResource("VisualShaderNodeTexture_wsq0g")
nodes/fragment/11/position = Vector2(240, -400)
nodes/fragment/12/node = SubResource("VisualShaderNodeTexture2DParameter_nfigh")
nodes/fragment/12/position = Vector2(-100, -500)
nodes/fragment/13/node = SubResource("VisualShaderNodeTexture2DParameter_dmu1v")
nodes/fragment/13/position = Vector2(-120, -220)
nodes/fragment/14/node = SubResource("VisualShaderNodeMix_ywjnk")
nodes/fragment/14/position = Vector2(1000, 240)
nodes/fragment/15/node = SubResource("VisualShaderNodeTexture2DParameter_kaaba")
nodes/fragment/15/position = Vector2(280, 1020)
nodes/fragment/16/node = SubResource("VisualShaderNodeTexture_01wcq")
nodes/fragment/16/position = Vector2(600, 1020)
nodes/fragment/17/node = SubResource("VisualShaderNodeTexture2DParameter_seenw")
nodes/fragment/17/position = Vector2(280, 740)
nodes/fragment/18/node = SubResource("VisualShaderNodeTexture_ao2oe")
nodes/fragment/18/position = Vector2(600, 740)
nodes/fragment/19/node = SubResource("VisualShaderNodeComment_gwat6")
nodes/fragment/19/position = Vector2(-220, -580)
nodes/fragment/20/node = SubResource("VisualShaderNodeTexture2DParameter_7uyoh")
nodes/fragment/20/position = Vector2(220, 300)
nodes/fragment/21/node = SubResource("VisualShaderNodeTexture_328ma")
nodes/fragment/21/position = Vector2(580, 300)
nodes/fragment/22/node = SubResource("VisualShaderNodeColorFunc_uj8gt")
nodes/fragment/22/position = Vector2(1000, 400)
nodes/fragment/27/node = SubResource("VisualShaderNodeMix_f3a5i")
nodes/fragment/27/position = Vector2(960, 860)
nodes/fragment/28/node = SubResource("VisualShaderNodeVectorDecompose_0gmxc")
nodes/fragment/28/position = Vector2(1140, 860)
nodes/fragment/29/node = SubResource("VisualShaderNodeComment_2o202")
nodes/fragment/29/position = Vector2(180, 680)
nodes/fragment/30/node = SubResource("VisualShaderNodeComment_55bab")
nodes/fragment/30/position = Vector2(140, 220)
nodes/fragment/31/node = SubResource("VisualShaderNodeComment_sworv")
nodes/fragment/31/position = Vector2(-880, 140)
nodes/fragment/32/node = SubResource("VisualShaderNodeFloatOp_pyo5e")
nodes/fragment/32/position = Vector2(1160, 400)
nodes/fragment/33/node = SubResource("VisualShaderNodeComment_jaa3j")
nodes/fragment/33/position = Vector2(880, 180)
nodes/fragment/34/node = SubResource("VisualShaderNodeComment_mcwss")
nodes/fragment/34/position = Vector2(720, -140)
nodes/fragment/connections = PackedInt32Array(2, 0, 10, 1, 8, 0, 10, 3, 9, 0, 10, 4, 10, 0, 6, 2, 6, 0, 0, 0, 12, 0, 11, 2, 13, 0, 5, 2, 11, 0, 6, 1, 5, 0, 6, 0, 15, 0, 16, 2, 17, 0, 18, 2, 20, 0, 21, 2, 14, 0, 0, 9, 10, 0, 14, 2, 21, 0, 14, 1, 10, 1, 14, 0, 6, 0, 22, 0, 10, 0, 27, 2, 16, 0, 27, 1, 18, 0, 27, 0, 27, 0, 28, 0, 28, 0, 0, 6, 28, 1, 0, 3, 28, 2, 0, 2, 22, 0, 32, 0, 32, 0, 0, 10)
