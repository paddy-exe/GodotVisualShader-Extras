[gd_resource type="VisualShader" load_steps=4 format=3 uid="uid://baxudfnqjjal8"]

[ext_resource type="Script" path="res://addons/VisualShaderExtras/dbat_dev/hexagonal/BC_seamless_hexagon.gd" id="1_fkrro"]

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_nbn2u"]
initialized = true
script = ExtResource("1_fkrro")

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_vcklp"]
parameter_name = "Texture2DParameter"
texture_type = 1

[resource]
code = "shader_type spatial;
uniform sampler2D Texture2DParameter : source_color;


// SeamlessHexagonTiling

uniform vec2 HexTiling = vec2(6.000000, 6.000000);
uniform float HexFocus = 2;
uniform sampler2D Albedo : source_color, filter_linear, repeat_enable;
uniform sampler2D NormalMap : hint_normal, filter_linear, repeat_enable;


vec2 HexagonalTilingDbat_Translate(vec2 _UV, vec2 amount){ return _UV + amount; }
vec2 HexagonalTilingDbat_Scale(vec2 _UV, vec2 amount){ return _UV * amount; }
vec2 HexagonalTilingDbat_Rotate(vec2 _uv, float _angle){
	_uv = mat2( vec2(cos(_angle), -sin(_angle)), vec2(sin(_angle), cos(_angle)) ) * _uv;
	return _uv ;

}
vec3 HexagonalTilingDbat_Hash2(vec2 _UV){
	return fract(sin(vec3(
		dot(vec3(_UV.x, _UV.y, _UV.x), vec3(127.09, 311.7, 74.69)), 
		dot(vec3(_UV.y, _UV.x, _UV.x), vec3(269.5, 183.3, 246.1)),
		dot(vec3(_UV.x, _UV.y, _UV.y), vec3(113.5, 271.89, 124.59))
	)) * 43758.5453);
}
vec2 HexagonalTilingDbat_Transform(vec2 _UV, float rotation, vec2 scale, vec2 translation){
	return HexagonalTilingDbat_Translate(
		HexagonalTilingDbat_Scale(
			HexagonalTilingDbat_Rotate(_UV, rotation),
			 scale),
			 translation);
}
// TEX_REPEAT is only passed-in so it can reach another function that needs it.
vec2 HexagonalTilingDbat_RandomTransform(vec2 _UV, vec2 seed, out float rotation) {
	vec3 hash = HexagonalTilingDbat_Hash2(seed);
	float rot = mix(-PI, PI, fract(hash.b*16.));
	float scl = mix(.8, 1.2, hash.b);
	vec2 _rotated = HexagonalTilingDbat_Transform(_UV, rot, vec2(scl), hash.xy);
	rotation = rot;
	return _rotated;
}

vec2 HexagonalTilingDbat_FixNormalMap(vec2 _rg, float _unrot) {
	float rot = TAU -_unrot;
	_rg -= vec2(0.5); //This is the special voodoo. Rodzilla said NormalMaps are centered in color space. Shrug.
	_rg = HexagonalTilingDbat_Rotate(_rg, rot);
	_rg += vec2(0.5);
	 return _rg;
}

vec3 HexagonalTilingDbat_TransformAndSample(vec2 _uv, vec2 _seed, float _mask, sampler2D _sam, out vec2 _transformed_uv, out float _rotation ) {
	//float out_rotation_1 = 0.;
	_transformed_uv=HexagonalTilingDbat_RandomTransform(_uv, _seed, _rotation);
	vec4 _read = texture(_sam, _transformed_uv);
	return vec3(_read.xyz) * vec3(_mask);
}


void fragment() {
	vec2 n_out2p0;
	vec3 n_out2p1;
	vec3 n_out2p2;
	vec3 n_out2p3;
	vec3 n_out2p4;
	vec3 n_out2p5;
// Output:0
	ALBEDO = vec3(n_out2p0, 0.0);


}
"
graph_offset = Vector2(-657.545, 59.7851)
nodes/fragment/2/node = SubResource("VisualShaderNodeCustom_nbn2u")
nodes/fragment/2/position = Vector2(-120, 140)
nodes/fragment/3/node = SubResource("VisualShaderNodeTexture2DParameter_vcklp")
nodes/fragment/3/position = Vector2(-680, 140)
nodes/fragment/connections = PackedInt32Array(2, 0, 0, 0, 3, 0, 2, 1)
