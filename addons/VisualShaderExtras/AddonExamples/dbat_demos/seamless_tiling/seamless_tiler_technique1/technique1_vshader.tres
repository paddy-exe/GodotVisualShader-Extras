[gd_resource type="VisualShader" load_steps=7 format=3]

[ext_resource type="Script" path="res://addons/VisualShaderExtras/SeamlessTiling/seamless_tiler_technique1.gd" id="1_bpdut"]

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_qimeh"]
parameter_name = "albedo"
texture_type = 1

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_bd6lt"]
parameter_name = "norm"
texture_type = 2

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_e1gub"]
default_input_values = [0, 8.0]
initialized = true
script = ExtResource("1_bpdut")

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_grwja"]
constant = 2.0

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_1q02o"]
parameter_name = "ORM"

[resource]
code = "shader_type spatial;
uniform sampler2D albedo : source_color;
uniform sampler2D norm : hint_normal;
uniform sampler2D ORM;


// IQSeamlessTilingTechnique1

// The MIT License
// Copyright Â© 2015 Inigo Quilez
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

vec4 hash4_VisualShaderNodeIQSeamlessTilingTechnique1( vec2 p ) { return fract(sin(vec4( 1.0+dot(p,vec2(37.0,17.0)), 
											  2.0+dot(p,vec2(11.0,47.0)),
											  3.0+dot(p,vec2(41.0,29.0)),
											  4.0+dot(p,vec2(23.0,31.0))))*103.0); }

vec4 textureNoTile_VisualShaderNodeIQSeamlessTilingTechnique1( sampler2D samp, in vec2 uv )
{
	
	// OK
	vec2 iuv = floor( uv );
	vec2 fuv = fract( uv );
	vec4 ofa = hash4_VisualShaderNodeIQSeamlessTilingTechnique1( iuv + vec2(0.0,0.0) );
	vec4 ofb = hash4_VisualShaderNodeIQSeamlessTilingTechnique1( iuv + vec2(1.0,0.0) );
	vec4 ofc = hash4_VisualShaderNodeIQSeamlessTilingTechnique1( iuv + vec2(0.0,1.0) );
	vec4 ofd = hash4_VisualShaderNodeIQSeamlessTilingTechnique1( iuv + vec2(1.0,1.0) );
	
	vec2 ddx = dFdx( uv );
	vec2 ddy = dFdy( uv );
	
	// transform per-tile uvs
	ofa.zw = sign(ofa.zw-0.5);
	ofb.zw = sign(ofb.zw-0.5);
	ofc.zw = sign(ofc.zw-0.5);
	ofd.zw = sign(ofd.zw-0.5);
	
	// uv's, and derivarives (for correct mipmapping)
	vec2 uva = uv*ofa.zw + ofa.xy; vec2 ddxa = ddx*ofa.zw; vec2 ddya = ddy*ofa.zw;
	vec2 uvb = uv*ofb.zw + ofb.xy; vec2 ddxb = ddx*ofb.zw; vec2 ddyb = ddy*ofb.zw;
	vec2 uvc = uv*ofc.zw + ofc.xy; vec2 ddxc = ddx*ofc.zw; vec2 ddyc = ddy*ofc.zw;
	vec2 uvd = uv*ofd.zw + ofd.xy; vec2 ddxd = ddx*ofd.zw; vec2 ddyd = ddy*ofd.zw;
	
	// fetch and blend
	vec2 b = smoothstep(0.25,0.75,fuv);
	return mix( mix( textureGrad( samp, uva, ddxa, ddya ), 
					 textureGrad( samp, uvb, ddxb, ddyb ), b.x ), 
				mix( textureGrad( samp, uvc, ddxc, ddyc ),
					 textureGrad( samp, uvd, ddxd, ddyd ), b.x), b.y );
}

void fragment() {
	vec3 n_out5p0;
	vec3 n_out5p1;
	float n_out5p2;
	float n_out5p3;
	float n_out5p4;
// IQSeamlessTilingTechnique1:5
	float n_in5p0 = 8.00000;
	{
		
			vec2 uv = UV * n_in5p0;
			n_out5p0 = textureNoTile_VisualShaderNodeIQSeamlessTilingTechnique1(albedo, uv).rgb;n_out5p1 = textureNoTile_VisualShaderNodeIQSeamlessTilingTechnique1(norm, uv).rgb;n_out5p2 = textureNoTile_VisualShaderNodeIQSeamlessTilingTechnique1(ORM, uv).r;n_out5p3 = textureNoTile_VisualShaderNodeIQSeamlessTilingTechnique1(ORM, uv).g;n_out5p4 = textureNoTile_VisualShaderNodeIQSeamlessTilingTechnique1(ORM, uv).b;
	}


// FloatConstant:6
	float n_out6p0 = 2.000000;


// Output:0
	ALBEDO = n_out5p0;
	METALLIC = n_out5p4;
	ROUGHNESS = n_out5p3;
	AO = n_out5p2;
	NORMAL_MAP = n_out5p1;
	NORMAL_MAP_DEPTH = n_out6p0;


}
"
graph_offset = Vector2(-153.014, 120.452)
nodes/fragment/0/position = Vector2(540, 200)
nodes/fragment/3/node = SubResource("VisualShaderNodeTexture2DParameter_qimeh")
nodes/fragment/3/position = Vector2(-520, 60)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture2DParameter_bd6lt")
nodes/fragment/4/position = Vector2(-520, 360)
nodes/fragment/5/node = SubResource("VisualShaderNodeCustom_e1gub")
nodes/fragment/5/position = Vector2(0, 280)
nodes/fragment/6/node = SubResource("VisualShaderNodeFloatConstant_grwja")
nodes/fragment/6/position = Vector2(100, 460)
nodes/fragment/7/node = SubResource("VisualShaderNodeTexture2DParameter_1q02o")
nodes/fragment/7/position = Vector2(-540, 600)
nodes/fragment/connections = PackedInt32Array(3, 0, 5, 1, 4, 0, 5, 2, 7, 0, 5, 3, 5, 0, 0, 0, 5, 1, 0, 9, 5, 2, 0, 6, 5, 3, 0, 3, 5, 4, 0, 2, 6, 0, 0, 10)
