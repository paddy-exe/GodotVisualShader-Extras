[gd_scene load_steps=251 format=3 uid="uid://cgepf8xhbtfu7"]

[ext_resource type="Texture2D" uid="uid://dkwktkcfupn2y" path="res://addons/VisualShaderExtras/AddonExamples/Resources/icon.svg" id="1_esb2p"]
[ext_resource type="Texture2D" uid="uid://im3imr3u2j1y" path="res://addons/VisualShaderExtras/AddonExamples/Resources/VisualShaderExtras-Logo-128x128.png" id="2_tmy5s"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/BlendModes/blend_modes.gd" id="3_tnd0r"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/Procedural/Shapes/Box.gd" id="8_hykxv"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/Procedural/Shapes/HyperbolicCross.gd" id="17_e4l87"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/Procedural/Shapes/PreciseHyperbolicCross.gd" id="17_l4qqe"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/Procedural/Checkerboard.gd" id="27_4j47k"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/Procedural/PSRD-Noise2D.gd" id="27_xa0ky"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/Procedural/PSRD-Noise3D.gd" id="28_bj3bh"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/Procedural/RadialGradient.gd" id="29_1apco"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/ColorAdjustment/HSVAdjustment.gd" id="30_e28ye"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/Procedural/Shapes/Circle.gd" id="32_1rwir"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/Procedural/Shapes/Parallelogram.gd" id="33_k8iav"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/Procedural/Shapes/Rhombus.gd" id="34_t306u"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/Procedural/Shapes/PreciseBox.gd" id="35_laxki"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/Procedural/Shapes/RoundedBox.gd" id="36_8mm01"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/Procedural/Shapes/Trapezoid.gd" id="37_glmoa"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/Procedural/Shapes/Triangle.gd" id="38_y2sll"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/UV/UVTwirl.gd" id="39_3gamp"]
[ext_resource type="Texture2D" uid="uid://bn8avh1dk262a" path="res://addons/VisualShaderExtras/AddonExamples/Resources/DinoSprites - vita.png" id="41_gg1i3"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/UV/UVFlipbook.gd" id="41_k7n2j"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/UV/UVTiler.gd" id="42_bg3u1"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/UV/UVRotate.gd" id="43_1ggnt"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/Wave/TriangleWave.gd" id="44_w5004"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/Wave/SquareWave.gd" id="45_u3ae5"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/Wave/SawtoothWave.gd" id="46_offdw"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/Wave/SineWave.gd" id="47_ehqs0"]

[sub_resource type="VisualShaderNodeTexture" id="67"]
texture = ExtResource("1_esb2p")
texture_type = 1

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_pj0n4"]
texture = ExtResource("2_tmy5s")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_vhkdd"]
default_input_values = [2, 0.5]
initialized = true
properties = "0,18;"
script = ExtResource("3_tnd0r")

[sub_resource type="VisualShader" id="68"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_6 : source_color;
uniform sampler2D tex_frg_4 : source_color;


// BlendModes

				vec3 blend_normal(vec3 c1, vec3 c2, float opacity) {
					return opacity*c1 + (1.0-opacity)*c2;
				}
			

void fragment() {
// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, UV);


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


	vec3 n_out7p0;
// BlendModes:7
	float n_in7p2 = 0.50000;
	{
		n_out7p0.rgb = blend_normal(vec3(n_out6p0.xyz).rgb, vec3(n_out4p0.xyz).rgb, n_in7p2);
	}


// Output:0
	COLOR.rgb = n_out7p0;


}
"
graph_offset = Vector2(-66.24, 46.08)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(860, 240)
nodes/fragment/4/node = SubResource("67")
nodes/fragment/4/position = Vector2(-240, 320)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_pj0n4")
nodes/fragment/6/position = Vector2(-240, 60)
nodes/fragment/7/node = SubResource("VisualShaderNodeCustom_vhkdd")
nodes/fragment/7/position = Vector2(361.16, 253.6)
nodes/fragment/connections = PackedInt32Array(6, 0, 7, 0, 4, 0, 7, 1, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="69"]
shader = SubResource("68")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_yy23m"]
texture = ExtResource("1_esb2p")
texture_type = 1

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_fxobl"]
texture = ExtResource("2_tmy5s")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_5ef3c"]
default_input_values = [2, 0.5]
initialized = true
properties = "0,5;"
script = ExtResource("3_tnd0r")

[sub_resource type="VisualShader" id="VisualShader_my0mx"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_6 : source_color;
uniform sampler2D tex_frg_4 : source_color;


// BlendModes

				// 3D Noise with friendly permission by Inigo Quilez
				vec3 hash_noise_range( vec3 p ) {
					p *= mat3(vec3(127.1, 311.7, -53.7), vec3(269.5, 183.3, 77.1), vec3(-301.7, 27.3, 215.3));
					return 2.0 * fract(fract(p)*4375.55) -1.;
				}

				float random_range(vec3 seed, float min, float max) {
					return mix(min, max, hash_noise_range(seed).x);
				}
				
				vec3 blend_dissolve(vec3 seed, vec3 c1, vec3 c2, float opacity) {
					if (random_range(vec3(seed), 0.0, 1.0) < opacity) {
						return c1;
					} else {
						return c2;
					}
				}
			

void fragment() {
// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, UV);


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


	vec3 n_out7p0;
// BlendModes:7
	float n_in7p2 = 0.50000;
	{
		n_out7p0.rgb = blend_dissolve(vec3(n_out4p0.xyz).rgb, vec3(n_out6p0.xyz).rgb, vec3(n_out4p0.xyz).rgb, n_in7p2);
	}


// Output:0
	COLOR.rgb = n_out7p0;


}
"
graph_offset = Vector2(-38.4, 60.84)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(880, 220)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_yy23m")
nodes/fragment/4/position = Vector2(-220, 520)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_fxobl")
nodes/fragment/6/position = Vector2(-240, 60)
nodes/fragment/7/node = SubResource("VisualShaderNodeCustom_5ef3c")
nodes/fragment/7/position = Vector2(300, 260)
nodes/fragment/connections = PackedInt32Array(6, 0, 7, 0, 4, 0, 7, 1, 4, 0, 7, 3, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_enr5s"]
shader = SubResource("VisualShader_my0mx")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_sxjik"]
texture = ExtResource("1_esb2p")
texture_type = 1

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_ik4a7"]
texture = ExtResource("2_tmy5s")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_xrleu"]
default_input_values = [2, 0.5]
initialized = true
properties = "0,21;"
script = ExtResource("3_tnd0r")

[sub_resource type="VisualShader" id="VisualShader_unmd3"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_6 : source_color;
uniform sampler2D tex_frg_4 : source_color;


// BlendModes

				vec3 blend_screen(vec3 c1, vec3 c2, float opacity) {
					return opacity*(1.0-(1.0-c1)*(1.0-c2)) + (1.0-opacity)*c2;
				}
			

void fragment() {
// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, UV);


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


	vec3 n_out7p0;
// BlendModes:7
	float n_in7p2 = 0.50000;
	{
		n_out7p0.rgb = blend_screen(vec3(n_out6p0.xyz).rgb, vec3(n_out4p0.xyz).rgb, n_in7p2);
	}


// Output:0
	COLOR.rgb = n_out7p0;


}
"
graph_offset = Vector2(-42.24, 52.8)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(840, 240)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_sxjik")
nodes/fragment/4/position = Vector2(-240, 320)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_ik4a7")
nodes/fragment/6/position = Vector2(-240, 60)
nodes/fragment/7/node = SubResource("VisualShaderNodeCustom_xrleu")
nodes/fragment/7/position = Vector2(334.52, 341.6)
nodes/fragment/connections = PackedInt32Array(6, 0, 7, 0, 4, 0, 7, 1, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_wu7lk"]
shader = SubResource("VisualShader_unmd3")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_rt0m3"]
texture = ExtResource("1_esb2p")
texture_type = 1

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_xhs62"]
texture = ExtResource("2_tmy5s")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_108dd"]
default_input_values = [2, 0.5]
initialized = true
properties = "0,19;"
script = ExtResource("3_tnd0r")

[sub_resource type="VisualShader" id="VisualShader_mvyjv"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_6 : source_color;
uniform sampler2D tex_frg_4 : source_color;


// BlendModes

				float blend_overlay_f(float c1, float c2) {
					return (c1 < 0.5) ? (2.0*c1*c2) : (1.0-2.0*(1.0-c1)*(1.0-c2));
				}

				vec3 blend_overlay(vec3 c1, vec3 c2, float opacity) {
					return opacity*vec3(blend_overlay_f(c1.x, c2.x), blend_overlay_f(c1.y, c2.y), blend_overlay_f(c1.z, c2.z)) + (1.0-opacity)*c2;
				}
			

void fragment() {
// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, UV);


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


	vec3 n_out7p0;
// BlendModes:7
	float n_in7p2 = 0.50000;
	{
		n_out7p0.rgb = blend_overlay(vec3(n_out6p0.xyz).rgb, vec3(n_out4p0.xyz).rgb, n_in7p2);
	}


// Output:0
	COLOR.rgb = n_out7p0;


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(800, 260)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_rt0m3")
nodes/fragment/4/position = Vector2(-240, 320)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_xhs62")
nodes/fragment/6/position = Vector2(-240, 60)
nodes/fragment/7/node = SubResource("VisualShaderNodeCustom_108dd")
nodes/fragment/7/position = Vector2(340, 260)
nodes/fragment/connections = PackedInt32Array(6, 0, 7, 0, 4, 0, 7, 1, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_kkpnf"]
shader = SubResource("VisualShader_mvyjv")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_8w4nd"]
texture = ExtResource("1_esb2p")
texture_type = 1

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_8firm"]
texture = ExtResource("2_tmy5s")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_5runc"]
default_input_values = [2, 0.5]
initialized = true
properties = "0,11;"
script = ExtResource("3_tnd0r")

[sub_resource type="VisualShader" id="VisualShader_ne8xj"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_6 : source_color;
uniform sampler2D tex_frg_4 : source_color;


// BlendModes

				float blend_overlay_f(float c1, float c2) {
					return (c1 < 0.5) ? (2.0*c1*c2) : (1.0-2.0*(1.0-c1)*(1.0-c2));
				}
				
				vec3 blend_overlay(vec3 c1, vec3 c2, float opacity) {
					return opacity*vec3(blend_overlay_f(c1.x, c2.x), blend_overlay_f(c1.y, c2.y), blend_overlay_f(c1.z, c2.z)) + (1.0-opacity)*c2;
				}
				
				vec3 blend_hard_light(vec3 c1, vec3 c2, float opacity) {
					return opacity*0.5*(c1*c2+blend_overlay(c1, c2, 1.0)) + (1.0-opacity)*c2;
				}
			

void fragment() {
// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, UV);


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


	vec3 n_out7p0;
// BlendModes:7
	float n_in7p2 = 0.50000;
	{
		n_out7p0.rgb = blend_hard_light(vec3(n_out6p0.xyz).rgb, vec3(n_out4p0.xyz).rgb, n_in7p2);
	}


// Output:0
	COLOR.rgb = n_out7p0;


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(800, 240)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_8w4nd")
nodes/fragment/4/position = Vector2(-240, 320)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_8firm")
nodes/fragment/6/position = Vector2(-240, 60)
nodes/fragment/7/node = SubResource("VisualShaderNodeCustom_5runc")
nodes/fragment/7/position = Vector2(280, 280)
nodes/fragment/connections = PackedInt32Array(6, 0, 7, 0, 4, 0, 7, 1, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_lkbav"]
shader = SubResource("VisualShader_ne8xj")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_elge6"]
texture = ExtResource("1_esb2p")
texture_type = 1

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_6h42k"]
texture = ExtResource("2_tmy5s")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_evl22"]
default_input_values = [2, 0.5]
initialized = true
properties = "0,22;"
script = ExtResource("3_tnd0r")

[sub_resource type="VisualShader" id="VisualShader_peul7"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_6 : source_color;
uniform sampler2D tex_frg_4 : source_color;


// BlendModes

				float blend_soft_light_f(float c1, float c2) {
					return (c2 < 0.5) ? (2.0*c1*c2+c1*c1*(1.0-2.0*c2)) : 2.0*c1*(1.0-c2)+sqrt(c1)*(2.0*c2-1.0);
				}

				vec3 blend_soft_light(vec3 c1, vec3 c2, float opacity) {
					return opacity*vec3(blend_soft_light_f(c1.x, c2.x), blend_soft_light_f(c1.y, c2.y), blend_soft_light_f(c1.z, c2.z)) + (1.0-opacity)*c2;
				}
			

void fragment() {
// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, UV);


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


	vec3 n_out7p0;
// BlendModes:7
	float n_in7p2 = 0.50000;
	{
		n_out7p0.rgb = blend_soft_light(vec3(n_out6p0.xyz).rgb, vec3(n_out4p0.xyz).rgb, n_in7p2);
	}


// Output:0
	COLOR.rgb = n_out7p0;


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(900, 240)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_elge6")
nodes/fragment/4/position = Vector2(-240, 320)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_6h42k")
nodes/fragment/6/position = Vector2(-240, 60)
nodes/fragment/7/node = SubResource("VisualShaderNodeCustom_evl22")
nodes/fragment/7/position = Vector2(408.2, 299.04)
nodes/fragment/connections = PackedInt32Array(6, 0, 7, 0, 4, 0, 7, 1, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_qayvd"]
shader = SubResource("VisualShader_peul7")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_seack"]
texture = ExtResource("1_esb2p")
texture_type = 1

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_ao4mv"]
texture = ExtResource("2_tmy5s")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_7buyj"]
default_input_values = [2, 0.5]
initialized = true
properties = "0,2;"
script = ExtResource("3_tnd0r")

[sub_resource type="VisualShader" id="VisualShader_3ay0w"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_6 : source_color;
uniform sampler2D tex_frg_4 : source_color;


// BlendModes

				float blend_burn_f(float c1, float c2) {
					return (c1==0.0)?c1:max((1.0-((1.0-c2)/c1)),0.0);
				}
				
				vec3 blend_burn(vec3 c1, vec3 c2, float opacity) {
					return opacity*vec3(blend_burn_f(c1.x, c2.x), blend_burn_f(c1.y, c2.y), blend_burn_f(c1.z, c2.z)) + (1.0-opacity)*c2;
				}
			

void fragment() {
// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, UV);


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


	vec3 n_out7p0;
// BlendModes:7
	float n_in7p2 = 0.50000;
	{
		n_out7p0.rgb = blend_burn(vec3(n_out6p0.xyz).rgb, vec3(n_out4p0.xyz).rgb, n_in7p2);
	}


// Output:0
	COLOR.rgb = n_out7p0;


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(1000, 240)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_seack")
nodes/fragment/4/position = Vector2(-240, 320)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_ao4mv")
nodes/fragment/6/position = Vector2(-240, 60)
nodes/fragment/7/node = SubResource("VisualShaderNodeCustom_7buyj")
nodes/fragment/7/position = Vector2(387, 256)
nodes/fragment/connections = PackedInt32Array(6, 0, 7, 0, 4, 0, 7, 1, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_deh4d"]
shader = SubResource("VisualShader_3ay0w")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_kj7vr"]
texture = ExtResource("1_esb2p")
texture_type = 1

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_5cu28"]
texture = ExtResource("2_tmy5s")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_cnang"]
default_input_values = [2, 0.5]
initialized = true
properties = "0,6;"
script = ExtResource("3_tnd0r")

[sub_resource type="VisualShader" id="VisualShader_dt03t"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_6 : source_color;
uniform sampler2D tex_frg_4 : source_color;


// BlendModes

				float blend_dodge_f(float c1, float c2) {
					return (c1==1.0)?c1:min(c2/(1.0-c1),1.0);
				}

				vec3 blend_dodge(vec3 c1, vec3 c2, float opacity) {
					return opacity*vec3(blend_dodge_f(c1.x, c2.x), blend_dodge_f(c1.y, c2.y), blend_dodge_f(c1.z, c2.z)) + (1.0-opacity)*c2;
				}
			

void fragment() {
// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, UV);


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


	vec3 n_out7p0;
// BlendModes:7
	float n_in7p2 = 0.50000;
	{
		n_out7p0.rgb = blend_dodge(vec3(n_out6p0.xyz).rgb, vec3(n_out4p0.xyz).rgb, n_in7p2);
	}


// Output:0
	COLOR.rgb = n_out7p0;


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(800, 240)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_kj7vr")
nodes/fragment/4/position = Vector2(-240, 320)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_5cu28")
nodes/fragment/6/position = Vector2(-240, 60)
nodes/fragment/7/node = SubResource("VisualShaderNodeCustom_cnang")
nodes/fragment/7/position = Vector2(318.04, 320.8)
nodes/fragment/connections = PackedInt32Array(6, 0, 7, 0, 4, 0, 7, 1, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_wdg44"]
shader = SubResource("VisualShader_dt03t")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_y28sw"]
texture = ExtResource("1_esb2p")
texture_type = 1

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_pn8yk"]
texture = ExtResource("2_tmy5s")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_jm11t"]
default_input_values = [2, 0.5]
initialized = true
properties = "0,13;"
script = ExtResource("3_tnd0r")

[sub_resource type="VisualShader" id="VisualShader_mti26"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_6 : source_color;
uniform sampler2D tex_frg_4 : source_color;


// BlendModes

				vec3 blend_lighten(vec3 c1, vec3 c2, float opacity) {
					return opacity*max(c1, c2) + (1.0-opacity)*c2;
				}
			

void fragment() {
// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, UV);


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


	vec3 n_out7p0;
// BlendModes:7
	float n_in7p2 = 0.50000;
	{
		n_out7p0.rgb = blend_lighten(vec3(n_out6p0.xyz).rgb, vec3(n_out4p0.xyz).rgb, n_in7p2);
	}


// Output:0
	COLOR.rgb = n_out7p0;


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(1040, 220)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_y28sw")
nodes/fragment/4/position = Vector2(-240, 320)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_pn8yk")
nodes/fragment/6/position = Vector2(-240, 60)
nodes/fragment/7/node = SubResource("VisualShaderNodeCustom_jm11t")
nodes/fragment/7/position = Vector2(375, 296)
nodes/fragment/connections = PackedInt32Array(6, 0, 7, 0, 4, 0, 7, 1, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_vyc0v"]
shader = SubResource("VisualShader_mti26")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_tsdn0"]
texture = ExtResource("1_esb2p")
texture_type = 1

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_rsvo0"]
texture = ExtResource("2_tmy5s")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_4nyk0"]
default_input_values = [2, 0.5]
initialized = true
properties = "0,3;"
script = ExtResource("3_tnd0r")

[sub_resource type="VisualShader" id="VisualShader_4a1r1"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_6 : source_color;
uniform sampler2D tex_frg_4 : source_color;


// BlendModes

				vec3 blend_darken(vec3 c1, vec3 c2, float opacity) {
					return opacity*min(c1, c2) + (1.0-opacity)*c2;
				}
			

void fragment() {
// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, UV);


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


	vec3 n_out7p0;
// BlendModes:7
	float n_in7p2 = 0.50000;
	{
		n_out7p0.rgb = blend_darken(vec3(n_out6p0.xyz).rgb, vec3(n_out4p0.xyz).rgb, n_in7p2);
	}


// Output:0
	COLOR.rgb = n_out7p0;


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(1040, 240)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_tsdn0")
nodes/fragment/4/position = Vector2(-240, 320)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_rsvo0")
nodes/fragment/6/position = Vector2(-240, 60)
nodes/fragment/7/node = SubResource("VisualShaderNodeCustom_4nyk0")
nodes/fragment/7/position = Vector2(375.72, 323.36)
nodes/fragment/connections = PackedInt32Array(6, 0, 7, 0, 4, 0, 7, 1, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_h8ry5"]
shader = SubResource("VisualShader_4a1r1")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_6x7wi"]
texture = ExtResource("1_esb2p")
texture_type = 1

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_k15wi"]
texture = ExtResource("2_tmy5s")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_s63we"]
default_input_values = [2, 0.5]
initialized = true
properties = "0,4;"
script = ExtResource("3_tnd0r")

[sub_resource type="VisualShader" id="VisualShader_0hxt1"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_6 : source_color;
uniform sampler2D tex_frg_4 : source_color;


// BlendModes

				vec3 blend_difference(vec3 c1, vec3 c2, float opacity) {
					return opacity*clamp(c2-c1, vec3(0.0), vec3(1.0)) + (1.0-opacity)*c2;
				}
			

void fragment() {
// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, UV);


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


	vec3 n_out7p0;
// BlendModes:7
	float n_in7p2 = 0.50000;
	{
		n_out7p0.rgb = blend_difference(vec3(n_out6p0.xyz).rgb, vec3(n_out4p0.xyz).rgb, n_in7p2);
	}


// Output:0
	COLOR.rgb = n_out7p0;


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(900, 260)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_6x7wi")
nodes/fragment/4/position = Vector2(-240, 320)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_k15wi")
nodes/fragment/6/position = Vector2(-240, 60)
nodes/fragment/7/node = SubResource("VisualShaderNodeCustom_s63we")
nodes/fragment/7/position = Vector2(351, 306)
nodes/fragment/connections = PackedInt32Array(6, 0, 7, 0, 4, 0, 7, 1, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_d3mgk"]
shader = SubResource("VisualShader_0hxt1")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_x4y2t"]
texture = ExtResource("1_esb2p")
texture_type = 1

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_gj8i7"]
texture = ExtResource("2_tmy5s")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_jeelu"]
default_input_values = [2, 0.5]
initialized = true
script = ExtResource("3_tnd0r")

[sub_resource type="VisualShader" id="VisualShader_y0dk6"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_6 : source_color;
uniform sampler2D tex_frg_4 : source_color;


// BlendModes

				vec3 blend_additive(vec3 c1, vec3 c2, float oppacity) {
					return c2 + c1 * oppacity;
				}
			

void fragment() {
// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, UV);


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


	vec3 n_out7p0;
// BlendModes:7
	float n_in7p2 = 0.50000;
	{
		n_out7p0.rgb = blend_additive(vec3(n_out6p0.xyz).rgb, vec3(n_out4p0.xyz).rgb, n_in7p2);
	}


// Output:0
	COLOR.rgb = n_out7p0;


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(800, 240)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_x4y2t")
nodes/fragment/4/position = Vector2(-240, 320)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_gj8i7")
nodes/fragment/6/position = Vector2(-240, 60)
nodes/fragment/7/node = SubResource("VisualShaderNodeCustom_jeelu")
nodes/fragment/7/position = Vector2(367, 276)
nodes/fragment/connections = PackedInt32Array(6, 0, 7, 0, 4, 0, 7, 1, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_uof40"]
shader = SubResource("VisualShader_y0dk6")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_lkoh1"]
texture = ExtResource("1_esb2p")
texture_type = 1

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_jxr11"]
texture = ExtResource("2_tmy5s")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_2j7by"]
default_input_values = [2, 0.5]
initialized = true
properties = "0,1;"
script = ExtResource("3_tnd0r")

[sub_resource type="VisualShader" id="VisualShader_qrxbr"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_6 : source_color;
uniform sampler2D tex_frg_4 : source_color;


// BlendModes

				vec3 blend_addsub(vec3 c1, vec3 c2, float oppacity) {
					return c2 + (c1 - .5) * 2.0 * oppacity;
				}
			

void fragment() {
// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, UV);


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


	vec3 n_out7p0;
// BlendModes:7
	float n_in7p2 = 0.50000;
	{
		n_out7p0.rgb = blend_addsub(vec3(n_out6p0.xyz).rgb, vec3(n_out4p0.xyz).rgb, n_in7p2);
	}


// Output:0
	COLOR.rgb = n_out7p0;


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(920, 160)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_lkoh1")
nodes/fragment/4/position = Vector2(-240, 320)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_jxr11")
nodes/fragment/6/position = Vector2(-240, 60)
nodes/fragment/7/node = SubResource("VisualShaderNodeCustom_2j7by")
nodes/fragment/7/position = Vector2(369, 302)
nodes/fragment/connections = PackedInt32Array(6, 0, 7, 0, 4, 0, 7, 1, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_eli8g"]
shader = SubResource("VisualShader_qrxbr")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_uknmv"]
texture = ExtResource("1_esb2p")
texture_type = 1

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_6n35c"]
texture = ExtResource("2_tmy5s")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_d1dpc"]
default_input_values = [2, 0.5]
initialized = true
properties = "0,15;"
script = ExtResource("3_tnd0r")

[sub_resource type="VisualShader" id="VisualShader_fahnp"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_6 : source_color;
uniform sampler2D tex_frg_4 : source_color;


// BlendModes

				float blend_linear_light_f(float c1, float c2) {
					return (c1 + 2.0 * c2) - 1.0;
				}
				
				vec3 blend_linear_light(vec3 c1, vec3 c2, float opacity) {
					return opacity*vec3(blend_linear_light_f(c1.x, c2.x), blend_linear_light_f(c1.y, c2.y), blend_linear_light_f(c1.z, c2.z)) + (1.0-opacity)*c2;
				}
			

void fragment() {
// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, UV);


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


	vec3 n_out7p0;
// BlendModes:7
	float n_in7p2 = 0.50000;
	{
		n_out7p0.rgb = blend_linear_light(vec3(n_out6p0.xyz).rgb, vec3(n_out4p0.xyz).rgb, n_in7p2);
	}


// Output:0
	COLOR.rgb = n_out7p0;


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(860, 240)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_uknmv")
nodes/fragment/4/position = Vector2(-240, 320)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_6n35c")
nodes/fragment/6/position = Vector2(-240, 60)
nodes/fragment/7/node = SubResource("VisualShaderNodeCustom_d1dpc")
nodes/fragment/7/position = Vector2(341, 314)
nodes/fragment/connections = PackedInt32Array(6, 0, 7, 0, 4, 0, 7, 1, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_nmcdm"]
shader = SubResource("VisualShader_fahnp")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_6n6vq"]
texture = ExtResource("1_esb2p")
texture_type = 1

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_t70bk"]
texture = ExtResource("2_tmy5s")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_2avdk"]
default_input_values = [2, 0.5]
initialized = true
properties = "0,23;"
script = ExtResource("3_tnd0r")

[sub_resource type="VisualShader" id="VisualShader_bkutg"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_6 : source_color;
uniform sampler2D tex_frg_4 : source_color;


// BlendModes

				float blend_vivid_light_f(float c1, float c2) {
					return (c1 < 0.5) ? 1.0 - (1.0 - c2) / (2.0 * c1) : c2 / (2.0 * (1.0 - c1));
				}
				
				vec3 blend_vivid_light(vec3 c1, vec3 c2, float opacity) {
					return opacity*vec3(blend_vivid_light_f(c1.x, c2.x), blend_vivid_light_f(c1.y, c2.y), blend_vivid_light_f(c1.z, c2.z)) + (1.0-opacity)*c2;
				}
			

void fragment() {
// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, UV);


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


	vec3 n_out7p0;
// BlendModes:7
	float n_in7p2 = 0.50000;
	{
		n_out7p0.rgb = blend_vivid_light(vec3(n_out6p0.xyz).rgb, vec3(n_out4p0.xyz).rgb, n_in7p2);
	}


// Output:0
	COLOR.rgb = n_out7p0;


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(980, 240)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_6n6vq")
nodes/fragment/4/position = Vector2(-240, 320)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_t70bk")
nodes/fragment/6/position = Vector2(-240, 60)
nodes/fragment/7/node = SubResource("VisualShaderNodeCustom_2avdk")
nodes/fragment/7/position = Vector2(406.68, 363.6)
nodes/fragment/connections = PackedInt32Array(6, 0, 7, 0, 4, 0, 7, 1, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_idbae"]
shader = SubResource("VisualShader_bkutg")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_mgtt1"]
texture = ExtResource("1_esb2p")
texture_type = 1

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_skt4l"]
texture = ExtResource("2_tmy5s")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_ocrxc"]
default_input_values = [2, 0.5]
initialized = true
properties = "0,20;"
script = ExtResource("3_tnd0r")

[sub_resource type="VisualShader" id="VisualShader_vs058"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_6 : source_color;
uniform sampler2D tex_frg_4 : source_color;


// BlendModes

				float blend_pin_light_f( float c1, float c2) {
					return (2.0 * c1 - 1.0 > c2) ? 2.0 * c1 - 1.0 : ((c1 < 0.5 * c2) ? 2.0 * c1 : c2);
				}
				
				vec3 blend_pin_light(vec3 c1, vec3 c2, float opacity) {
					return opacity*vec3(blend_pin_light_f(c1.x, c2.x), blend_pin_light_f(c1.y, c2.y), blend_pin_light_f(c1.z, c2.z)) + (1.0-opacity)*c2;
				}
			

void fragment() {
// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, UV);


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


	vec3 n_out7p0;
// BlendModes:7
	float n_in7p2 = 0.50000;
	{
		n_out7p0.rgb = blend_pin_light(vec3(n_out6p0.xyz).rgb, vec3(n_out4p0.xyz).rgb, n_in7p2);
	}


// Output:0
	COLOR.rgb = n_out7p0;


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(920, 240)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_mgtt1")
nodes/fragment/4/position = Vector2(-240, 320)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_skt4l")
nodes/fragment/6/position = Vector2(-240, 60)
nodes/fragment/7/node = SubResource("VisualShaderNodeCustom_ocrxc")
nodes/fragment/7/position = Vector2(379.8, 333.76)
nodes/fragment/connections = PackedInt32Array(6, 0, 7, 0, 4, 0, 7, 1, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_4c0lm"]
shader = SubResource("VisualShader_vs058")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_pci2l"]
texture = ExtResource("1_esb2p")
texture_type = 1

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_4j1w7"]
texture = ExtResource("2_tmy5s")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_g1qq0"]
default_input_values = [2, 0.5]
initialized = true
properties = "0,12;"
script = ExtResource("3_tnd0r")

[sub_resource type="VisualShader" id="VisualShader_fch6n"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_6 : source_color;
uniform sampler2D tex_frg_4 : source_color;


// BlendModes

				float blend_hard_mix_f(float c1, float c2) {
					return floor(c1 + c2);
				}

				vec3 blend_hard_mix(vec3 c1, vec3 c2, float opacity) {
					return opacity*vec3(blend_hard_mix_f(c1.x, c2.x), blend_hard_mix_f(c1.y, c2.y), blend_hard_mix_f(c1.z, c2.z)) + (1.0-opacity)*c2;
				}
			

void fragment() {
// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, UV);


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


	vec3 n_out7p0;
// BlendModes:7
	float n_in7p2 = 0.50000;
	{
		n_out7p0.rgb = blend_hard_mix(vec3(n_out6p0.xyz).rgb, vec3(n_out4p0.xyz).rgb, n_in7p2);
	}


// Output:0
	COLOR.rgb = n_out7p0;


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(900, 220)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_pci2l")
nodes/fragment/4/position = Vector2(-240, 320)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_4j1w7")
nodes/fragment/6/position = Vector2(-240, 60)
nodes/fragment/7/node = SubResource("VisualShaderNodeCustom_g1qq0")
nodes/fragment/7/position = Vector2(300.36, 302.24)
nodes/fragment/connections = PackedInt32Array(6, 0, 7, 0, 4, 0, 7, 1, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_pnkpk"]
shader = SubResource("VisualShader_fch6n")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_fbka3"]
texture = ExtResource("1_esb2p")
texture_type = 1

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_n2e2a"]
texture = ExtResource("2_tmy5s")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_rs66d"]
default_input_values = [2, 0.5]
initialized = true
properties = "0,7;"
script = ExtResource("3_tnd0r")

[sub_resource type="VisualShader" id="VisualShader_nbmqa"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_6 : source_color;
uniform sampler2D tex_frg_4 : source_color;


// BlendModes

				float blend_exclusion_f(float c1, float c2) {
					return c1 + c2 - 2.0 * c1 * c2;
				}
				
				vec3 blend_exclusion(vec3 c1, vec3 c2, float opacity) {
					return opacity*vec3(blend_exclusion_f(c1.x, c2.x), blend_exclusion_f(c1.y, c2.y), blend_exclusion_f(c1.z, c2.z)) + (1.0-opacity)*c2;
				}
			

void fragment() {
// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, UV);


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


	vec3 n_out7p0;
// BlendModes:7
	float n_in7p2 = 0.50000;
	{
		n_out7p0.rgb = blend_exclusion(vec3(n_out6p0.xyz).rgb, vec3(n_out4p0.xyz).rgb, n_in7p2);
	}


// Output:0
	COLOR.rgb = n_out7p0;


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(1000, 240)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_fbka3")
nodes/fragment/4/position = Vector2(-240, 320)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_n2e2a")
nodes/fragment/6/position = Vector2(-240, 60)
nodes/fragment/7/node = SubResource("VisualShaderNodeCustom_rs66d")
nodes/fragment/7/position = Vector2(420, 300)
nodes/fragment/connections = PackedInt32Array(6, 0, 7, 0, 4, 0, 7, 1, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_r53ff"]
shader = SubResource("VisualShader_nbmqa")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_bkrbv"]
texture = ExtResource("1_esb2p")
texture_type = 1

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_4ci2j"]
texture = ExtResource("2_tmy5s")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_dn56n"]
default_input_values = [2, 0.5]
initialized = true
properties = "0,9;"
script = ExtResource("3_tnd0r")

[sub_resource type="VisualShader" id="VisualShader_6so37"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_6 : source_color;
uniform sampler2D tex_frg_4 : source_color;


// BlendModes

				float blend_gamma_illumination_f(float c1, float c2) 
				{
					return (1.0 - pow(c2, (1.0 / c1)));
				}
				
				vec3 blend_gamma_illumination(vec3 c1, vec3 c2, float opacity)
				{
					return opacity*vec3(blend_gamma_illumination_f(c1.x, c2.x), blend_gamma_illumination_f(c1.y, c2.y), blend_gamma_illumination_f(c1.z, c2.z)) + (1.0-opacity)*c2;
				}
			

void fragment() {
// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, UV);


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


	vec3 n_out7p0;
// BlendModes:7
	float n_in7p2 = 0.50000;
	{
		n_out7p0.rgb = blend_gamma_illumination(vec3(n_out6p0.xyz).rgb, vec3(n_out4p0.xyz).rgb, n_in7p2);
	}


// Output:0
	COLOR.rgb = n_out7p0;


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(900, 240)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_bkrbv")
nodes/fragment/4/position = Vector2(-240, 320)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_4ci2j")
nodes/fragment/6/position = Vector2(-240, 60)
nodes/fragment/7/node = SubResource("VisualShaderNodeCustom_dn56n")
nodes/fragment/7/position = Vector2(389.64, 381.04)
nodes/fragment/connections = PackedInt32Array(6, 0, 7, 0, 4, 0, 7, 1, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_klgwi"]
shader = SubResource("VisualShader_6so37")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_tctwu"]
texture = ExtResource("1_esb2p")
texture_type = 1

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_43pa2"]
texture = ExtResource("2_tmy5s")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_w3jhn"]
default_input_values = [2, 0.5]
initialized = true
properties = "0,10;"
script = ExtResource("3_tnd0r")

[sub_resource type="VisualShader" id="VisualShader_x1r6j"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_6 : source_color;
uniform sampler2D tex_frg_4 : source_color;


// BlendModes

				float blend_gamma_light_f(float c1, float c2) 
				{
					return pow(c2, c1);
				}
				
				vec3 blend_gamma_light(vec3 c1, vec3 c2, float opacity)
				{
					return opacity*vec3(blend_gamma_light_f(c1.x, c2.x), blend_gamma_light_f(c1.y, c2.y), blend_gamma_light_f(c1.z, c2.z)) + (1.0-opacity)*c2;
				}
			

void fragment() {
// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, UV);


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


	vec3 n_out7p0;
// BlendModes:7
	float n_in7p2 = 0.50000;
	{
		n_out7p0.rgb = blend_gamma_light(vec3(n_out6p0.xyz).rgb, vec3(n_out4p0.xyz).rgb, n_in7p2);
	}


// Output:0
	COLOR.rgb = n_out7p0;


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(1000, 260)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_tctwu")
nodes/fragment/4/position = Vector2(-240, 320)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_43pa2")
nodes/fragment/6/position = Vector2(-240, 60)
nodes/fragment/7/node = SubResource("VisualShaderNodeCustom_w3jhn")
nodes/fragment/7/position = Vector2(427, 314)
nodes/fragment/connections = PackedInt32Array(6, 0, 7, 0, 4, 0, 7, 1, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_5g7rp"]
shader = SubResource("VisualShader_x1r6j")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_xy11v"]
texture = ExtResource("1_esb2p")
texture_type = 1

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_70u2u"]
texture = ExtResource("2_tmy5s")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_j5www"]
default_input_values = [2, 0.5]
initialized = true
properties = "0,8;"
script = ExtResource("3_tnd0r")

[sub_resource type="VisualShader" id="VisualShader_5pcav"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_6 : source_color;
uniform sampler2D tex_frg_4 : source_color;


// BlendModes

				float blend_gamma_dark_f(float c1, float c2)
				{
					return pow(c2, (1.0 / c1));
				}
				
				vec3 blend_gamma_dark(vec3 c1, vec3 c2, float opacity)
				{
					return opacity*vec3(blend_gamma_dark_f(c1.x, c2.x), blend_gamma_dark_f(c1.y, c2.y), blend_gamma_dark_f(c1.z, c2.z)) + (1.0-opacity)*c2;
				}
			

void fragment() {
// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, UV);


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


	vec3 n_out7p0;
// BlendModes:7
	float n_in7p2 = 0.50000;
	{
		n_out7p0.rgb = blend_gamma_dark(vec3(n_out6p0.xyz).rgb, vec3(n_out4p0.xyz).rgb, n_in7p2);
	}


// Output:0
	COLOR.rgb = n_out7p0;


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(880, 240)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_xy11v")
nodes/fragment/4/position = Vector2(-240, 320)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_70u2u")
nodes/fragment/6/position = Vector2(-240, 60)
nodes/fragment/7/node = SubResource("VisualShaderNodeCustom_j5www")
nodes/fragment/7/position = Vector2(417, 352)
nodes/fragment/connections = PackedInt32Array(6, 0, 7, 0, 4, 0, 7, 1, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ommw6"]
shader = SubResource("VisualShader_5pcav")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_thkhw"]
texture = ExtResource("1_esb2p")
texture_type = 1

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_2hipn"]
texture = ExtResource("2_tmy5s")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_54qrl"]
default_input_values = [2, 0.5]
initialized = true
properties = "0,16;"
script = ExtResource("3_tnd0r")

[sub_resource type="VisualShader" id="VisualShader_t28pt"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_6 : source_color;
uniform sampler2D tex_frg_4 : source_color;


// BlendModes

				float blend_luminosity_f( float c1, float c2 )
				{
					float dLum = dot(vec3(c2), vec3(0.3, 0.59, 0.11));
					float sLum = dot(vec3(c1), vec3(0.3, 0.59, 0.11));
					float lum = sLum - dLum;
					float c = c2 + lum;
					if(c < 0.0) return sLum + ((c - sLum) * sLum) / (sLum - c);
					else if(c > 1.0) return sLum + ((c - sLum) * (1.0 - sLum)) / (c - sLum);
					else return c;
				}
				
				vec3 blend_luminosity(vec3 c1, vec3 c2, float opacity)
				{
					return opacity*vec3(blend_luminosity_f(c1.x, c2.x), blend_luminosity_f(c1.y, c2.y), blend_luminosity_f(c1.z, c2.z)) + (1.0-opacity)*c2;
				}
			

void fragment() {
// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, UV);


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


	vec3 n_out7p0;
// BlendModes:7
	float n_in7p2 = 0.50000;
	{
		n_out7p0.rgb = blend_luminosity(vec3(n_out6p0.xyz).rgb, vec3(n_out4p0.xyz).rgb, n_in7p2);
	}


// Output:0
	COLOR.rgb = n_out7p0;


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(920, 240)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_thkhw")
nodes/fragment/4/position = Vector2(-240, 320)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_2hipn")
nodes/fragment/6/position = Vector2(-240, 60)
nodes/fragment/7/node = SubResource("VisualShaderNodeCustom_54qrl")
nodes/fragment/7/position = Vector2(393, 330)
nodes/fragment/connections = PackedInt32Array(6, 0, 7, 0, 4, 0, 7, 1, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_p71em"]
shader = SubResource("VisualShader_t28pt")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_t0mwb"]
texture = ExtResource("1_esb2p")
texture_type = 1

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_aqwmg"]
texture = ExtResource("2_tmy5s")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_lremb"]
default_input_values = [2, 0.5]
initialized = true
properties = "0,14;"
script = ExtResource("3_tnd0r")

[sub_resource type="VisualShader" id="VisualShader_t0pob"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_6 : source_color;
uniform sampler2D tex_frg_4 : source_color;


// BlendModes

				float blend_linear_burn_f(float c1, float c2) {
					return 1.0- ((1.0 - c1) + (1.0 - c2));
				}
				
				vec3 blend_linear_burn(vec3 c1, vec3 c2, float opacity) {
					return opacity*vec3(blend_linear_burn_f(c1.x, c2.x), blend_linear_burn_f(c1.y, c2.y), blend_linear_burn_f(c1.z, c2.z)) + (1.0-opacity)*c2;
				}
			

void fragment() {
// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, UV);


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


	vec3 n_out7p0;
// BlendModes:7
	float n_in7p2 = 0.50000;
	{
		n_out7p0.rgb = blend_linear_burn(vec3(n_out6p0.xyz).rgb, vec3(n_out4p0.xyz).rgb, n_in7p2);
	}


// Output:0
	COLOR.rgb = n_out7p0;


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(940, 220)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_t0mwb")
nodes/fragment/4/position = Vector2(-240, 320)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_aqwmg")
nodes/fragment/6/position = Vector2(-240, 60)
nodes/fragment/7/node = SubResource("VisualShaderNodeCustom_lremb")
nodes/fragment/7/position = Vector2(437, 284)
nodes/fragment/connections = PackedInt32Array(6, 0, 7, 0, 4, 0, 7, 1, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_fv25u"]
shader = SubResource("VisualShader_t0pob")

[sub_resource type="VisualShaderNodeColorConstant" id="VisualShaderNodeColorConstant_cc80l"]

[sub_resource type="VisualShaderNodeColorConstant" id="VisualShaderNodeColorConstant_2p266"]
constant = Color(0, 0, 0, 1)

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_h0mlc"]
default_input_values = [1, Vector2(8, 8)]
initialized = true
script = ExtResource("27_4j47k")

[sub_resource type="VisualShader" id="VisualShader_bbxpt"]
code = "shader_type canvas_item;
render_mode blend_mix;



// Checkerboard

		vec3 checkerboard(vec2 _uv, vec2 _tiling, vec3 _color1, vec3 _color2) {
			float _tiling_x = floor(mod((_uv.x / (1.0 / _tiling.x)), 2.0));
			float _tiling_y = floor(mod((_uv.y / (1.0 / _tiling.y)), 2.0));
			bool _compare_bool = (abs(_tiling_x - _tiling_y) < 0.00001);
			return mix(_color1.xyz, _color2.xyz, (_compare_bool ? 1.0 : 0.0));
		}
	

void fragment() {
// ColorConstant:3
	vec4 n_out3p0 = vec4(1.000000, 1.000000, 1.000000, 1.000000);


// ColorConstant:4
	vec4 n_out4p0 = vec4(0.000000, 0.000000, 0.000000, 1.000000);


	vec3 n_out5p0;
// Checkerboard:5
	vec2 n_in5p1 = vec2(8.00000, 8.00000);
	{
		n_out5p0.xyz = checkerboard(UV.xy, n_in5p1.xy, vec3(n_out3p0.xyz), vec3(n_out4p0.xyz));
	}


// Output:0
	COLOR.rgb = n_out5p0;


}
"
graph_offset = Vector2(-127.68, 12.48)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(660, 160)
nodes/fragment/3/node = SubResource("VisualShaderNodeColorConstant_cc80l")
nodes/fragment/3/position = Vector2(-100, 220)
nodes/fragment/4/node = SubResource("VisualShaderNodeColorConstant_2p266")
nodes/fragment/4/position = Vector2(-80, 440)
nodes/fragment/5/node = SubResource("VisualShaderNodeCustom_h0mlc")
nodes/fragment/5/position = Vector2(280, 140)
nodes/fragment/connections = PackedInt32Array(4, 0, 5, 3, 3, 0, 5, 2, 5, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ijt06"]
shader = SubResource("VisualShader_bbxpt")

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_iuo5i"]
default_input_values = [0, Vector2(0.195, 0.142), 1, Vector2(10, 10), 2, 0.0]
initialized = true
script = ExtResource("27_xa0ky")

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_0k1tk"]
input_name = "uv"

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_7u225"]
default_input_values = [1, Vector2(4, 4), 2, Vector2(0, 0)]
function = 1

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_hacq2"]
input_name = "time"

[sub_resource type="VisualShader" id="VisualShader_nrxtj"]
code = "shader_type canvas_item;
render_mode blend_mix;



// PSRDNoise2D

		float psrdnoise2_with_gradient(vec2 x, vec2 period, float alpha, out vec2 gradient) {
			vec2 uv = vec2(x.x+x.y*0.5, x.y);
			vec2 i0 = floor(uv), f0 = fract(uv);
			float cmp = step(f0.y, f0.x);
			vec2 o1 = vec2(cmp, 1.0-cmp);
			vec2 i1 = i0 + o1, i2 = i0 + 1.0;
			vec2 v0 = vec2(i0.x - i0.y*0.5, i0.y);
			vec2 v1 = vec2(v0.x + o1.x - o1.y*0.5, v0.y + o1.y);
			vec2 v2 = vec2(v0.x + 0.5, v0.y + 1.0);
			vec2 x0 = x - v0, x1 = x - v1, x2 = x - v2;
			vec3 iu, iv, xw, yw;
			if(any(greaterThan(period, vec2(0.0)))) {
				xw = vec3(v0.x, v1.x, v2.x);
				yw = vec3(v0.y, v1.y, v2.y);
				if(period.x > 0.0)
				xw = mod(vec3(v0.x, v1.x, v2.x), period.x);
				if(period.y > 0.0)
				yw = mod(vec3(v0.y, v1.y, v2.y), period.y);
				iu = floor(xw + 0.5*yw + 0.5); iv = floor(yw + 0.5);
			} else {
				iu = vec3(i0.x, i1.x, i2.x); iv = vec3(i0.y, i1.y, i2.y);
			}
			vec3 hash = mod(iu, 289.0);
			hash = mod((hash*51.0 + 2.0)*hash + iv, 289.0);
			hash = mod((hash*34.0 + 10.0)*hash, 289.0);
			vec3 psi = hash*0.07482 + alpha;
			vec3 gx = cos(psi); vec3 gy = sin(psi);
			vec2 g0 = vec2(gx.x, gy.x);
			vec2 g1 = vec2(gx.y, gy.y);
			vec2 g2 = vec2(gx.z, gy.z);
			vec3 w = 0.8 - vec3(dot(x0, x0), dot(x1, x1), dot(x2, x2));
			w = max(w, 0.0); vec3 w2 = w*w; vec3 w4 = w2*w2;
			vec3 gdotx = vec3(dot(g0, x0), dot(g1, x1), dot(g2, x2));
			float n = dot(w4, gdotx);
			vec3 w3 = w2*w; vec3 dw = -8.0*w3*gdotx;
			vec2 dn0 = w4.x*g0 + dw.x*x0;
			vec2 dn1 = w4.y*g1 + dw.y*x1;
			vec2 dn2 = w4.z*g2 + dw.z*x2;
			gradient = 10.9*(dn0 + dn1 + dn2);
			return 10.9*n;
		}
		
		float psrdnoise2(vec2 x, vec2 period, float alpha) {
			vec2 gradient;
			return psrdnoise2_with_gradient(x, period, alpha, gradient);
		}
		
	

void fragment() {
// Input:4
	vec2 n_out4p0 = UV;


// UVFunc:5
	vec2 n_in5p1 = vec2(4.00000, 4.00000);
	vec2 n_in5p2 = vec2(0.00000, 0.00000);
	vec2 n_out5p0 = (n_out4p0 - n_in5p2) * n_in5p1 + n_in5p2;


// Input:6
	float n_out6p0 = TIME;


	float n_out2p0;
// PSRDNoise2D:2
	vec2 n_in2p1 = vec2(10.00000, 10.00000);
	{
		n_out2p0 = psrdnoise2(n_out5p0.xy, n_in2p1.xy, n_out6p0);
	}


// Output:0
	COLOR.rgb = vec3(n_out2p0);
	COLOR.a = n_out2p0;


}
"
graph_offset = Vector2(-213, 59)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(340, 160)
nodes/fragment/2/node = SubResource("VisualShaderNodeCustom_iuo5i")
nodes/fragment/2/position = Vector2(60, 180)
nodes/fragment/4/node = SubResource("VisualShaderNodeInput_0k1tk")
nodes/fragment/4/position = Vector2(-540, 80)
nodes/fragment/5/node = SubResource("VisualShaderNodeUVFunc_7u225")
nodes/fragment/5/position = Vector2(-200, 80)
nodes/fragment/6/node = SubResource("VisualShaderNodeInput_hacq2")
nodes/fragment/6/position = Vector2(-260, 280)
nodes/fragment/connections = PackedInt32Array(4, 0, 5, 0, 5, 0, 2, 0, 6, 0, 2, 2, 2, 0, 0, 0, 2, 0, 0, 1)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_qqdvx"]
shader = SubResource("VisualShader_nrxtj")

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_5rnkb"]
input_name = "uv"

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_2432w"]
default_input_values = [1, Vector2(4, 4), 2, Vector2(0, 0)]
function = 1

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_7kepg"]
input_name = "time"

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_o2eky"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1), 2, 1.0]
initialized = true
script = ExtResource("28_bj3bh")

[sub_resource type="VisualShader" id="VisualShader_xaol5"]
code = "shader_type canvas_item;
render_mode blend_mix;



// PSRDNoise3D

		vec4 __psrdnoise3_permute(vec4 i) {
			vec4 im = mod(i, 289.0);
			return mod(((im*34.0)+10.0)*im, 289.0);
		}
		
		float psrdnoise3_with_gradient(vec3 x, vec3 period, float alpha, out vec3 gradient) {
			const mat3 M = mat3(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0));
			const mat3 Mi = mat3(vec3(-0.5, 0.5, 0.5), vec3(0.5,-0.5, 0.5), vec3(0.5, 0.5,-0.5));
			vec3 uvw = M * x;
			vec3 i0 = floor(uvw), f0 = fract(uvw);
			vec3 g_ = step(f0.xyx, f0.yzz), l_ = 1.0 - g_;
			vec3 g = vec3(l_.z, g_.xy), l = vec3(l_.xy, g_.z);
			vec3 o1 = min( g, l ), o2 = max( g, l );
			vec3 i1 = i0 + o1, i2 = i0 + o2, i3 = i0 + vec3(1.0);
			vec3 v0 = Mi * i0, v1 = Mi * i1, v2 = Mi * i2, v3 = Mi * i3;
			vec3 x0 = x - v0, x1 = x - v1, x2 = x - v2, x3 = x - v3;
			if(any(greaterThan(period, vec3(0.0)))) {
				vec4 vx = vec4(v0.x, v1.x, v2.x, v3.x);
				vec4 vy = vec4(v0.y, v1.y, v2.y, v3.y);
				vec4 vz = vec4(v0.z, v1.z, v2.z, v3.z);
				if(period.x > 0.0) vx = mod(vx, period.x);
				if(period.y > 0.0) vy = mod(vy, period.y);
				if(period.z > 0.0) vz = mod(vz, period.z);
				i0 = floor(M * vec3(vx.x, vy.x, vz.x) + 0.5);
				i1 = floor(M * vec3(vx.y, vy.y, vz.y) + 0.5);
				i2 = floor(M * vec3(vx.z, vy.z, vz.z) + 0.5);
				i3 = floor(M * vec3(vx.w, vy.w, vz.w) + 0.5);
			}
			
		vec4 hash = __psrdnoise3_permute( __psrdnoise3_permute( __psrdnoise3_permute( 
					  vec4(i0.z, i1.z, i2.z, i3.z ))
					+ vec4(i0.y, i1.y, i2.y, i3.y ))
					+ vec4(i0.x, i1.x, i2.x, i3.x ));
		vec4 theta = hash * 3.883222077;
		vec4 sz = hash * -0.006920415 + 0.996539792;
		vec4 psi = hash * 0.108705628;
		vec4 Ct = cos(theta), St = sin(theta);
		vec4 sz_prime = sqrt( 1.0 - sz*sz );
		vec4 gx, gy, gz;
		if(alpha != 0.0) {
			vec4 px = Ct * sz_prime, py = St * sz_prime, pz = sz;
			vec4 Sp = sin(psi), Cp = cos(psi), Ctp = St*Sp - Ct*Cp;
			vec4 qx = mix( Ctp*St, Sp, sz), qy = mix(-Ctp*Ct, Cp, sz);
			vec4 qz = -(py*Cp + px*Sp);
			vec4 Sa = vec4(sin(alpha)), Ca = vec4(cos(alpha));
			gx = Ca*px + Sa*qx; gy = Ca*py + Sa*qy; gz = Ca*pz + Sa*qz;
		} else {
			gx = Ct * sz_prime; gy = St * sz_prime; gz = sz;  
		}
		vec3 g0 = vec3(gx.x, gy.x, gz.x), g1 = vec3(gx.y, gy.y, gz.y);
		vec3 g2 = vec3(gx.z, gy.z, gz.z), g3 = vec3(gx.w, gy.w, gz.w);
		vec4 w = 0.5-vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3));
		w = max(w, 0.0); vec4 w2 = w * w, w3 = w2 * w;
		vec4 gdotx = vec4(dot(g0,x0), dot(g1,x1), dot(g2,x2), dot(g3,x3));
		float n = dot(w3, gdotx);
		vec4 dw = -6.0 * w2 * gdotx;
		vec3 dn0 = w3.x * g0 + dw.x * x0;
		vec3 dn1 = w3.y * g1 + dw.y * x1;
		vec3 dn2 = w3.z * g2 + dw.z * x2;
		vec3 dn3 = w3.w * g3 + dw.w * x3;
		gradient = 39.5 * (dn0 + dn1 + dn2 + dn3);
		return 39.5 * n;
		}
		
		float psrdnoise3(vec3 x, vec3 period, float alpha) {
			vec3 gradient;
			return psrdnoise3_with_gradient(x, period, alpha, gradient);
		}
		
	

void fragment() {
// Input:4
	vec2 n_out4p0 = UV;


// UVFunc:5
	vec2 n_in5p1 = vec2(4.00000, 4.00000);
	vec2 n_in5p2 = vec2(0.00000, 0.00000);
	vec2 n_out5p0 = (n_out4p0 - n_in5p2) * n_in5p1 + n_in5p2;


// Input:6
	float n_out6p0 = TIME;


	float n_out7p0;
// PSRDNoise3D:7
	vec3 n_in7p1 = vec3(1.00000, 1.00000, 1.00000);
	{
		n_out7p0 = psrdnoise3(vec3(n_out5p0, 0.0).xyz, n_in7p1.xyz, n_out6p0);
	}


// Output:0
	COLOR.rgb = vec3(n_out7p0);


}
"
graph_offset = Vector2(-460, 43)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(340, 160)
nodes/fragment/4/node = SubResource("VisualShaderNodeInput_5rnkb")
nodes/fragment/4/position = Vector2(-560, 80)
nodes/fragment/5/node = SubResource("VisualShaderNodeUVFunc_2432w")
nodes/fragment/5/position = Vector2(-220, 80)
nodes/fragment/6/node = SubResource("VisualShaderNodeInput_7kepg")
nodes/fragment/6/position = Vector2(-300, 280)
nodes/fragment/7/node = SubResource("VisualShaderNodeCustom_o2eky")
nodes/fragment/7/position = Vector2(60, 160)
nodes/fragment/connections = PackedInt32Array(4, 0, 5, 0, 6, 0, 7, 2, 7, 0, 0, 0, 5, 0, 7, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_iasic"]
shader = SubResource("VisualShader_xaol5")

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_s1pc4"]
default_input_values = [1, Vector2(0.5, 0.5), 2, 2.0]
initialized = true
script = ExtResource("29_1apco")

[sub_resource type="VisualShader" id="VisualShader_caujt"]
code = "shader_type canvas_item;
render_mode blend_mix;



// RadialGradient

		float uv_radial_gradient(vec2 uv, vec2 offset, float fraction_size) {
			vec2 __uv = uv - offset;
			float grad = atan(__uv.x, __uv.y);
			grad = fract(grad / (fraction_size * PI));
			return grad;
		}
	

void fragment() {
	float n_out2p0;
// RadialGradient:2
	vec2 n_in2p1 = vec2(0.50000, 0.50000);
	float n_in2p2 = 2.00000;
	{
		n_out2p0 = uv_radial_gradient(UV.xy, n_in2p1.xy, n_in2p2);
	}


// Output:0
	COLOR.rgb = vec3(n_out2p0);


}
"
graph_offset = Vector2(-443.52, -29.76)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(-140, 60)
nodes/fragment/2/node = SubResource("VisualShaderNodeCustom_s1pc4")
nodes/fragment/2/position = Vector2(-420, 80)
nodes/fragment/connections = PackedInt32Array(2, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_65iv8"]
shader = SubResource("VisualShader_caujt")

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_3vt21"]

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_c037f"]
default_input_values = [1, Vector2(0.5, 0.5), 2, Vector2(0.25, 0.25)]
initialized = true
script = ExtResource("8_hykxv")

[sub_resource type="VisualShader" id="VisualShader_ew583"]
code = "shader_type canvas_item;
render_mode blend_mix;



// SDF Box Shape

		float sdBox( in vec2 __position, in vec2 __proportions )
		{
			vec2 __d = abs(__position) - __proportions;
			return length(max(__d, 0.0)) + min(max(__d.x, __d.y), 0.0);
		}
	

void fragment() {
	float n_out4p0;
// SDF Box Shape:4
	vec2 n_in4p1 = vec2(0.50000, 0.50000);
	vec2 n_in4p2 = vec2(0.25000, 0.25000);
	{
		n_out4p0 = sdBox(UV.xy - n_in4p1.xy, n_in4p2.xy);
	}


// Step:3
	float n_in3p1 = 0.00000;
	float n_out3p0 = step(n_out4p0, n_in3p1);


// Output:0
	COLOR.rgb = vec3(n_out3p0);


}
"
graph_offset = Vector2(-297, -3)
mode = 1
flags/light_only = false
nodes/fragment/3/node = SubResource("VisualShaderNodeStep_3vt21")
nodes/fragment/3/position = Vector2(60, 180)
nodes/fragment/4/node = SubResource("VisualShaderNodeCustom_c037f")
nodes/fragment/4/position = Vector2(-420, 180)
nodes/fragment/connections = PackedInt32Array(3, 0, 0, 0, 4, 0, 3, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_yp0tr"]
shader = SubResource("VisualShader_ew583")

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_waqbe"]

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_7hsui"]
default_input_values = [1, Vector2(0.5, 0.5), 2, 0.25]
initialized = true
script = ExtResource("32_1rwir")

[sub_resource type="VisualShader" id="VisualShader_b85uw"]
code = "shader_type canvas_item;
render_mode blend_mix;



// SDF Circle Shape

		float sdCircle(vec2 pos, float r) {
			return length(pos) - r;
		}
	

void fragment() {
	float n_out4p0;
// SDF Circle Shape:4
	vec2 n_in4p1 = vec2(0.50000, 0.50000);
	float n_in4p2 = 0.25000;
	{
		n_out4p0 = sdCircle(UV.xy - n_in4p1.xy, n_in4p2);
	}


// Step:3
	float n_in3p1 = 0.00000;
	float n_out3p0 = step(n_out4p0, n_in3p1);


// Output:0
	COLOR.rgb = vec3(n_out3p0);


}
"
graph_offset = Vector2(-306, -11)
mode = 1
flags/light_only = false
nodes/fragment/3/node = SubResource("VisualShaderNodeStep_waqbe")
nodes/fragment/3/position = Vector2(60, 180)
nodes/fragment/4/node = SubResource("VisualShaderNodeCustom_7hsui")
nodes/fragment/4/position = Vector2(-197, 129)
nodes/fragment/connections = PackedInt32Array(3, 0, 0, 0, 4, 0, 3, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_52mrt"]
shader = SubResource("VisualShader_b85uw")

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_287f8"]

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_jvi73"]
default_input_values = [1, Vector2(0.5, 0.5), 2, 0.15, 3, 0.3, 4, 0.2]
initialized = true
script = ExtResource("33_k8iav")

[sub_resource type="VisualShader" id="VisualShader_jh5y8"]
code = "shader_type canvas_item;
render_mode blend_mix;



// SDF Parallelogram Shape

		float sdParallelogram( in vec2 p, float wi, float he, float sk )
		{
			vec2 e = vec2(sk,he);
			p = (p.y<0.0)?-p:p;
			vec2  w = p - e; w.x -= clamp(w.x,-wi,wi);
			vec2  d = vec2(dot(w,w), -w.y);
			float s = p.x*e.y - p.y*e.x;
			p = (s<0.0)?-p:p;
			vec2  v = p - vec2(wi,0); v -= e*clamp(dot(v,e)/dot(e,e),-1.0,1.0);
			d = min( d, vec2(dot(v,v), wi*he-abs(s)));
			return sqrt(d.x)*sign(-d.y);
		}
	

void fragment() {
	float n_out4p0;
// SDF Parallelogram Shape:4
	vec2 n_in4p1 = vec2(0.50000, 0.50000);
	float n_in4p2 = 0.15000;
	float n_in4p3 = 0.30000;
	float n_in4p4 = 0.20000;
	{
		n_out4p0 = sdParallelogram(UV.xy - n_in4p1.xy, n_in4p2, n_in4p3, n_in4p4);
	}


// Step:3
	float n_in3p1 = 0.00000;
	float n_out3p0 = step(n_out4p0, n_in3p1);


// Output:0
	COLOR.rgb = vec3(n_out3p0);


}
"
graph_offset = Vector2(-335, -68.8333)
mode = 1
flags/light_only = false
nodes/fragment/3/node = SubResource("VisualShaderNodeStep_287f8")
nodes/fragment/3/position = Vector2(60, 180)
nodes/fragment/4/node = SubResource("VisualShaderNodeCustom_jvi73")
nodes/fragment/4/position = Vector2(-200, 120)
nodes/fragment/connections = PackedInt32Array(3, 0, 0, 0, 4, 0, 3, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_b8srd"]
shader = SubResource("VisualShader_jh5y8")

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_a2fts"]

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_qfav1"]
default_input_values = [1, Vector2(0.5, 0.5), 2, Vector2(0.25, 0.25)]
initialized = true
script = ExtResource("34_t306u")

[sub_resource type="VisualShader" id="VisualShader_atxn6"]
code = "shader_type canvas_item;
render_mode blend_mix;



// SDF Rhombus Shape

		float ndot(vec2 a, vec2 b ) { return a.x*b.x - a.y*b.y; }
		float sdRhombus( in vec2 p, in vec2 b ) 
		{
			p = abs(p);
			float h = clamp( ndot(b-2.0*p,b)/dot(b,b), -1.0, 1.0 );
			float d = length( p-0.5*b*vec2(1.0-h,1.0+h) );
			return d * sign( p.x*b.y + p.y*b.x - b.x*b.y );
		}
	

void fragment() {
	float n_out4p0;
// SDF Rhombus Shape:4
	vec2 n_in4p1 = vec2(0.50000, 0.50000);
	vec2 n_in4p2 = vec2(0.25000, 0.25000);
	{
		n_out4p0 = sdRhombus(UV.xy - n_in4p1.xy, n_in4p2.xy);
	}


// Step:3
	float n_in3p1 = 0.00000;
	float n_out3p0 = step(n_out4p0, n_in3p1);


// Output:0
	COLOR.rgb = vec3(n_out3p0);


}
"
graph_offset = Vector2(-371, -38)
mode = 1
flags/light_only = false
nodes/fragment/3/node = SubResource("VisualShaderNodeStep_a2fts")
nodes/fragment/3/position = Vector2(60, 180)
nodes/fragment/4/node = SubResource("VisualShaderNodeCustom_qfav1")
nodes/fragment/4/position = Vector2(-211, 98)
nodes/fragment/connections = PackedInt32Array(3, 0, 0, 0, 4, 0, 3, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_yyiql"]
shader = SubResource("VisualShader_atxn6")

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_ronoj"]

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_eypac"]
default_input_values = [1, Vector2(0.5, 0.5), 2, Vector2(-0.25, -0.25), 3, Vector2(0.25, 0.25), 4, 0.2]
initialized = true
script = ExtResource("35_laxki")

[sub_resource type="VisualShader" id="VisualShader_2wk66"]
code = "shader_type canvas_item;
render_mode blend_mix;



// SDF PreciseBox Shape

		float sdPreciseBox( in vec2 p, in vec2 a, in vec2 b, float th )
		{
			float l = length(b-a);
			vec2  d = (b-a)/l;
			vec2  q = (p-(a+b)*0.5);
				  q = mat2(vec2(d.x,-d.y), vec2(d.y,d.x))*q;
				  q = abs(q)-vec2(l,th)*0.5;
			return length(max(q,0.0)) + min(max(q.x,q.y),0.0);    
		}
	

void fragment() {
	float n_out4p0;
// SDF PreciseBox Shape:4
	vec2 n_in4p1 = vec2(0.50000, 0.50000);
	vec2 n_in4p2 = vec2(-0.25000, -0.25000);
	vec2 n_in4p3 = vec2(0.25000, 0.25000);
	float n_in4p4 = 0.20000;
	{
		n_out4p0 = sdPreciseBox(UV.xy - n_in4p1.xy, n_in4p2.xy, n_in4p3.xy, n_in4p4);
	}


// Step:3
	float n_in3p1 = 0.00000;
	float n_out3p0 = step(n_out4p0, n_in3p1);


// Output:0
	COLOR.rgb = vec3(n_out3p0);


}
"
graph_offset = Vector2(-282, -33)
mode = 1
flags/light_only = false
nodes/fragment/3/node = SubResource("VisualShaderNodeStep_ronoj")
nodes/fragment/3/position = Vector2(60, 180)
nodes/fragment/4/node = SubResource("VisualShaderNodeCustom_eypac")
nodes/fragment/4/position = Vector2(-200, 140)
nodes/fragment/connections = PackedInt32Array(3, 0, 0, 0, 4, 0, 3, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_lucsr"]
shader = SubResource("VisualShader_2wk66")

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_mvbda"]

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_d8n2b"]
default_input_values = [1, Vector2(0.5, 0.5), 2, Vector2(0.25, 0.25), 3, Vector4(0, 0, 0, 0)]
initialized = true
script = ExtResource("36_8mm01")

[sub_resource type="VisualShaderNodeVec4Parameter" id="VisualShaderNodeVec4Parameter_ma1o7"]
parameter_name = "Vector4Parameter"
default_value_enabled = true

[sub_resource type="VisualShader" id="VisualShader_e1125"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform vec4 Vector4Parameter = vec4(0.000000, 0.000000, 0.000000, 0.000000);


// SDF RoundedBox Shape

		float sdRoundedBox( in vec2 __pos, in vec2 __proportions, in vec4 __radia )
		{
			__radia.xy = (__pos.x > 0.0) ? __radia.xy : vec2(__radia.w, __radia.z);
			__radia.x  = (__pos.y > 0.0) ? __radia.x  : __radia.y;
			vec2 __q = abs(__pos) - __proportions + __radia.x;
			return min(max(__q.x, __q.y), 0.0) + length(max(__q, 0.0)) - __radia.x;
		}
	

void fragment() {
// Vector4Parameter:7
	vec4 n_out7p0 = Vector4Parameter;


	float n_out6p0;
// SDF RoundedBox Shape:6
	vec2 n_in6p1 = vec2(0.50000, 0.50000);
	vec2 n_in6p2 = vec2(0.25000, 0.25000);
	{
		n_out6p0 = sdRoundedBox(UV.xy - n_in6p1.xy, n_in6p2.xy, n_out7p0.xyzw);
	}


// Step:3
	float n_in3p1 = 0.00000;
	float n_out3p0 = step(n_out6p0, n_in3p1);


// Output:0
	COLOR.rgb = vec3(n_out3p0);


}
"
graph_offset = Vector2(-616.6, 32.6)
mode = 1
flags/light_only = false
nodes/fragment/3/node = SubResource("VisualShaderNodeStep_mvbda")
nodes/fragment/3/position = Vector2(60, 180)
nodes/fragment/6/node = SubResource("VisualShaderNodeCustom_d8n2b")
nodes/fragment/6/position = Vector2(-191, 197)
nodes/fragment/7/node = SubResource("VisualShaderNodeVec4Parameter_ma1o7")
nodes/fragment/7/position = Vector2(-560, 180)
nodes/fragment/connections = PackedInt32Array(3, 0, 0, 0, 6, 0, 3, 0, 7, 0, 6, 3)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_pr0po"]
shader = SubResource("VisualShader_e1125")
shader_parameter/Vector4Parameter = Vector4(0.25, 0.056, 0.25, 0)

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_46s00"]

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_543dt"]
default_input_values = [1, Vector2(0.5, 0.5), 2, 0.15, 3, 0.35, 4, 0.25]
initialized = true
script = ExtResource("37_glmoa")

[sub_resource type="VisualShader" id="VisualShader_7tc5t"]
code = "shader_type canvas_item;
render_mode blend_mix;



// SDF Trapezoid Shape

		float sdTrapezoid( in vec2 p, in float r1, float r2, float he )
		{
			vec2 k1 = vec2(r2,he);
			vec2 k2 = vec2(r2-r1,2.0*he);
			p.x = abs(p.x);
			vec2 ca = vec2(p.x-min(p.x,(p.y<0.0)?r1:r2), abs(p.y)-he);
			vec2 cb = p - k1 + k2*clamp( dot(k1-p,k2)/dot(k2, k2), 0.0, 1.0 );
			float s = (cb.x<0.0 && ca.y<0.0) ? -1.0 : 1.0;
			return s*sqrt( min(dot(ca, ca),dot(cb, cb)) );
		}
	

void fragment() {
	float n_out4p0;
// SDF Trapezoid Shape:4
	vec2 n_in4p1 = vec2(0.50000, 0.50000);
	float n_in4p2 = 0.15000;
	float n_in4p3 = 0.35000;
	float n_in4p4 = 0.25000;
	{
		n_out4p0 = sdTrapezoid(UV.xy - n_in4p1.xy, n_in4p2, n_in4p3, n_in4p4);
	}


// Step:3
	float n_in3p1 = 0.00000;
	float n_out3p0 = step(n_out4p0, n_in3p1);


// Output:0
	COLOR.rgb = vec3(n_out3p0);


}
"
graph_offset = Vector2(-411, -37)
mode = 1
flags/light_only = false
nodes/fragment/3/node = SubResource("VisualShaderNodeStep_46s00")
nodes/fragment/3/position = Vector2(60, 180)
nodes/fragment/4/node = SubResource("VisualShaderNodeCustom_543dt")
nodes/fragment/4/position = Vector2(-172, 144)
nodes/fragment/connections = PackedInt32Array(3, 0, 0, 0, 4, 0, 3, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_wr7cc"]
shader = SubResource("VisualShader_7tc5t")

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_rjno1"]

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_0ievt"]
default_input_values = [1, Vector2(0.5, 0.25), 2, Vector2(0.25, 0.5)]
initialized = true
script = ExtResource("38_y2sll")

[sub_resource type="VisualShader" id="VisualShader_sqnwd"]
code = "shader_type canvas_item;
render_mode blend_mix;



// SDF Triangle Shape

		float sdTriangleIsosceles( in vec2 p, in vec2 q )
		{
			p.x = abs(p.x);
			vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );
			vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );
			float s = -sign( q.y );
			vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),
						  vec2( dot(b,b), s*(p.y-q.y)  ));
			return -sqrt(d.x)*sign(d.y);
		}
	

void fragment() {
	float n_out4p0;
// SDF Triangle Shape:4
	vec2 n_in4p1 = vec2(0.50000, 0.25000);
	vec2 n_in4p2 = vec2(0.25000, 0.50000);
	{
		n_out4p0 = sdTriangleIsosceles(UV.xy - n_in4p1.xy, n_in4p2.xy);
	}


// Step:3
	float n_in3p1 = 0.00000;
	float n_out3p0 = step(n_out4p0, n_in3p1);


// Output:0
	COLOR.rgb = vec3(n_out3p0);


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(820, 160)
nodes/fragment/3/node = SubResource("VisualShaderNodeStep_rjno1")
nodes/fragment/3/position = Vector2(400, 200)
nodes/fragment/4/node = SubResource("VisualShaderNodeCustom_0ievt")
nodes/fragment/4/position = Vector2(-198, 163)
nodes/fragment/connections = PackedInt32Array(3, 0, 0, 0, 4, 0, 3, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_7wkl2"]
shader = SubResource("VisualShader_sqnwd")

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_eaeme"]
default_input_values = [1, Vector2(0.5, 0.5), 2, Vector2(0.25, 0.5)]
initialized = true
script = ExtResource("17_e4l87")

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_mrvbb"]
parameter_name = "Size"
default_value_enabled = true
default_value = 0.376

[sub_resource type="VisualShaderNodeSmoothStep" id="VisualShaderNodeSmoothStep_sloj5"]
default_input_values = [0, 0.1, 1, 0.6, 2, 0.5]

[sub_resource type="VisualShader" id="VisualShader_jbp3n"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform float Size = 0.3759999871254;


// SDF HyperBolicCross Shape

		float sdHyperbolicCross( in vec2 p, in vec2 __prop)
		{
			vec2 result = pow(abs(p), __prop);
			return 1.0 - (result.x + result.y);
		}
	

void fragment() {
// FloatParameter:3
	float n_out3p0 = Size;


	float n_out2p0;
// SDF HyperBolicCross Shape:2
	vec2 n_in2p1 = vec2(0.50000, 0.50000);
	{
		n_out2p0 = sdHyperbolicCross(UV.xy - n_in2p1.xy, vec2(n_out3p0).xy);
	}


// SmoothStep:4
	float n_in4p0 = 0.10000;
	float n_in4p1 = 0.60000;
	float n_out4p0 = smoothstep(n_in4p0, n_in4p1, n_out2p0);


// Output:0
	COLOR.rgb = vec3(n_out4p0);


}
"
graph_offset = Vector2(-175.68, -23.04)
mode = 1
flags/light_only = false
nodes/fragment/2/node = SubResource("VisualShaderNodeCustom_eaeme")
nodes/fragment/2/position = Vector2(-560, 260)
nodes/fragment/3/node = SubResource("VisualShaderNodeFloatParameter_mrvbb")
nodes/fragment/3/position = Vector2(-1140, 360)
nodes/fragment/4/node = SubResource("VisualShaderNodeSmoothStep_sloj5")
nodes/fragment/4/position = Vector2(-120, 240)
nodes/fragment/connections = PackedInt32Array(3, 0, 2, 2, 2, 0, 4, 2, 4, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_2unp1"]
shader = SubResource("VisualShader_jbp3n")
shader_parameter/Size = 0.386

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_43f3d"]
default_input_values = [1, Vector2(0.5, 0.5), 2, Vector2(0.5, 0.5), 3, 0.13]
initialized = true
script = ExtResource("17_l4qqe")

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_h0e6j"]

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_8a4g5"]
constant = -0.012

[sub_resource type="VisualShader" id="VisualShader_mg8br"]
code = "shader_type canvas_item;
render_mode blend_mix;



// SDF PreciseHyperBolicCross Shape

		float sdPreciseHyperbolicCross( in vec2 p, float k )
		{
			// scale
			float s = 1.0/k - k;
			p = p*s;
			// symmetry
			p = abs(p);
			p = (p.x>p.y) ? p.yx : p.xy;
			// offset
			p += k;
			
			// solve quartic (for details see https://www.shadertoy.com/view/ftcyW8)
			float x2 = p.x*p.x/16.0;
			float y2 = p.y*p.y/16.0;
			float r = (p.x*p.y-4.0)/12.0;
			float q = y2-x2;
			float h = q*q-r*r*r;
			float u;
			if( h<0.0 )
			{
				float m = sqrt(r);
				u = m*cos( acos(q/(r*m) )/3.0 );
			}
			else
			{
				float m = pow(sqrt(h)+q,1.0/3.0);
				u = (m+r/m)/2.0;
			}
			float w = sqrt(u+x2);
			float x = p.x/4.0-w+sqrt(2.0*x2-u+(p.y-x2*p.x*2.0)/w/4.0);
			
			// clamp arm
			x = max(x,k);
			
			// compute distance to closest point
			float d = length( p-vec2(x,1.0/x) ) / s;

			// sign
			return p.x*p.y < 1.0 ? -d : d;
		}
	

void fragment() {
	float n_out2p0;
// SDF PreciseHyperBolicCross Shape:2
	vec2 n_in2p1 = vec2(0.50000, 0.50000);
	vec2 n_in2p2 = vec2(0.50000, 0.50000);
	float n_in2p3 = 0.13000;
	{
		n_out2p0 = sdPreciseHyperbolicCross((UV.xy - n_in2p1.xy)*(2.0-n_in2p2.xy), n_in2p3);
	}


// FloatConstant:4
	float n_out4p0 = -0.012000;


// Step:3
	float n_out3p0 = step(n_out2p0, n_out4p0);


// Output:0
	COLOR.rgb = vec3(n_out3p0);


}
"
graph_offset = Vector2(-295.715, -70.5703)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(660, 160)
nodes/fragment/2/node = SubResource("VisualShaderNodeCustom_43f3d")
nodes/fragment/2/position = Vector2(-660, 160)
nodes/fragment/3/node = SubResource("VisualShaderNodeStep_h0e6j")
nodes/fragment/3/position = Vector2(40, 180)
nodes/fragment/4/node = SubResource("VisualShaderNodeFloatConstant_8a4g5")
nodes/fragment/4/position = Vector2(-440, 480)
nodes/fragment/connections = PackedInt32Array(3, 0, 0, 0, 4, 0, 3, 1, 2, 0, 3, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_lbgyl"]
shader = SubResource("VisualShader_mg8br")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_5d2we"]
texture = ExtResource("1_esb2p")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_cdqbk"]
default_input_values = [1, 129.657, 2, -0.419, 3, 0.126]
initialized = true
script = ExtResource("30_e28ye")

[sub_resource type="VisualShaderNodeColorFunc" id="VisualShaderNodeColorFunc_45eaf"]
function = 1

[sub_resource type="VisualShader" id="VisualShader_5n70k"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_3 : source_color;


// HSVAdjustment

		vec3 hsv_adjustment(vec3 col, float hue_offset, float sat_offset, float val_offset) {
			vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
			vec4 p = mix(vec4(col.bg, K.wz), vec4(col.gb, K.xy), step(col.b, col.g));
			vec4 q = mix(vec4(p.xyw, col.r), vec4(col.r, p.yzx), step(p.x, col.r));
			float d = q.x - min(q.w, q.y);
			float e = 1.0e-10;
			vec3 hsv = vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
			hsv.x += hue_offset / 360.0;
			hsv.y += sat_offset;
			hsv.z += val_offset;
			return hsv;
		}
		
	

void fragment() {
// Texture2D:3
	vec4 n_out3p0 = texture(tex_frg_3, UV);


	vec3 n_out4p0;
// HSVAdjustment:4
	float n_in4p1 = 129.65700;
	float n_in4p2 = -0.41900;
	float n_in4p3 = 0.12600;
	{
		n_out4p0 = hsv_adjustment(vec3(n_out3p0.xyz).xyz, n_in4p1, n_in4p2, n_in4p3);
	}


	vec3 n_out6p0;
// ColorFunc:6
	{
		vec3 c = n_out4p0;
		vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
		vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
		n_out6p0 = c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
	}


// Output:0
	COLOR.rgb = n_out6p0;


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(580, 180)
nodes/fragment/3/node = SubResource("VisualShaderNodeTexture_5d2we")
nodes/fragment/3/position = Vector2(-220, 40)
nodes/fragment/4/node = SubResource("VisualShaderNodeCustom_cdqbk")
nodes/fragment/4/position = Vector2(60, 140)
nodes/fragment/6/node = SubResource("VisualShaderNodeColorFunc_45eaf")
nodes/fragment/6/position = Vector2(380, 200)
nodes/fragment/connections = PackedInt32Array(3, 0, 4, 0, 6, 0, 0, 0, 4, 0, 6, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_le34p"]
shader = SubResource("VisualShader_5n70k")

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_8dss3"]
default_input_values = [1, Vector2(0.5, 0.5), 2, 10.0, 3, Vector2(0, 0)]
initialized = true
script = ExtResource("39_3gamp")

[sub_resource type="VisualShader" id="VisualShader_eqdrg"]
code = "shader_type canvas_item;
render_mode blend_mix;



// UVTwirl

		vec2 Twirl(vec2 __uv, vec2 __center, float __strength, vec2 __offset)
		{
			vec2 __delta = __uv - __center;
			float __angle = __strength * length(__delta);
			float __x = cos(__angle) * __delta.x - sin(__angle) * __delta.y;
			float __y = sin(__angle) * __delta.x + cos(__angle) * __delta.y;
			return vec2(__x + __center.x + __offset.x, __y + __center.y + __offset.y);
		}
	

void fragment() {
	vec2 n_out2p0;
// UVTwirl:2
	vec2 n_in2p1 = vec2(0.50000, 0.50000);
	float n_in2p2 = 10.00000;
	vec2 n_in2p3 = vec2(0.00000, 0.00000);
	{
		n_out2p0.xy = Twirl(UV.xy, n_in2p1.xy, n_in2p2, n_in2p3.xy);
	}


// Output:0
	COLOR.rgb = vec3(n_out2p0, 0.0);


}
"
graph_offset = Vector2(-66.5925, -60.75)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(340, 40)
nodes/fragment/2/node = SubResource("VisualShaderNodeCustom_8dss3")
nodes/fragment/2/position = Vector2(-31.185, 12.5)
nodes/fragment/connections = PackedInt32Array(2, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_nk7cv"]
shader = SubResource("VisualShader_eqdrg")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_vdmwd"]
source = 5
texture = ExtResource("41_gg1i3")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_72wbf"]
default_input_values = [1, 24, 2, 1, 3, 0, 4, 24, 5, 0.3]
initialized = true
script = ExtResource("41_k7n2j")

[sub_resource type="VisualShaderNodeVectorDecompose" id="VisualShaderNodeVectorDecompose_4i80k"]
default_input_values = [0, Quaternion(0, 0, 0, 0)]
op_type = 2

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_wfss0"]
default_input_values = [1, Vector2(1, 1), 2, Vector2(0.002, 0)]

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_3avxn"]
parameter_name = "MainTex"
texture_type = 1
texture_filter = 1

[sub_resource type="VisualShader" id="VisualShader_pgiym"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D MainTex : source_color, filter_nearest;


// UVFlipbook

		vec2 flipbook_anim(vec2 __uv, int __columns, int __rows, int __starting_frame, int __ending_frame, float __anim_speed) {
			__starting_frame += int(fract(TIME * __anim_speed) * float(__ending_frame));
			float frame = float(clamp(__starting_frame, 0, __ending_frame));
			vec2 offPerFrame = vec2((1.0 / float(__columns)), (1.0 / float(__rows)));
			
			vec2 sprite_size = vec2(__uv.x / float(__columns), __uv.y / float(__rows));
			vec2 current_sprite = vec2(0.0, 1.0 - offPerFrame.y);
			current_sprite.x += frame * offPerFrame.x;
			float rowIndex;
			float _mod = modf(frame / float(__columns), rowIndex);
			current_sprite.y -= rowIndex * offPerFrame.y;
			current_sprite.x -= rowIndex * float(__columns) * offPerFrame.x;
			
			vec2 sprite_uv = (sprite_size + current_sprite);
			
			return sprite_uv;
		}
	

void fragment() {
	vec2 n_out4p0;
// UVFlipbook:4
	int n_in4p1 = 24;
	int n_in4p2 = 1;
	int n_in4p3 = 0;
	int n_in4p4 = 24;
	float n_in4p5 = 0.30000;
	{
		n_out4p0.xy = flipbook_anim(UV.xy, n_in4p1, n_in4p2, n_in4p3, n_in4p4, n_in4p5 );
	}


// UVFunc:6
	vec2 n_in6p1 = vec2(1.00000, 1.00000);
	vec2 n_in6p2 = vec2(0.00200, 0.00000);
	vec2 n_out6p0 = n_in6p2 * n_in6p1 + n_out4p0;


	vec4 n_out3p0;
// Texture2D:3
	n_out3p0 = texture(MainTex, n_out6p0);


// VectorDecompose:5
	float n_out5p0 = n_out3p0.x;
	float n_out5p1 = n_out3p0.y;
	float n_out5p2 = n_out3p0.z;
	float n_out5p3 = n_out3p0.w;


// Output:0
	COLOR.rgb = vec3(n_out3p0.xyz);
	COLOR.a = n_out5p3;


}
"
graph_offset = Vector2(-18.7114, -102.932)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(1040, 60)
nodes/fragment/3/node = SubResource("VisualShaderNodeTexture_vdmwd")
nodes/fragment/3/position = Vector2(220, 20)
nodes/fragment/4/node = SubResource("VisualShaderNodeCustom_72wbf")
nodes/fragment/4/position = Vector2(-820, 100)
nodes/fragment/5/node = SubResource("VisualShaderNodeVectorDecompose_4i80k")
nodes/fragment/5/position = Vector2(560, 300)
nodes/fragment/6/node = SubResource("VisualShaderNodeUVFunc_wfss0")
nodes/fragment/6/position = Vector2(-380, 100)
nodes/fragment/7/node = SubResource("VisualShaderNodeTexture2DParameter_3avxn")
nodes/fragment/7/position = Vector2(-520, 400)
nodes/fragment/connections = PackedInt32Array(3, 0, 0, 0, 3, 0, 5, 0, 5, 3, 0, 1, 4, 0, 6, 0, 6, 0, 3, 0, 7, 0, 3, 2)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_esshf"]
shader = SubResource("VisualShader_pgiym")
shader_parameter/MainTex = ExtResource("41_gg1i3")

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_fuam6"]
default_input_values = [0, Vector2(2, 2), 1, 4.0, 2, 2.08165e-12]
initialized = true
script = ExtResource("42_bg3u1")

[sub_resource type="VisualShader" id="VisualShader_8gnev"]
code = "shader_type canvas_item;
render_mode blend_mix;



// UVTiler

		vec2 tile(vec2 _uv, float _zoom){
			_uv *= _zoom;
			return fract(_uv);
		}
		
		vec2 rotate(vec2 _uv, float _angle) {
			_uv -= 0.5;
			_uv = mat2( vec2(cos(_angle), -sin(_angle)), vec2(sin(_angle), cos(_angle)) ) * _uv;
			_uv += 0.5;
			return _uv;
		}
	

void fragment() {
	vec2 n_out2p0;
// UVTiler:2
	vec2 n_in2p0 = vec2(2.00000, 2.00000);
	float n_in2p1 = 4.00000;
	float n_in2p2 = 0.00000;
	{
		
			vec2 st = UV.xy/n_in2p0.xy;
			st = tile(st,n_in2p1);
			st = rotate(st, n_in2p2);
			n_out2p0 = st;
			
	}


// Output:0
	COLOR.rgb = vec3(n_out2p0, 0.0);


}
"
graph_offset = Vector2(-491, -33)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(340, 40)
nodes/fragment/2/node = SubResource("VisualShaderNodeCustom_fuam6")
nodes/fragment/2/position = Vector2(-260, 60)
nodes/fragment/connections = PackedInt32Array(2, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_v8ct1"]
shader = SubResource("VisualShader_8gnev")

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_a1kwj"]
default_input_values = [1, Vector2(0.5, 0.5), 2, 10.0, 3, Vector2(0, 0)]
initialized = true
script = ExtResource("43_1ggnt")

[sub_resource type="VisualShader" id="VisualShader_7uhii"]
code = "shader_type canvas_item;
render_mode blend_mix;



// UVRotate

		vec2 uv_rotate(vec2 uv, vec2 pivot, float angle) {
			mat2 rotation = mat2(vec2(sin(angle), -cos(angle)), vec2(cos(angle), sin(angle)));
			uv -= pivot;
			uv = uv * rotation;
			uv += pivot;
			return uv;
		}
	

void fragment() {
	vec2 n_out2p0;
// UVRotate:2
	vec2 n_in2p1 = vec2(0.50000, 0.50000);
	float n_in2p2 = 10.00000;
	{
		n_out2p0.xy = uv_rotate(UV.xy, n_in2p1.xy, n_in2p2);
	}


// Output:0
	COLOR.rgb = vec3(n_out2p0, 0.0);


}
"
graph_offset = Vector2(-175, 13)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(340, 40)
nodes/fragment/2/node = SubResource("VisualShaderNodeCustom_a1kwj")
nodes/fragment/2/position = Vector2(80, 40)
nodes/fragment/connections = PackedInt32Array(2, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_cu70s"]
shader = SubResource("VisualShader_7uhii")

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_qhyoa"]
default_input_values = [1, 2.0, 2, 1.0, 3, 0.0]
initialized = true
script = ExtResource("44_w5004")

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_3o0vd"]
input_name = "time"

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_eqdgy"]
texture = ExtResource("1_esb2p")
texture_type = 1

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_67ujy"]
operator = 2

[sub_resource type="VisualShader" id="VisualShader_wx5y0"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_4 : source_color;


// TriangleWave

		float triangle_wave(float IN, float __amplitude, float __frequency, float __height) {
			return 1.0 - __amplitude * abs(round(IN / __frequency) - (IN / __frequency)) + __height;
		}
	

void fragment() {
// Input:3
	float n_out3p0 = TIME;


	float n_out2p0;
// TriangleWave:2
	float n_in2p1 = 2.00000;
	float n_in2p2 = 1.00000;
	float n_in2p3 = 0.00000;
	{
		n_out2p0 = triangle_wave(n_out3p0, n_in2p1, n_in2p2, n_in2p3);
	}


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


// VectorOp:5
	vec3 n_out5p0 = vec3(n_out2p0) * vec3(n_out4p0.xyz);


// Output:0
	COLOR.rgb = n_out5p0;


}
"
graph_offset = Vector2(-276.615, 2.24999)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(680, 140)
nodes/fragment/2/node = SubResource("VisualShaderNodeCustom_qhyoa")
nodes/fragment/2/position = Vector2(-280, 80)
nodes/fragment/3/node = SubResource("VisualShaderNodeInput_3o0vd")
nodes/fragment/3/position = Vector2(-1020, 60)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_eqdgy")
nodes/fragment/4/position = Vector2(-420, 400)
nodes/fragment/5/node = SubResource("VisualShaderNodeVectorOp_67ujy")
nodes/fragment/5/position = Vector2(200, 200)
nodes/fragment/connections = PackedInt32Array(3, 0, 2, 0, 2, 0, 5, 0, 4, 0, 5, 1, 5, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_o3d0f"]
shader = SubResource("VisualShader_wx5y0")

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_0j4rd"]
default_input_values = [1, 1.0, 2, 1.0, 3, 0.0]
initialized = true
script = ExtResource("45_u3ae5")

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_baknj"]
operator = 2

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_ikytu"]
texture = ExtResource("1_esb2p")
texture_type = 1

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_gcea3"]
input_name = "time"

[sub_resource type="VisualShader" id="VisualShader_puwg7"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_4 : source_color;


// SquareWave

		float square_wave(float IN, float __amplitude, float __frequency, float __height) {
			return __amplitude*sign(sin(2.0 * PI * IN * __frequency)) + __height;
		}
	

void fragment() {
// Input:5
	float n_out5p0 = TIME;


	float n_out2p0;
// SquareWave:2
	float n_in2p1 = 1.00000;
	float n_in2p2 = 1.00000;
	float n_in2p3 = 0.00000;
	{
		n_out2p0 = square_wave(n_out5p0, n_in2p1, n_in2p2, n_in2p3);
	}


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


// VectorOp:3
	vec3 n_out3p0 = vec3(n_out2p0) * vec3(n_out4p0.xyz);


// Output:0
	COLOR.rgb = n_out3p0;


}
"
mode = 1
flags/light_only = false
nodes/fragment/2/node = SubResource("VisualShaderNodeCustom_0j4rd")
nodes/fragment/2/position = Vector2(-380, 100)
nodes/fragment/3/node = SubResource("VisualShaderNodeVectorOp_baknj")
nodes/fragment/3/position = Vector2(-19.005, 181)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_ikytu")
nodes/fragment/4/position = Vector2(-520, 420)
nodes/fragment/5/node = SubResource("VisualShaderNodeInput_gcea3")
nodes/fragment/5/position = Vector2(-1140, 120)
nodes/fragment/connections = PackedInt32Array(2, 0, 3, 0, 4, 0, 3, 1, 5, 0, 2, 0, 3, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_t427w"]
shader = SubResource("VisualShader_puwg7")

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_nfkyf"]
default_input_values = [1, 1.0, 2, 1.0, 3, 0.0]
initialized = true
script = ExtResource("46_offdw")

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_won18"]
operator = 2

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_3hn32"]
texture = ExtResource("1_esb2p")
texture_type = 1

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_g3y1n"]
input_name = "time"

[sub_resource type="VisualShader" id="VisualShader_y5gtx"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_4 : source_color;


// SawtoothWave

		float sawtooth_wave(float IN, float __amplitude, float __period, float __height) {
			return 2.0 * __amplitude * ((IN/__period) - floor((1.0/2.0) + (IN / __period))) + __height;
		}
	

void fragment() {
// Input:5
	float n_out5p0 = TIME;


	float n_out2p0;
// SawtoothWave:2
	float n_in2p1 = 1.00000;
	float n_in2p2 = 1.00000;
	float n_in2p3 = 0.00000;
	{
		n_out2p0 = sawtooth_wave(n_out5p0, n_in2p1, n_in2p2, n_in2p3);
	}


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


// VectorOp:3
	vec3 n_out3p0 = vec3(n_out2p0) * vec3(n_out4p0.xyz);


// Output:0
	COLOR.rgb = n_out3p0;


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(560, 320)
nodes/fragment/2/node = SubResource("VisualShaderNodeCustom_nfkyf")
nodes/fragment/2/position = Vector2(-280, 120)
nodes/fragment/3/node = SubResource("VisualShaderNodeVectorOp_won18")
nodes/fragment/3/position = Vector2(108.16, 266.5)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_3hn32")
nodes/fragment/4/position = Vector2(-420, 420)
nodes/fragment/5/node = SubResource("VisualShaderNodeInput_g3y1n")
nodes/fragment/5/position = Vector2(-980, 100)
nodes/fragment/connections = PackedInt32Array(2, 0, 3, 0, 4, 0, 3, 1, 5, 0, 2, 0, 3, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_7g4dk"]
shader = SubResource("VisualShader_y5gtx")

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_8d5ov"]
default_input_values = [1, 1.0, 2, 1.0, 3, 0.0, 4, 0.0]
initialized = true
script = ExtResource("47_ehqs0")

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_esgtp"]
input_name = "time"

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_28nfh"]
operator = 2

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_qt8jv"]
texture = ExtResource("1_esb2p")
texture_type = 1

[sub_resource type="VisualShader" id="VisualShader_enkir"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_5 : source_color;


// SineWave

		float sine_wave(float IN, float __amplitude, float __frequency, float __phase, float __height) {
			return __amplitude * sin(2.0 * PI * __frequency * IN + __phase) + __height;
		}
	

void fragment() {
// Input:3
	float n_out3p0 = TIME;


	float n_out2p0;
// SineWave:2
	float n_in2p1 = 1.00000;
	float n_in2p2 = 1.00000;
	float n_in2p3 = 0.00000;
	float n_in2p4 = 0.00000;
	{
		n_out2p0 = sine_wave(n_out3p0, n_in2p1, n_in2p2, n_in2p3, n_in2p4);
	}


// Texture2D:5
	vec4 n_out5p0 = texture(tex_frg_5, UV);


// VectorOp:4
	vec3 n_out4p0 = vec3(n_out2p0) * vec3(n_out5p0.xyz);


// Output:0
	COLOR.rgb = n_out4p0;


}
"
graph_offset = Vector2(-148.553, 29.25)
mode = 1
flags/light_only = false
nodes/fragment/2/node = SubResource("VisualShaderNodeCustom_8d5ov")
nodes/fragment/2/position = Vector2(-320, 40)
nodes/fragment/3/node = SubResource("VisualShaderNodeInput_esgtp")
nodes/fragment/3/position = Vector2(-1040, 60)
nodes/fragment/4/node = SubResource("VisualShaderNodeVectorOp_28nfh")
nodes/fragment/4/position = Vector2(60, 140)
nodes/fragment/5/node = SubResource("VisualShaderNodeTexture_qt8jv")
nodes/fragment/5/position = Vector2(-480, 400)
nodes/fragment/connections = PackedInt32Array(3, 0, 2, 0, 2, 0, 4, 0, 5, 0, 4, 1, 4, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_20n14"]
shader = SubResource("VisualShader_enkir")

[node name="Examples" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
size_flags_horizontal = 3
size_flags_vertical = 3

[node name="BlendModes" type="Control" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="VBoxContainer" type="VBoxContainer" parent="BlendModes"]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="Label" type="Label" parent="BlendModes/VBoxContainer"]
layout_mode = 2
theme_override_font_sizes/font_size = 40
text = "Blend Modes"

[node name="ScrollContainer" type="ScrollContainer" parent="BlendModes/VBoxContainer"]
layout_mode = 2
size_flags_vertical = 3
horizontal_scroll_mode = 0

[node name="GridContainer" type="GridContainer" parent="BlendModes/VBoxContainer/ScrollContainer"]
layout_mode = 2
size_flags_vertical = 3
columns = 8

[node name="Normal" type="VBoxContainer" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/Normal"]
material = SubResource("69")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_esb2p")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/Normal"]
layout_mode = 2
text = "Normal"
horizontal_alignment = 1

[node name="Dissolve" type="VBoxContainer" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/Dissolve"]
material = SubResource("ShaderMaterial_enr5s")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_esb2p")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/Dissolve"]
layout_mode = 2
text = "Dissolve"
horizontal_alignment = 1

[node name="Screen" type="VBoxContainer" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/Screen"]
material = SubResource("ShaderMaterial_wu7lk")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_esb2p")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/Screen"]
layout_mode = 2
text = "Screen"
horizontal_alignment = 1

[node name="Overlay" type="VBoxContainer" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/Overlay"]
material = SubResource("ShaderMaterial_kkpnf")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_esb2p")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/Overlay"]
layout_mode = 2
text = "Overlay"
horizontal_alignment = 1

[node name="HardLight" type="VBoxContainer" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/HardLight"]
material = SubResource("ShaderMaterial_lkbav")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_esb2p")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/HardLight"]
layout_mode = 2
text = "Hard Light"
horizontal_alignment = 1

[node name="SoftLight" type="VBoxContainer" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/SoftLight"]
material = SubResource("ShaderMaterial_qayvd")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_esb2p")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/SoftLight"]
layout_mode = 2
text = "Soft Light"
horizontal_alignment = 1

[node name="Burn" type="VBoxContainer" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/Burn"]
material = SubResource("ShaderMaterial_deh4d")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_esb2p")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/Burn"]
layout_mode = 2
text = "Burn"
horizontal_alignment = 1

[node name="Dodge" type="VBoxContainer" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/Dodge"]
material = SubResource("ShaderMaterial_wdg44")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_esb2p")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/Dodge"]
layout_mode = 2
text = "Dodge"
horizontal_alignment = 1

[node name="Lighten" type="VBoxContainer" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/Lighten"]
material = SubResource("ShaderMaterial_vyc0v")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_esb2p")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/Lighten"]
layout_mode = 2
text = "Lighten"
horizontal_alignment = 1

[node name="Darken" type="VBoxContainer" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/Darken"]
material = SubResource("ShaderMaterial_h8ry5")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_esb2p")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/Darken"]
layout_mode = 2
text = "Darken"
horizontal_alignment = 1

[node name="Difference" type="VBoxContainer" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/Difference"]
material = SubResource("ShaderMaterial_d3mgk")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_esb2p")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/Difference"]
layout_mode = 2
text = "Difference"
horizontal_alignment = 1

[node name="Additive" type="VBoxContainer" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/Additive"]
material = SubResource("ShaderMaterial_uof40")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_esb2p")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/Additive"]
layout_mode = 2
text = "Additive"
horizontal_alignment = 1

[node name="AddSub" type="VBoxContainer" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/AddSub"]
material = SubResource("ShaderMaterial_eli8g")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_esb2p")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/AddSub"]
layout_mode = 2
text = "AddSub"
horizontal_alignment = 1

[node name="LinearLight" type="VBoxContainer" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/LinearLight"]
material = SubResource("ShaderMaterial_nmcdm")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_esb2p")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/LinearLight"]
layout_mode = 2
text = "Linear Light"
horizontal_alignment = 1

[node name="VividLight" type="VBoxContainer" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/VividLight"]
material = SubResource("ShaderMaterial_idbae")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_esb2p")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/VividLight"]
layout_mode = 2
text = "Vivid Light"
horizontal_alignment = 1

[node name="PinLight" type="VBoxContainer" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/PinLight"]
material = SubResource("ShaderMaterial_4c0lm")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_esb2p")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/PinLight"]
layout_mode = 2
text = "Pin Light"
horizontal_alignment = 1

[node name="HardMix" type="VBoxContainer" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/HardMix"]
material = SubResource("ShaderMaterial_pnkpk")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_esb2p")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/HardMix"]
layout_mode = 2
text = "Hard Mix"
horizontal_alignment = 1

[node name="Exclusion" type="VBoxContainer" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/Exclusion"]
material = SubResource("ShaderMaterial_r53ff")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_esb2p")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/Exclusion"]
layout_mode = 2
text = "Exclusion"
horizontal_alignment = 1

[node name="GammaIllumination" type="VBoxContainer" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/GammaIllumination"]
material = SubResource("ShaderMaterial_klgwi")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_esb2p")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/GammaIllumination"]
custom_minimum_size = Vector2(2.08165e-12, 20)
layout_mode = 2
text = "Gamma Illumination"
horizontal_alignment = 1
autowrap_mode = 2

[node name="GammaLight" type="VBoxContainer" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/GammaLight"]
material = SubResource("ShaderMaterial_5g7rp")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_esb2p")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/GammaLight"]
layout_mode = 2
text = "Gamma Light"
horizontal_alignment = 1

[node name="GammaDark" type="VBoxContainer" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/GammaDark"]
material = SubResource("ShaderMaterial_ommw6")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_esb2p")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/GammaDark"]
layout_mode = 2
text = "Gamma Dark"
horizontal_alignment = 1

[node name="Luminosity" type="VBoxContainer" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/Luminosity"]
material = SubResource("ShaderMaterial_p71em")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_esb2p")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/Luminosity"]
layout_mode = 2
text = "Luminosity"
horizontal_alignment = 1

[node name="LinearBurn" type="VBoxContainer" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/LinearBurn"]
material = SubResource("ShaderMaterial_fv25u")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_esb2p")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/LinearBurn"]
layout_mode = 2
text = "Linear Burn"
horizontal_alignment = 1

[node name="Procedural" type="Control" parent="."]
visible = false
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="VBoxContainer" type="VBoxContainer" parent="Procedural"]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="Label" type="Label" parent="Procedural/VBoxContainer"]
layout_mode = 2
theme_override_font_sizes/font_size = 40
text = "Procedural"

[node name="ScrollContainer" type="ScrollContainer" parent="Procedural/VBoxContainer"]
layout_mode = 2
size_flags_vertical = 3

[node name="GridContainer" type="GridContainer" parent="Procedural/VBoxContainer/ScrollContainer"]
layout_mode = 2
columns = 8

[node name="Checkerboard" type="VBoxContainer" parent="Procedural/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="Procedural/VBoxContainer/ScrollContainer/GridContainer/Checkerboard"]
material = SubResource("ShaderMaterial_ijt06")
layout_mode = 2
texture = ExtResource("1_esb2p")

[node name="Label" type="Label" parent="Procedural/VBoxContainer/ScrollContainer/GridContainer/Checkerboard"]
layout_mode = 2
text = "Checkerboard"
horizontal_alignment = 1

[node name="PSRDNoise2D" type="VBoxContainer" parent="Procedural/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="Procedural/VBoxContainer/ScrollContainer/GridContainer/PSRDNoise2D"]
material = SubResource("ShaderMaterial_qqdvx")
layout_mode = 2
texture = ExtResource("1_esb2p")

[node name="Label" type="Label" parent="Procedural/VBoxContainer/ScrollContainer/GridContainer/PSRDNoise2D"]
layout_mode = 2
text = "PSRD Noise2D"
horizontal_alignment = 1

[node name="PSRDNoise3D" type="VBoxContainer" parent="Procedural/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="Procedural/VBoxContainer/ScrollContainer/GridContainer/PSRDNoise3D"]
material = SubResource("ShaderMaterial_iasic")
layout_mode = 2
texture = ExtResource("1_esb2p")

[node name="Label" type="Label" parent="Procedural/VBoxContainer/ScrollContainer/GridContainer/PSRDNoise3D"]
layout_mode = 2
text = "PSRD Noise3D"
horizontal_alignment = 1

[node name="UVRadialGradient" type="VBoxContainer" parent="Procedural/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="Procedural/VBoxContainer/ScrollContainer/GridContainer/UVRadialGradient"]
material = SubResource("ShaderMaterial_65iv8")
layout_mode = 2
texture = ExtResource("1_esb2p")

[node name="Label" type="Label" parent="Procedural/VBoxContainer/ScrollContainer/GridContainer/UVRadialGradient"]
layout_mode = 2
text = "Radial Gradient"
horizontal_alignment = 1

[node name="Box" type="VBoxContainer" parent="Procedural/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="Procedural/VBoxContainer/ScrollContainer/GridContainer/Box"]
material = SubResource("ShaderMaterial_yp0tr")
layout_mode = 2
size_flags_vertical = 3
texture = ExtResource("1_esb2p")

[node name="Label" type="Label" parent="Procedural/VBoxContainer/ScrollContainer/GridContainer/Box"]
layout_mode = 2
text = "Box"
horizontal_alignment = 1
vertical_alignment = 1

[node name="Circle" type="VBoxContainer" parent="Procedural/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="Procedural/VBoxContainer/ScrollContainer/GridContainer/Circle"]
material = SubResource("ShaderMaterial_52mrt")
layout_mode = 2
size_flags_vertical = 3
texture = ExtResource("1_esb2p")

[node name="Label" type="Label" parent="Procedural/VBoxContainer/ScrollContainer/GridContainer/Circle"]
layout_mode = 2
text = "Circle"
horizontal_alignment = 1
vertical_alignment = 1

[node name="Parallelogram" type="VBoxContainer" parent="Procedural/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="Procedural/VBoxContainer/ScrollContainer/GridContainer/Parallelogram"]
material = SubResource("ShaderMaterial_b8srd")
layout_mode = 2
size_flags_vertical = 3
texture = ExtResource("1_esb2p")

[node name="Label" type="Label" parent="Procedural/VBoxContainer/ScrollContainer/GridContainer/Parallelogram"]
layout_mode = 2
text = "Parallelogram"
horizontal_alignment = 1
vertical_alignment = 1

[node name="Rhombus" type="VBoxContainer" parent="Procedural/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="Procedural/VBoxContainer/ScrollContainer/GridContainer/Rhombus"]
material = SubResource("ShaderMaterial_yyiql")
layout_mode = 2
size_flags_vertical = 3
texture = ExtResource("1_esb2p")

[node name="Label" type="Label" parent="Procedural/VBoxContainer/ScrollContainer/GridContainer/Rhombus"]
layout_mode = 2
text = "Rhombus"
horizontal_alignment = 1
vertical_alignment = 1

[node name="PreciseBox" type="VBoxContainer" parent="Procedural/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="Procedural/VBoxContainer/ScrollContainer/GridContainer/PreciseBox"]
material = SubResource("ShaderMaterial_lucsr")
layout_mode = 2
size_flags_vertical = 3
texture = ExtResource("1_esb2p")

[node name="Label" type="Label" parent="Procedural/VBoxContainer/ScrollContainer/GridContainer/PreciseBox"]
layout_mode = 2
size_flags_vertical = 3
text = "Precise Box"
horizontal_alignment = 1
vertical_alignment = 1

[node name="RoundedBox" type="VBoxContainer" parent="Procedural/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="Procedural/VBoxContainer/ScrollContainer/GridContainer/RoundedBox"]
material = SubResource("ShaderMaterial_pr0po")
layout_mode = 2
size_flags_vertical = 3
texture = ExtResource("1_esb2p")

[node name="Label" type="Label" parent="Procedural/VBoxContainer/ScrollContainer/GridContainer/RoundedBox"]
layout_mode = 2
size_flags_vertical = 3
text = "Rounded Box"
horizontal_alignment = 1
vertical_alignment = 1

[node name="Trapezoid" type="VBoxContainer" parent="Procedural/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="Procedural/VBoxContainer/ScrollContainer/GridContainer/Trapezoid"]
material = SubResource("ShaderMaterial_wr7cc")
layout_mode = 2
size_flags_vertical = 3
texture = ExtResource("1_esb2p")

[node name="Label" type="Label" parent="Procedural/VBoxContainer/ScrollContainer/GridContainer/Trapezoid"]
layout_mode = 2
size_flags_vertical = 3
text = "Trapezoid"
horizontal_alignment = 1
vertical_alignment = 1

[node name="Triangle" type="VBoxContainer" parent="Procedural/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="Procedural/VBoxContainer/ScrollContainer/GridContainer/Triangle"]
material = SubResource("ShaderMaterial_7wkl2")
layout_mode = 2
size_flags_vertical = 3
texture = ExtResource("1_esb2p")

[node name="Label" type="Label" parent="Procedural/VBoxContainer/ScrollContainer/GridContainer/Triangle"]
layout_mode = 2
size_flags_vertical = 3
text = "Triangle"
horizontal_alignment = 1
vertical_alignment = 1

[node name="Hyperbolic CrossCustom" type="VBoxContainer" parent="Procedural/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="Procedural/VBoxContainer/ScrollContainer/GridContainer/Hyperbolic CrossCustom"]
material = SubResource("ShaderMaterial_2unp1")
layout_mode = 2
texture = ExtResource("1_esb2p")

[node name="Label" type="Label" parent="Procedural/VBoxContainer/ScrollContainer/GridContainer/Hyperbolic CrossCustom"]
custom_minimum_size = Vector2(2.08165e-12, 20)
layout_mode = 2
size_flags_vertical = 6
text = "Hyperbolic Cross"
horizontal_alignment = 1
vertical_alignment = 1
autowrap_mode = 3

[node name="PreciseHyperbolic Cross" type="VBoxContainer" parent="Procedural/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="Procedural/VBoxContainer/ScrollContainer/GridContainer/PreciseHyperbolic Cross"]
material = SubResource("ShaderMaterial_lbgyl")
layout_mode = 2
size_flags_vertical = 3
texture = ExtResource("1_esb2p")

[node name="Label" type="Label" parent="Procedural/VBoxContainer/ScrollContainer/GridContainer/PreciseHyperbolic Cross"]
custom_minimum_size = Vector2(2.08165e-12, 20)
layout_mode = 2
text = "Precise Hyperbolic Cross"
horizontal_alignment = 1
vertical_alignment = 1
autowrap_mode = 3

[node name="ColorAdjustment" type="Control" parent="."]
visible = false
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="VBoxContainer" type="VBoxContainer" parent="ColorAdjustment"]
layout_mode = 1
offset_right = 40.0
offset_bottom = 40.0

[node name="Label" type="Label" parent="ColorAdjustment/VBoxContainer"]
layout_mode = 2
theme_override_font_sizes/font_size = 40
text = "Color Adjustment"

[node name="HBoxContainer" type="HBoxContainer" parent="ColorAdjustment/VBoxContainer"]
layout_mode = 2

[node name="HSVAdjustment" type="VBoxContainer" parent="ColorAdjustment/VBoxContainer/HBoxContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="ColorAdjustment/VBoxContainer/HBoxContainer/HSVAdjustment"]
material = SubResource("ShaderMaterial_le34p")
layout_mode = 2
texture = ExtResource("1_esb2p")

[node name="Label" type="Label" parent="ColorAdjustment/VBoxContainer/HBoxContainer/HSVAdjustment"]
layout_mode = 2
size_flags_vertical = 6
text = "HSVAdjustment"
horizontal_alignment = 1
vertical_alignment = 1

[node name="UV" type="Control" parent="."]
visible = false
layout_mode = 1
anchors_preset = 0
offset_right = 40.0
offset_bottom = 40.0

[node name="VBoxContainer" type="VBoxContainer" parent="UV"]
layout_mode = 0
offset_right = 40.0
offset_bottom = 40.0

[node name="Label" type="Label" parent="UV/VBoxContainer"]
layout_mode = 2
theme_override_font_sizes/font_size = 40
text = "UV"

[node name="HBoxContainer" type="HBoxContainer" parent="UV/VBoxContainer"]
layout_mode = 2

[node name="UVTwirl" type="VBoxContainer" parent="UV/VBoxContainer/HBoxContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="UV/VBoxContainer/HBoxContainer/UVTwirl"]
material = SubResource("ShaderMaterial_nk7cv")
layout_mode = 2
texture = ExtResource("1_esb2p")

[node name="Label" type="Label" parent="UV/VBoxContainer/HBoxContainer/UVTwirl"]
layout_mode = 2
text = "UV Twirl"
horizontal_alignment = 1

[node name="UVFlipbook" type="VBoxContainer" parent="UV/VBoxContainer/HBoxContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="UV/VBoxContainer/HBoxContainer/UVFlipbook"]
material = SubResource("ShaderMaterial_esshf")
layout_mode = 2
texture = ExtResource("1_esb2p")

[node name="Label" type="Label" parent="UV/VBoxContainer/HBoxContainer/UVFlipbook"]
layout_mode = 2
text = "UV Flipbook Animation"
horizontal_alignment = 1
autowrap_mode = 2

[node name="UVTiler" type="VBoxContainer" parent="UV/VBoxContainer/HBoxContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="UV/VBoxContainer/HBoxContainer/UVTiler"]
material = SubResource("ShaderMaterial_v8ct1")
layout_mode = 2
texture = ExtResource("1_esb2p")

[node name="Label" type="Label" parent="UV/VBoxContainer/HBoxContainer/UVTiler"]
layout_mode = 2
text = "UV Tiler"
horizontal_alignment = 1

[node name="UVRotate" type="VBoxContainer" parent="UV/VBoxContainer/HBoxContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="UV/VBoxContainer/HBoxContainer/UVRotate"]
material = SubResource("ShaderMaterial_cu70s")
layout_mode = 2
texture = ExtResource("1_esb2p")

[node name="Label" type="Label" parent="UV/VBoxContainer/HBoxContainer/UVRotate"]
layout_mode = 2
text = "UV Rotate"
horizontal_alignment = 1

[node name="Wave" type="Control" parent="."]
visible = false
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="VBoxContainer" type="VBoxContainer" parent="Wave"]
layout_mode = 0
offset_right = 40.0
offset_bottom = 40.0

[node name="Label" type="Label" parent="Wave/VBoxContainer"]
layout_mode = 2
theme_override_font_sizes/font_size = 40
text = "Wave"

[node name="HBoxContainer" type="HBoxContainer" parent="Wave/VBoxContainer"]
layout_mode = 2

[node name="TriangleWave" type="VBoxContainer" parent="Wave/VBoxContainer/HBoxContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="Wave/VBoxContainer/HBoxContainer/TriangleWave"]
material = SubResource("ShaderMaterial_o3d0f")
layout_mode = 2
texture = ExtResource("1_esb2p")

[node name="Label" type="Label" parent="Wave/VBoxContainer/HBoxContainer/TriangleWave"]
layout_mode = 2
text = "Triangle Wave"
horizontal_alignment = 1
vertical_alignment = 1

[node name="SquareWave" type="VBoxContainer" parent="Wave/VBoxContainer/HBoxContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="Wave/VBoxContainer/HBoxContainer/SquareWave"]
material = SubResource("ShaderMaterial_t427w")
layout_mode = 2
texture = ExtResource("1_esb2p")

[node name="Label" type="Label" parent="Wave/VBoxContainer/HBoxContainer/SquareWave"]
layout_mode = 2
text = "Square Wave"
horizontal_alignment = 1
vertical_alignment = 1

[node name="SawtoothWave" type="VBoxContainer" parent="Wave/VBoxContainer/HBoxContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="Wave/VBoxContainer/HBoxContainer/SawtoothWave"]
material = SubResource("ShaderMaterial_7g4dk")
layout_mode = 2
texture = ExtResource("1_esb2p")

[node name="Label" type="Label" parent="Wave/VBoxContainer/HBoxContainer/SawtoothWave"]
layout_mode = 2
text = "Sawtooth Wave"
horizontal_alignment = 1
vertical_alignment = 1

[node name="SineWave" type="VBoxContainer" parent="Wave/VBoxContainer/HBoxContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="Wave/VBoxContainer/HBoxContainer/SineWave"]
material = SubResource("ShaderMaterial_20n14")
layout_mode = 2
texture = ExtResource("1_esb2p")

[node name="Label" type="Label" parent="Wave/VBoxContainer/HBoxContainer/SineWave"]
layout_mode = 2
text = "Sine Wave"
horizontal_alignment = 1
vertical_alignment = 1

[node name="Camera2D" type="Camera2D" parent="."]
anchor_mode = 0
