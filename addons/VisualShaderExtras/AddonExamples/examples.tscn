[gd_scene load_steps=328 format=3 uid="uid://cnuej70tbjgwd"]

[ext_resource type="Texture2D" uid="uid://dkwktkcfupn2y" path="res://addons/VisualShaderExtras/AddonExamples/icon.svg" id="1_pmvkm"]
[ext_resource type="Texture2D" uid="uid://e6k5hrwrnjy3" path="res://addons/VisualShaderExtras/AddonExamples/VisualShaderExtras-Logo-128x128.png" id="2_myiw4"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/BlendModes/normal_blend.gd" id="3_t67k3"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/BlendModes/dissolve_blend.gd" id="4_eqjgp"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/BlendModes/screen_blend.gd" id="5_afmfx"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/BlendModes/overlay_blend.gd" id="6_d40l5"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/BlendModes/hard_light_blend.gd" id="7_wcbap"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/BlendModes/soft_light_blend.gd" id="8_oqb1v"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/BlendModes/burn_blend.gd" id="9_hsv27"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/BlendModes/dodge_blend.gd" id="10_5tjq4"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/BlendModes/lighten_blend.gd" id="11_jra88"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/BlendModes/darken_blend.gd" id="12_vqxt2"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/BlendModes/difference_blend.gd" id="13_laece"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/BlendModes/additive_blend.gd" id="14_lxeqv"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/BlendModes/addsub_blend.gd" id="15_meo86"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/BlendModes/linear_light_blend.gd" id="16_dmlhh"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/BlendModes/vivid_light_blend.gd" id="17_s2asn"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/BlendModes/pin_light_blend.gd" id="18_kji71"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/BlendModes/exclusion_blend.gd" id="19_gkxhr"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/BlendModes/gamma_illumination_blend.gd" id="20_d7i5c"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/BlendModes/gamma_light_blend.gd" id="21_fpode"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/BlendModes/gamma_dark_blend.gd" id="22_wf7lc"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/BlendModes/luminosity_blend.gd" id="23_451rj"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/BlendModes/linear_burn_blend.gd" id="24_fak3r"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/BlendModes/lighter_color_blend.gd" id="25_1twgi"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/BlendModes/darker_color_blend.gd" id="26_37c4m"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/Procedural/Checkerboard.gd" id="27_5htah"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/Procedural/PSRD-Noise2D.gd" id="27_qxbdi"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/ColorAdjustment/HSVAdjustment.gd" id="28_ye5rl"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/Shapes/Circle.gd" id="30_nhxin"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/Shapes/Parallelogram.gd" id="31_3swwc"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/Procedural/PSRD-Noise3D.gd" id="31_a7ssf"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/Shapes/Box.gd" id="31_hcapl"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/Shapes/Rhombus.gd" id="32_2uhvd"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/Shapes/PreciseBox.gd" id="33_q3h5g"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/Shapes/RoundedBox.gd" id="34_yicdm"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/Shapes/Trapezoid.gd" id="35_4prw4"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/Shapes/Triangle.gd" id="36_4uciv"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/UV/UVTwirl.gd" id="37_psyxx"]
[ext_resource type="Texture2D" uid="uid://bn8avh1dk262a" path="res://addons/VisualShaderExtras/AddonExamples/DinoSprites - vita.png" id="38_u53ku"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/UV/UVFlipbook.gd" id="39_iilbj"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/UV/UVTiler.gd" id="40_x0ogt"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/UV/UVRotate.gd" id="41_7oy85"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/Wave/TriangleWave.gd" id="42_ubein"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/Wave/SquareWave.gd" id="43_7mn1k"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/Procedural/RadialGradient.gd" id="43_ada6o"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/Wave/SawtoothWave.gd" id="44_ikc7r"]
[ext_resource type="Script" path="res://addons/VisualShaderExtras/Wave/SineWave.gd" id="45_w1ca0"]

[sub_resource type="VisualShaderNodeTexture" id="67"]
texture = ExtResource("1_pmvkm")
texture_type = 1

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_pj0n4"]
texture = ExtResource("2_myiw4")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_lnt7t"]
default_input_values = [2, 0.5]
initialized = true
script = ExtResource("3_t67k3")

[sub_resource type="VisualShader" id="68"]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_6 : source_color;
uniform sampler2D tex_frg_4 : source_color;


// BlendNormal

		vec3 blend_normal(vec3 c1, vec3 c2, float opacity) {
			return opacity*c1 + (1.0-opacity)*c2;
		}
	

void fragment() {
// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, UV);


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


	vec3 n_out7p0;
// BlendNormal:7
	float n_in7p2 = 0.50000;
	{
		n_out7p0.rgb = blend_normal(vec3(n_out6p0.xyz).rgb, vec3(n_out4p0.xyz).rgb, n_in7p2);
	}


// Output:0
	COLOR.rgb = n_out7p0;


}
"
graph_offset = Vector2(-254, 213)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(420, 240)
nodes/fragment/4/node = SubResource("67")
nodes/fragment/4/position = Vector2(-240, 320)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_pj0n4")
nodes/fragment/6/position = Vector2(-240, 60)
nodes/fragment/7/node = SubResource("VisualShaderNodeCustom_lnt7t")
nodes/fragment/7/position = Vector2(61, 228)
nodes/fragment/connections = PackedInt32Array(6, 0, 7, 0, 4, 0, 7, 1, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="69"]
shader = SubResource("68")

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_8j805"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_yy23m"]
texture = SubResource("CompressedTexture2D_8j805")
texture_type = 1

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_yfuqr"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_fxobl"]
texture = SubResource("CompressedTexture2D_yfuqr")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_g0xuu"]
default_input_values = [2, 0.5, 3, Vector3(1, 1, 1)]
initialized = true
script = ExtResource("4_eqjgp")

[sub_resource type="VisualShader" id="VisualShader_my0mx"]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_6 : source_color;
uniform sampler2D tex_frg_4 : source_color;


// BlendDissolve

		// 3D Noise with friendly permission by Inigo Quilez
		vec3 hash_noise_range( vec3 p ) {
			p *= mat3(vec3(127.1, 311.7, -53.7), vec3(269.5, 183.3, 77.1), vec3(-301.7, 27.3, 215.3));
			return 2.0 * fract(fract(p)*4375.55) -1.;
		}

		float random_range(vec3 seed, float min, float max) {
			return mix(min, max, hash_noise_range(seed).x);
		}
		
		vec3 blend_dissolve(vec3 seed, vec3 c1, vec3 c2, float opacity) {
			if (random_range(vec3(seed), 0.0, 1.0) < opacity) {
				return c1;
			} else {
				return c2;
			}
		}
	

void fragment() {
// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, UV);


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


	vec3 n_out7p0;
// BlendDissolve:7
	float n_in7p2 = 0.50000;
	{
		n_out7p0.rgb = blend_dissolve(vec3(n_out4p0.xyz).rgb, vec3(n_out6p0.xyz).rgb, vec3(n_out4p0.xyz).rgb, n_in7p2);
	}


// Output:0
	COLOR.rgb = n_out7p0;


}
"
graph_offset = Vector2(-218.738, 152.552)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(420, 240)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_yy23m")
nodes/fragment/4/position = Vector2(-240, 320)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_fxobl")
nodes/fragment/6/position = Vector2(-240, 60)
nodes/fragment/7/node = SubResource("VisualShaderNodeCustom_g0xuu")
nodes/fragment/7/position = Vector2(154, 255)
nodes/fragment/connections = PackedInt32Array(6, 0, 7, 0, 4, 0, 7, 1, 7, 0, 0, 0, 4, 0, 7, 3)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_enr5s"]
shader = SubResource("VisualShader_my0mx")

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_0hw3s"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_sxjik"]
texture = SubResource("CompressedTexture2D_0hw3s")
texture_type = 1

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_qdblg"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_ik4a7"]
texture = SubResource("CompressedTexture2D_qdblg")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_kwjoc"]
default_input_values = [2, 0.5]
initialized = true
script = ExtResource("5_afmfx")

[sub_resource type="VisualShader" id="VisualShader_unmd3"]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_6 : source_color;
uniform sampler2D tex_frg_4 : source_color;


// BlendScreen

		vec3 blend_screen(vec3 c1, vec3 c2, float opacity) {
			return opacity*(1.0-(1.0-c1)*(1.0-c2)) + (1.0-opacity)*c2;
		}
	

void fragment() {
// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, UV);


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


	vec3 n_out7p0;
// BlendScreen:7
	float n_in7p2 = 0.50000;
	{
		n_out7p0.rgb = blend_screen(vec3(n_out6p0.xyz).rgb, vec3(n_out4p0.xyz).rgb, n_in7p2);
	}


// Output:0
	COLOR.rgb = n_out7p0;


}
"
graph_offset = Vector2(-116.97, 248.83)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(420, 240)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_sxjik")
nodes/fragment/4/position = Vector2(-240, 320)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_ik4a7")
nodes/fragment/6/position = Vector2(-240, 60)
nodes/fragment/7/node = SubResource("VisualShaderNodeCustom_kwjoc")
nodes/fragment/7/position = Vector2(100, 260)
nodes/fragment/connections = PackedInt32Array(6, 0, 7, 0, 4, 0, 7, 1, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_wu7lk"]
shader = SubResource("VisualShader_unmd3")

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_1ynhs"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_rt0m3"]
texture = SubResource("CompressedTexture2D_1ynhs")
texture_type = 1

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_edt0t"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_xhs62"]
texture = SubResource("CompressedTexture2D_edt0t")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_u0kr0"]
default_input_values = [2, 0.5]
initialized = true
script = ExtResource("6_d40l5")

[sub_resource type="VisualShader" id="VisualShader_mvyjv"]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_6 : source_color;
uniform sampler2D tex_frg_4 : source_color;


// BlendOverlay

		float blend_overlay_f(float c1, float c2) {
			return (c1 < 0.5) ? (2.0*c1*c2) : (1.0-2.0*(1.0-c1)*(1.0-c2));
		}

		vec3 blend_overlay(vec3 c1, vec3 c2, float opacity) {
			return opacity*vec3(blend_overlay_f(c1.x, c2.x), blend_overlay_f(c1.y, c2.y), blend_overlay_f(c1.z, c2.z)) + (1.0-opacity)*c2;
		}
	

void fragment() {
// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, UV);


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


	vec3 n_out7p0;
// BlendOverlay:7
	float n_in7p2 = 0.50000;
	{
		n_out7p0.rgb = blend_overlay(vec3(n_out6p0.xyz).rgb, vec3(n_out4p0.xyz).rgb, n_in7p2);
	}


// Output:0
	COLOR.rgb = n_out7p0;


}
"
graph_offset = Vector2(-234, 203)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(420, 240)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_rt0m3")
nodes/fragment/4/position = Vector2(-240, 320)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_xhs62")
nodes/fragment/6/position = Vector2(-240, 60)
nodes/fragment/7/node = SubResource("VisualShaderNodeCustom_u0kr0")
nodes/fragment/7/position = Vector2(118, 272)
nodes/fragment/connections = PackedInt32Array(6, 0, 7, 0, 4, 0, 7, 1, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_kkpnf"]
shader = SubResource("VisualShader_mvyjv")

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_vxpi2"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_8w4nd"]
texture = SubResource("CompressedTexture2D_vxpi2")
texture_type = 1

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_oxl1k"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_8firm"]
texture = SubResource("CompressedTexture2D_oxl1k")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_1wfak"]
default_input_values = [2, 0.5]
initialized = true
script = ExtResource("7_wcbap")

[sub_resource type="VisualShader" id="VisualShader_ne8xj"]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_6 : source_color;
uniform sampler2D tex_frg_4 : source_color;


// BlendHardLight

		float blend_overlay_f(float c1, float c2) {
			return (c1 < 0.5) ? (2.0*c1*c2) : (1.0-2.0*(1.0-c1)*(1.0-c2));
		}
		
		vec3 blend_overlay(vec3 c1, vec3 c2, float opacity) {
			return opacity*vec3(blend_overlay_f(c1.x, c2.x), blend_overlay_f(c1.y, c2.y), blend_overlay_f(c1.z, c2.z)) + (1.0-opacity)*c2;
		}
		
		vec3 blend_hard_light(vec3 c1, vec3 c2, float opacity) {
			return opacity*0.5*(c1*c2+blend_overlay(c1, c2, 1.0)) + (1.0-opacity)*c2;
		}
	

void fragment() {
// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, UV);


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


	vec3 n_out7p0;
// BlendHardLight:7
	float n_in7p2 = 0.50000;
	{
		n_out7p0.rgb = blend_hard_light(vec3(n_out6p0.xyz).rgb, vec3(n_out4p0.xyz).rgb, n_in7p2);
	}


// Output:0
	COLOR.rgb = n_out7p0;


}
"
graph_offset = Vector2(-156.7, 259.5)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(420, 240)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_8w4nd")
nodes/fragment/4/position = Vector2(-240, 320)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_8firm")
nodes/fragment/6/position = Vector2(-240, 60)
nodes/fragment/7/node = SubResource("VisualShaderNodeCustom_1wfak")
nodes/fragment/7/position = Vector2(97.5455, 268.636)
nodes/fragment/connections = PackedInt32Array(6, 0, 7, 0, 4, 0, 7, 1, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_lkbav"]
shader = SubResource("VisualShader_ne8xj")

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_00ke3"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_elge6"]
texture = SubResource("CompressedTexture2D_00ke3")
texture_type = 1

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_cp33d"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_6h42k"]
texture = SubResource("CompressedTexture2D_cp33d")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_xn7bc"]
default_input_values = [2, 0.5]
initialized = true
script = ExtResource("8_oqb1v")

[sub_resource type="VisualShader" id="VisualShader_peul7"]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_6 : source_color;
uniform sampler2D tex_frg_4 : source_color;


// BlendSoftLight

		float blend_soft_light_f(float c1, float c2) {
			return (c2 < 0.5) ? (2.0*c1*c2+c1*c1*(1.0-2.0*c2)) : 2.0*c1*(1.0-c2)+sqrt(c1)*(2.0*c2-1.0);
		}

		vec3 blend_soft_light(vec3 c1, vec3 c2, float opacity) {
			return opacity*vec3(blend_soft_light_f(c1.x, c2.x), blend_soft_light_f(c1.y, c2.y), blend_soft_light_f(c1.z, c2.z)) + (1.0-opacity)*c2;
		}
	

void fragment() {
// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, UV);


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


	vec3 n_out7p0;
// BlendSoftLight:7
	float n_in7p2 = 0.50000;
	{
		n_out7p0.rgb = blend_soft_light(vec3(n_out6p0.xyz).rgb, vec3(n_out4p0.xyz).rgb, n_in7p2);
	}


// Output:0
	COLOR.rgb = n_out7p0;


}
"
graph_offset = Vector2(-193, 191)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(420, 240)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_elge6")
nodes/fragment/4/position = Vector2(-240, 320)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_6h42k")
nodes/fragment/6/position = Vector2(-240, 60)
nodes/fragment/7/node = SubResource("VisualShaderNodeCustom_xn7bc")
nodes/fragment/7/position = Vector2(84, 294)
nodes/fragment/connections = PackedInt32Array(6, 0, 7, 0, 4, 0, 7, 1, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_qayvd"]
shader = SubResource("VisualShader_peul7")

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_6ow1i"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_seack"]
texture = SubResource("CompressedTexture2D_6ow1i")
texture_type = 1

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_17q7d"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_ao4mv"]
texture = SubResource("CompressedTexture2D_17q7d")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_aavj5"]
default_input_values = [2, 0.5]
initialized = true
script = ExtResource("9_hsv27")

[sub_resource type="VisualShader" id="VisualShader_3ay0w"]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_6 : source_color;
uniform sampler2D tex_frg_4 : source_color;


// BlendBurn

		float blend_burn_f(float c1, float c2) {
			return (c1==0.0)?c1:max((1.0-((1.0-c2)/c1)),0.0);
		}

		vec3 blend_burn(vec3 c1, vec3 c2, float opacity) {
			return opacity*vec3(blend_burn_f(c1.x, c2.x), blend_burn_f(c1.y, c2.y), blend_burn_f(c1.z, c2.z)) + (1.0-opacity)*c2;
		}
	

void fragment() {
// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, UV);


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


	vec3 n_out7p0;
// BlendBurn:7
	float n_in7p2 = 0.50000;
	{
		n_out7p0.rgb = blend_burn(vec3(n_out6p0.xyz).rgb, vec3(n_out4p0.xyz).rgb, n_in7p2);
	}


// Output:0
	COLOR.rgb = n_out7p0;


}
"
graph_offset = Vector2(-203, 202)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(420, 240)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_seack")
nodes/fragment/4/position = Vector2(-240, 320)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_ao4mv")
nodes/fragment/6/position = Vector2(-240, 60)
nodes/fragment/7/node = SubResource("VisualShaderNodeCustom_aavj5")
nodes/fragment/7/position = Vector2(115, 290)
nodes/fragment/connections = PackedInt32Array(6, 0, 7, 0, 4, 0, 7, 1, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_deh4d"]
shader = SubResource("VisualShader_3ay0w")

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_8y6sy"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_kj7vr"]
texture = SubResource("CompressedTexture2D_8y6sy")
texture_type = 1

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_vy1rt"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_5cu28"]
texture = SubResource("CompressedTexture2D_vy1rt")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_lvjdb"]
default_input_values = [2, 0.5]
initialized = true
script = ExtResource("10_5tjq4")

[sub_resource type="VisualShader" id="VisualShader_dt03t"]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_6 : source_color;
uniform sampler2D tex_frg_4 : source_color;


// BlendDodge

		float blend_dodge_f(float c1, float c2) {
			return (c1==1.0)?c1:min(c2/(1.0-c1),1.0);
		}

		vec3 blend_dodge(vec3 c1, vec3 c2, float opacity) {
			return opacity*vec3(blend_dodge_f(c1.x, c2.x), blend_dodge_f(c1.y, c2.y), blend_dodge_f(c1.z, c2.z)) + (1.0-opacity)*c2;
		}
	

void fragment() {
// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, UV);


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


	vec3 n_out7p0;
// BlendDodge:7
	float n_in7p2 = 0.50000;
	{
		n_out7p0.rgb = blend_dodge(vec3(n_out6p0.xyz).rgb, vec3(n_out4p0.xyz).rgb, n_in7p2);
	}


// Output:0
	COLOR.rgb = n_out7p0;


}
"
graph_offset = Vector2(-139, 189)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(420, 240)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_kj7vr")
nodes/fragment/4/position = Vector2(-240, 320)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_5cu28")
nodes/fragment/6/position = Vector2(-240, 60)
nodes/fragment/7/node = SubResource("VisualShaderNodeCustom_lvjdb")
nodes/fragment/7/position = Vector2(103, 293)
nodes/fragment/connections = PackedInt32Array(6, 0, 7, 0, 4, 0, 7, 1, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_wdg44"]
shader = SubResource("VisualShader_dt03t")

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_ooykv"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_y28sw"]
texture = SubResource("CompressedTexture2D_ooykv")
texture_type = 1

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_dvrwt"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_pn8yk"]
texture = SubResource("CompressedTexture2D_dvrwt")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_hhvwi"]
default_input_values = [2, 0.5]
initialized = true
script = ExtResource("11_jra88")

[sub_resource type="VisualShader" id="VisualShader_mti26"]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_6 : source_color;
uniform sampler2D tex_frg_4 : source_color;


// BlendLighten

		vec3 blend_lighten(vec3 c1, vec3 c2, float opacity) {
			return opacity*max(c1, c2) + (1.0-opacity)*c2;
		}
	

void fragment() {
// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, UV);


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


	vec3 n_out7p0;
// BlendLighten:7
	float n_in7p2 = 0.50000;
	{
		n_out7p0.rgb = blend_lighten(vec3(n_out6p0.xyz).rgb, vec3(n_out4p0.xyz).rgb, n_in7p2);
	}


// Output:0
	COLOR.rgb = n_out7p0;


}
"
graph_offset = Vector2(-225, 213)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(420, 240)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_y28sw")
nodes/fragment/4/position = Vector2(-240, 320)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_pn8yk")
nodes/fragment/6/position = Vector2(-240, 60)
nodes/fragment/7/node = SubResource("VisualShaderNodeCustom_hhvwi")
nodes/fragment/7/position = Vector2(94, 237)
nodes/fragment/connections = PackedInt32Array(6, 0, 7, 0, 4, 0, 7, 1, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_vyc0v"]
shader = SubResource("VisualShader_mti26")

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_7yhob"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_tsdn0"]
texture = SubResource("CompressedTexture2D_7yhob")
texture_type = 1

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_78r8g"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_rsvo0"]
texture = SubResource("CompressedTexture2D_78r8g")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_weqb1"]
default_input_values = [2, 0.5]
initialized = true
script = ExtResource("12_vqxt2")

[sub_resource type="VisualShader" id="VisualShader_4a1r1"]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_6 : source_color;
uniform sampler2D tex_frg_4 : source_color;


// BlendDarken

		vec3 blend_darken(vec3 c1, vec3 c2, float opacity) {
			return opacity*min(c1, c2) + (1.0-opacity)*c2;
		}
	

void fragment() {
// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, UV);


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


	vec3 n_out7p0;
// BlendDarken:7
	float n_in7p2 = 0.50000;
	{
		n_out7p0.rgb = blend_darken(vec3(n_out6p0.xyz).rgb, vec3(n_out4p0.xyz).rgb, n_in7p2);
	}


// Output:0
	COLOR.rgb = n_out7p0;


}
"
graph_offset = Vector2(-30.4, 135.1)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(420, 240)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_tsdn0")
nodes/fragment/4/position = Vector2(-240, 320)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_rsvo0")
nodes/fragment/6/position = Vector2(-240, 60)
nodes/fragment/7/node = SubResource("VisualShaderNodeCustom_weqb1")
nodes/fragment/7/position = Vector2(100, 260)
nodes/fragment/connections = PackedInt32Array(6, 0, 7, 0, 4, 0, 7, 1, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_h8ry5"]
shader = SubResource("VisualShader_4a1r1")

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_wxvs1"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_6x7wi"]
texture = SubResource("CompressedTexture2D_wxvs1")
texture_type = 1

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_upvxc"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_k15wi"]
texture = SubResource("CompressedTexture2D_upvxc")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_be4ge"]
default_input_values = [2, 0.5]
initialized = true
script = ExtResource("13_laece")

[sub_resource type="VisualShader" id="VisualShader_0hxt1"]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_6 : source_color;
uniform sampler2D tex_frg_4 : source_color;


// BlendDifference

		vec3 blend_difference(vec3 c1, vec3 c2, float opacity) {
			return opacity*clamp(c2-c1, vec3(0.0), vec3(1.0)) + (1.0-opacity)*c2;
		}
	

void fragment() {
// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, UV);


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


	vec3 n_out7p0;
// BlendDifference:7
	float n_in7p2 = 0.50000;
	{
		n_out7p0.rgb = blend_difference(vec3(n_out6p0.xyz).rgb, vec3(n_out4p0.xyz).rgb, n_in7p2);
	}


// Output:0
	COLOR.rgb = n_out7p0;


}
"
graph_offset = Vector2(-208.7, 258.3)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(420, 240)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_6x7wi")
nodes/fragment/4/position = Vector2(-240, 320)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_k15wi")
nodes/fragment/6/position = Vector2(-240, 60)
nodes/fragment/7/node = SubResource("VisualShaderNodeCustom_be4ge")
nodes/fragment/7/position = Vector2(102.091, 257.545)
nodes/fragment/connections = PackedInt32Array(6, 0, 7, 0, 4, 0, 7, 1, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_d3mgk"]
shader = SubResource("VisualShader_0hxt1")

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_rdblh"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_x4y2t"]
texture = SubResource("CompressedTexture2D_rdblh")
texture_type = 1

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_m2qfr"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_gj8i7"]
texture = SubResource("CompressedTexture2D_m2qfr")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_6fheq"]
default_input_values = [2, 0.5]
initialized = true
script = ExtResource("14_lxeqv")

[sub_resource type="VisualShader" id="VisualShader_y0dk6"]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_6 : source_color;
uniform sampler2D tex_frg_4 : source_color;


// BlendAdditive

		vec3 blend_additive(vec3 c1, vec3 c2, float oppacity) {
			return c2 + c1 * oppacity;
		}
	

void fragment() {
// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, UV);


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


	vec3 n_out7p0;
// BlendAdditive:7
	float n_in7p2 = 0.50000;
	{
		n_out7p0.rgb = blend_additive(vec3(n_out6p0.xyz).rgb, vec3(n_out4p0.xyz).rgb, n_in7p2);
	}


// Output:0
	COLOR.rgb = n_out7p0;


}
"
graph_offset = Vector2(-150, 175)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(420, 240)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_x4y2t")
nodes/fragment/4/position = Vector2(-240, 320)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_gj8i7")
nodes/fragment/6/position = Vector2(-240, 60)
nodes/fragment/7/node = SubResource("VisualShaderNodeCustom_6fheq")
nodes/fragment/7/position = Vector2(120, 260)
nodes/fragment/connections = PackedInt32Array(6, 0, 7, 0, 4, 0, 7, 1, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_uof40"]
shader = SubResource("VisualShader_y0dk6")

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_hkxip"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_lkoh1"]
texture = SubResource("CompressedTexture2D_hkxip")
texture_type = 1

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_1fmn1"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_jxr11"]
texture = SubResource("CompressedTexture2D_1fmn1")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_ud1un"]
default_input_values = [2, 0.5]
initialized = true
script = ExtResource("15_meo86")

[sub_resource type="VisualShader" id="VisualShader_qrxbr"]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_6 : source_color;
uniform sampler2D tex_frg_4 : source_color;


// BlendAddSub

		vec3 blend_addsub(vec3 c1, vec3 c2, float oppacity) {
			return c2 + (c1 - .5) * 2.0 * oppacity;
		}
	

void fragment() {
// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, UV);


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


	vec3 n_out7p0;
// BlendAddSub:7
	float n_in7p2 = 0.50000;
	{
		n_out7p0.rgb = blend_addsub(vec3(n_out6p0.xyz).rgb, vec3(n_out4p0.xyz).rgb, n_in7p2);
	}


// Output:0
	COLOR.rgb = n_out7p0;


}
"
graph_offset = Vector2(-163, 197)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(420, 240)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_lkoh1")
nodes/fragment/4/position = Vector2(-240, 320)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_jxr11")
nodes/fragment/6/position = Vector2(-240, 60)
nodes/fragment/7/node = SubResource("VisualShaderNodeCustom_ud1un")
nodes/fragment/7/position = Vector2(130, 261)
nodes/fragment/connections = PackedInt32Array(6, 0, 7, 0, 4, 0, 7, 1, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_eli8g"]
shader = SubResource("VisualShader_qrxbr")

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_qiwvk"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_uknmv"]
texture = SubResource("CompressedTexture2D_qiwvk")
texture_type = 1

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_f85gt"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_6n35c"]
texture = SubResource("CompressedTexture2D_f85gt")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_jpw1j"]
default_input_values = [2, 0.5]
initialized = true
script = ExtResource("16_dmlhh")

[sub_resource type="VisualShader" id="VisualShader_fahnp"]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_6 : source_color;
uniform sampler2D tex_frg_4 : source_color;


// BlendLinearLight

		float blend_linear_light_f(float c1, float c2) {
			return (c1 + 2.0 * c2) - 1.0;
		}
		
		vec3 blend_linear_light(vec3 c1, vec3 c2, float opacity) {
			return opacity*vec3(blend_linear_light_f(c1.x, c2.x), blend_linear_light_f(c1.y, c2.y), blend_linear_light_f(c1.z, c2.z)) + (1.0-opacity)*c2;
		}
	

void fragment() {
// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, UV);


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


	vec3 n_out7p0;
// BlendLinearLight:7
	float n_in7p2 = 0.50000;
	{
		n_out7p0.rgb = blend_linear_light(vec3(n_out6p0.xyz).rgb, vec3(n_out4p0.xyz).rgb, n_in7p2);
	}


// Output:0
	COLOR.rgb = n_out7p0;


}
"
graph_offset = Vector2(-68.7, 189.3)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(420, 240)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_uknmv")
nodes/fragment/4/position = Vector2(-240, 320)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_6n35c")
nodes/fragment/6/position = Vector2(-240, 60)
nodes/fragment/7/node = SubResource("VisualShaderNodeCustom_jpw1j")
nodes/fragment/7/position = Vector2(114, 279)
nodes/fragment/connections = PackedInt32Array(6, 0, 7, 0, 4, 0, 7, 1, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_nmcdm"]
shader = SubResource("VisualShader_fahnp")

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_pxd8u"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_6n6vq"]
texture = SubResource("CompressedTexture2D_pxd8u")
texture_type = 1

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_j4xhf"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_t70bk"]
texture = SubResource("CompressedTexture2D_j4xhf")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_qs8wi"]
default_input_values = [2, 0.5]
initialized = true
script = ExtResource("17_s2asn")

[sub_resource type="VisualShader" id="VisualShader_bkutg"]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_6 : source_color;
uniform sampler2D tex_frg_4 : source_color;


// BlendVividLight

		float blend_vivid_light_f(float c1, float c2) {
			return (c1 < 0.5) ? 1.0 - (1.0 - c2) / (2.0 * c1) : c2 / (2.0 * (1.0 - c1));
		}
		
		vec3 blend_vivid_light(vec3 c1, vec3 c2, float opacity) {
			return opacity*vec3(blend_vivid_light_f(c1.x, c2.x), blend_vivid_light_f(c1.y, c2.y), blend_vivid_light_f(c1.z, c2.z)) + (1.0-opacity)*c2;
		}
	

void fragment() {
// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, UV);


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


	vec3 n_out7p0;
// BlendVividLight:7
	float n_in7p2 = 0.50000;
	{
		n_out7p0.rgb = blend_vivid_light(vec3(n_out6p0.xyz).rgb, vec3(n_out4p0.xyz).rgb, n_in7p2);
	}


// Output:0
	COLOR.rgb = n_out7p0;


}
"
graph_offset = Vector2(-238.697, 190.182)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(420, 240)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_6n6vq")
nodes/fragment/4/position = Vector2(-240, 320)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_t70bk")
nodes/fragment/6/position = Vector2(-240, 60)
nodes/fragment/7/node = SubResource("VisualShaderNodeCustom_qs8wi")
nodes/fragment/7/position = Vector2(81.7338, 260.9)
nodes/fragment/connections = PackedInt32Array(6, 0, 7, 0, 4, 0, 7, 1, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_idbae"]
shader = SubResource("VisualShader_bkutg")

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_wcipp"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_mgtt1"]
texture = SubResource("CompressedTexture2D_wcipp")
texture_type = 1

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_vg1kd"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_skt4l"]
texture = SubResource("CompressedTexture2D_vg1kd")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_4hvqo"]
default_input_values = [2, 0.5]
initialized = true
script = ExtResource("18_kji71")

[sub_resource type="VisualShader" id="VisualShader_vs058"]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_6 : source_color;
uniform sampler2D tex_frg_4 : source_color;


// BlendPinLight

		float blend_pin_light_f( float c1, float c2) {
			return (2.0 * c1 - 1.0 > c2) ? 2.0 * c1 - 1.0 : ((c1 < 0.5 * c2) ? 2.0 * c1 : c2);
		}
		
		vec3 blend_pin_light(vec3 c1, vec3 c2, float opacity) {
			return opacity*vec3(blend_pin_light_f(c1.x, c2.x), blend_pin_light_f(c1.y, c2.y), blend_pin_light_f(c1.z, c2.z)) + (1.0-opacity)*c2;
		}
	

void fragment() {
// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, UV);


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


	vec3 n_out7p0;
// BlendPinLight:7
	float n_in7p2 = 0.50000;
	{
		n_out7p0.rgb = blend_pin_light(vec3(n_out6p0.xyz).rgb, vec3(n_out4p0.xyz).rgb, n_in7p2);
	}


// Output:0
	COLOR.rgb = n_out7p0;


}
"
graph_offset = Vector2(-228, 223)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(420, 240)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_mgtt1")
nodes/fragment/4/position = Vector2(-240, 320)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_skt4l")
nodes/fragment/6/position = Vector2(-240, 60)
nodes/fragment/7/node = SubResource("VisualShaderNodeCustom_4hvqo")
nodes/fragment/7/position = Vector2(77, 273)
nodes/fragment/connections = PackedInt32Array(6, 0, 7, 0, 4, 0, 7, 1, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_4c0lm"]
shader = SubResource("VisualShader_vs058")

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_w77h0"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_pci2l"]
texture = SubResource("CompressedTexture2D_w77h0")
texture_type = 1

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_ltems"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_4j1w7"]
texture = SubResource("CompressedTexture2D_ltems")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_ehnmp"]
default_input_values = [2, 0.5]
initialized = true
script = ExtResource("7_wcbap")

[sub_resource type="VisualShader" id="VisualShader_fch6n"]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_6 : source_color;
uniform sampler2D tex_frg_4 : source_color;


// BlendHardLight

		float blend_overlay_f(float c1, float c2) {
			return (c1 < 0.5) ? (2.0*c1*c2) : (1.0-2.0*(1.0-c1)*(1.0-c2));
		}
		
		vec3 blend_overlay(vec3 c1, vec3 c2, float opacity) {
			return opacity*vec3(blend_overlay_f(c1.x, c2.x), blend_overlay_f(c1.y, c2.y), blend_overlay_f(c1.z, c2.z)) + (1.0-opacity)*c2;
		}
		
		vec3 blend_hard_light(vec3 c1, vec3 c2, float opacity) {
			return opacity*0.5*(c1*c2+blend_overlay(c1, c2, 1.0)) + (1.0-opacity)*c2;
		}
	

void fragment() {
// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, UV);


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


	vec3 n_out7p0;
// BlendHardLight:7
	float n_in7p2 = 0.50000;
	{
		n_out7p0.rgb = blend_hard_light(vec3(n_out6p0.xyz).rgb, vec3(n_out4p0.xyz).rgb, n_in7p2);
	}


// Output:0
	COLOR.rgb = n_out7p0;


}
"
graph_offset = Vector2(-169, 219)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(420, 240)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_pci2l")
nodes/fragment/4/position = Vector2(-240, 320)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_4j1w7")
nodes/fragment/6/position = Vector2(-240, 60)
nodes/fragment/7/node = SubResource("VisualShaderNodeCustom_ehnmp")
nodes/fragment/7/position = Vector2(120, 240)
nodes/fragment/connections = PackedInt32Array(6, 0, 7, 0, 4, 0, 7, 1, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_pnkpk"]
shader = SubResource("VisualShader_fch6n")

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_3qkdn"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_fbka3"]
texture = SubResource("CompressedTexture2D_3qkdn")
texture_type = 1

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_lavva"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_n2e2a"]
texture = SubResource("CompressedTexture2D_lavva")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_oaswl"]
default_input_values = [2, 0.5]
initialized = true
script = ExtResource("19_gkxhr")

[sub_resource type="VisualShader" id="VisualShader_nbmqa"]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_6 : source_color;
uniform sampler2D tex_frg_4 : source_color;


// BlendExclusion

		float blend_exclusion_f(float c1, float c2) {
			return c1 + c2 - 2.0 * c1 * c2;
		}
		
		vec3 blend_exclusion(vec3 c1, vec3 c2, float opacity) {
			return opacity*vec3(blend_exclusion_f(c1.x, c2.x), blend_exclusion_f(c1.y, c2.y), blend_exclusion_f(c1.z, c2.z)) + (1.0-opacity)*c2;
		}
	

void fragment() {
// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, UV);


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


	vec3 n_out7p0;
// BlendExclusion:7
	float n_in7p2 = 0.50000;
	{
		n_out7p0.rgb = blend_exclusion(vec3(n_out6p0.xyz).rgb, vec3(n_out4p0.xyz).rgb, n_in7p2);
	}


// Output:0
	COLOR.rgb = n_out7p0;


}
"
graph_offset = Vector2(-138, 172)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(420, 240)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_fbka3")
nodes/fragment/4/position = Vector2(-240, 320)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_n2e2a")
nodes/fragment/6/position = Vector2(-240, 60)
nodes/fragment/7/node = SubResource("VisualShaderNodeCustom_oaswl")
nodes/fragment/7/position = Vector2(133, 279)
nodes/fragment/connections = PackedInt32Array(6, 0, 7, 0, 4, 0, 7, 1, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_r53ff"]
shader = SubResource("VisualShader_nbmqa")

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_oqyir"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_bkrbv"]
texture = SubResource("CompressedTexture2D_oqyir")
texture_type = 1

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_7rrsv"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_4ci2j"]
texture = SubResource("CompressedTexture2D_7rrsv")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_qy2c2"]
default_input_values = [2, 0.5]
initialized = true
script = ExtResource("20_d7i5c")

[sub_resource type="VisualShader" id="VisualShader_6so37"]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_6 : source_color;
uniform sampler2D tex_frg_4 : source_color;


// BlendGammaIllumination

		float blend_gamma_illumination_f(float c1, float c2) 
		{
			return (1.0 - pow(c2, (1.0 / c1)));
		}
		
		vec3 blend_gamma_illumination(vec3 c1, vec3 c2, float opacity)
		{
			return opacity*vec3(blend_gamma_illumination_f(c1.x, c2.x), blend_gamma_illumination_f(c1.y, c2.y), blend_gamma_illumination_f(c1.z, c2.z)) + (1.0-opacity)*c2;
		}
	

void fragment() {
// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, UV);


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


	vec3 n_out7p0;
// BlendGammaIllumination:7
	float n_in7p2 = 0.50000;
	{
		n_out7p0.rgb = blend_gamma_illumination(vec3(n_out6p0.xyz).rgb, vec3(n_out4p0.xyz).rgb, n_in7p2);
	}


// Output:0
	COLOR.rgb = n_out7p0;


}
"
graph_offset = Vector2(-187, 161)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(420, 240)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_bkrbv")
nodes/fragment/4/position = Vector2(-240, 320)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_4ci2j")
nodes/fragment/6/position = Vector2(-240, 60)
nodes/fragment/7/node = SubResource("VisualShaderNodeCustom_qy2c2")
nodes/fragment/7/position = Vector2(80, 260)
nodes/fragment/connections = PackedInt32Array(6, 0, 7, 0, 4, 0, 7, 1, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_klgwi"]
shader = SubResource("VisualShader_6so37")

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_u3em0"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_tctwu"]
texture = SubResource("CompressedTexture2D_u3em0")
texture_type = 1

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_l1c1l"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_43pa2"]
texture = SubResource("CompressedTexture2D_l1c1l")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_w3tct"]
default_input_values = [2, 0.5]
initialized = true
script = ExtResource("21_fpode")

[sub_resource type="VisualShader" id="VisualShader_x1r6j"]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_6 : source_color;
uniform sampler2D tex_frg_4 : source_color;


// BlendGammaLight

		float blend_gamma_light_f(float c1, float c2) 
		{
			return pow(c2, c1);
		}
		
		vec3 blend_gamma_light(vec3 c1, vec3 c2, float opacity)
		{
			return opacity*vec3(blend_gamma_light_f(c1.x, c2.x), blend_gamma_light_f(c1.y, c2.y), blend_gamma_light_f(c1.z, c2.z)) + (1.0-opacity)*c2;
		}
	

void fragment() {
// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, UV);


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


	vec3 n_out7p0;
// BlendGammaLight:7
	float n_in7p2 = 0.50000;
	{
		n_out7p0.rgb = blend_gamma_light(vec3(n_out6p0.xyz).rgb, vec3(n_out4p0.xyz).rgb, n_in7p2);
	}


// Output:0
	COLOR.rgb = n_out7p0;


}
"
graph_offset = Vector2(-165, 177)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(420, 240)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_tctwu")
nodes/fragment/4/position = Vector2(-240, 320)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_43pa2")
nodes/fragment/6/position = Vector2(-240, 60)
nodes/fragment/7/node = SubResource("VisualShaderNodeCustom_w3tct")
nodes/fragment/7/position = Vector2(86, 279)
nodes/fragment/connections = PackedInt32Array(6, 0, 7, 0, 4, 0, 7, 1, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_5g7rp"]
shader = SubResource("VisualShader_x1r6j")

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_3rhjo"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_xy11v"]
texture = SubResource("CompressedTexture2D_3rhjo")
texture_type = 1

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_4yyob"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_70u2u"]
texture = SubResource("CompressedTexture2D_4yyob")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_i2k47"]
default_input_values = [2, 0.5]
initialized = true
script = ExtResource("22_wf7lc")

[sub_resource type="VisualShader" id="VisualShader_5pcav"]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_6 : source_color;
uniform sampler2D tex_frg_4 : source_color;


// BlendGammaDark

		float blend_gamma_dark_f(float c1, float c2)
		{
			return pow(c2, (1.0 / c1));
		}
		
		vec3 blend_gamma_dark(vec3 c1, vec3 c2, float opacity)
		{
			return opacity*vec3(blend_gamma_dark_f(c1.x, c2.x), blend_gamma_dark_f(c1.y, c2.y), blend_gamma_dark_f(c1.z, c2.z)) + (1.0-opacity)*c2;
		}
	

void fragment() {
// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, UV);


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


	vec3 n_out7p0;
// BlendGammaDark:7
	float n_in7p2 = 0.50000;
	{
		n_out7p0.rgb = blend_gamma_dark(vec3(n_out6p0.xyz).rgb, vec3(n_out4p0.xyz).rgb, n_in7p2);
	}


// Output:0
	COLOR.rgb = n_out7p0;


}
"
graph_offset = Vector2(-190, 231)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(420, 240)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_xy11v")
nodes/fragment/4/position = Vector2(-240, 320)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_70u2u")
nodes/fragment/6/position = Vector2(-240, 60)
nodes/fragment/7/node = SubResource("VisualShaderNodeCustom_i2k47")
nodes/fragment/7/position = Vector2(111, 279)
nodes/fragment/connections = PackedInt32Array(6, 0, 7, 0, 4, 0, 7, 1, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ommw6"]
shader = SubResource("VisualShader_5pcav")

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_tlqw3"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_thkhw"]
texture = SubResource("CompressedTexture2D_tlqw3")
texture_type = 1

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_hview"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_2hipn"]
texture = SubResource("CompressedTexture2D_hview")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_rbhk2"]
default_input_values = [2, 0.5]
initialized = true
script = ExtResource("23_451rj")

[sub_resource type="VisualShader" id="VisualShader_t28pt"]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_6 : source_color;
uniform sampler2D tex_frg_4 : source_color;


// BlendLuminosity

		float blend_luminosity_f( float c1, float c2 )
		{
			float dLum = dot(vec3(c2), vec3(0.3, 0.59, 0.11));
			float sLum = dot(vec3(c1), vec3(0.3, 0.59, 0.11));
			float lum = sLum - dLum;
			float c = c2 + lum;
			if(c < 0.0) return sLum + ((c - sLum) * sLum) / (sLum - c);
			else if(c > 1.0) return sLum + ((c - sLum) * (1.0 - sLum)) / (c - sLum);
			else return c;
		}
		
		vec3 blend_luminosity(vec3 c1, vec3 c2, float opacity)
		{
			return opacity*vec3(blend_luminosity_f(c1.x, c2.x), blend_luminosity_f(c1.y, c2.y), blend_luminosity_f(c1.z, c2.z)) + (1.0-opacity)*c2;
		}
	

void fragment() {
// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, UV);


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


	vec3 n_out7p0;
// BlendLuminosity:7
	float n_in7p2 = 0.50000;
	{
		n_out7p0.rgb = blend_luminosity(vec3(n_out6p0.xyz).rgb, vec3(n_out4p0.xyz).rgb, n_in7p2);
	}


// Output:0
	COLOR.rgb = n_out7p0;


}
"
graph_offset = Vector2(-255.786, 142.429)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(420, 240)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_thkhw")
nodes/fragment/4/position = Vector2(-240, 320)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_2hipn")
nodes/fragment/6/position = Vector2(-240, 60)
nodes/fragment/7/node = SubResource("VisualShaderNodeCustom_rbhk2")
nodes/fragment/7/position = Vector2(82.7359, 260.072)
nodes/fragment/connections = PackedInt32Array(6, 0, 7, 0, 4, 0, 7, 1, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_p71em"]
shader = SubResource("VisualShader_t28pt")

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_xrhoy"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_t0mwb"]
texture = SubResource("CompressedTexture2D_xrhoy")
texture_type = 1

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_8wahj"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_aqwmg"]
texture = SubResource("CompressedTexture2D_8wahj")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_fpgxy"]
default_input_values = [2, 0.5]
initialized = true
script = ExtResource("24_fak3r")

[sub_resource type="VisualShader" id="VisualShader_t0pob"]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_6 : source_color;
uniform sampler2D tex_frg_4 : source_color;


// BlendLinearBurn

		float blend_linear_burn_f(float c1, float c2) {
			return 1.0- ((1.0 - c1) + (1.0 - c2));
		}
		
		vec3 linear_blend_burn(vec3 c1, vec3 c2, float opacity) {
			return opacity*vec3(blend_linear_burn_f(c1.x, c2.x), blend_linear_burn_f(c1.y, c2.y), blend_linear_burn_f(c1.z, c2.z)) + (1.0-opacity)*c2;
		}
	

void fragment() {
// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, UV);


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


	vec3 n_out7p0;
// BlendLinearBurn:7
	float n_in7p2 = 0.50000;
	{
		n_out7p0.rgb = linear_blend_burn(vec3(n_out6p0.xyz).rgb, vec3(n_out4p0.xyz).rgb, n_in7p2);
	}


// Output:0
	COLOR.rgb = n_out7p0;


}
"
graph_offset = Vector2(-75, 202)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(420, 240)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_t0mwb")
nodes/fragment/4/position = Vector2(-240, 320)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_aqwmg")
nodes/fragment/6/position = Vector2(-240, 60)
nodes/fragment/7/node = SubResource("VisualShaderNodeCustom_fpgxy")
nodes/fragment/7/position = Vector2(113, 270)
nodes/fragment/connections = PackedInt32Array(6, 0, 7, 0, 4, 0, 7, 1, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_fv25u"]
shader = SubResource("VisualShader_t0pob")

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_73dxk"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_ro1fw"]
texture = SubResource("CompressedTexture2D_73dxk")
texture_type = 1

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_8rya1"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_sh8cd"]
texture = SubResource("CompressedTexture2D_8rya1")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_r87l6"]
default_input_values = [2, 0.5]
initialized = true
script = ExtResource("25_1twgi")

[sub_resource type="VisualShader" id="VisualShader_rnl3p"]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_6 : source_color;
uniform sampler2D tex_frg_4 : source_color;


// BlendLighterColor

		float blend_lighter_color_f(float c1, float c2) 
		{
			return c1 > c2 ? c1 : c2;
		}
		
		vec3 blend_lighter_color(vec3 c1, vec3 c2, float opacity)
		{
			return opacity*vec3(blend_lighter_color_f(c1.x, c2.x), blend_lighter_color_f(c1.y, c2.y), blend_lighter_color_f(c1.z, c2.z)) + (1.0-opacity)*c2;
		}
	

void fragment() {
// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, UV);


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


	vec3 n_out7p0;
// BlendLighterColor:7
	float n_in7p2 = 0.50000;
	{
		n_out7p0.rgb = blend_lighter_color(vec3(n_out6p0.xyz).rgb, vec3(n_out4p0.xyz).rgb, n_in7p2);
	}


// Output:0
	COLOR.rgb = n_out7p0;


}
"
graph_offset = Vector2(-261, 239)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(420, 240)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_ro1fw")
nodes/fragment/4/position = Vector2(-240, 320)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_sh8cd")
nodes/fragment/6/position = Vector2(-240, 60)
nodes/fragment/7/node = SubResource("VisualShaderNodeCustom_r87l6")
nodes/fragment/7/position = Vector2(90, 272)
nodes/fragment/connections = PackedInt32Array(6, 0, 7, 0, 4, 0, 7, 1, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_n1onk"]
shader = SubResource("VisualShader_rnl3p")

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_abuxd"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_ki8cq"]
texture = SubResource("CompressedTexture2D_abuxd")
texture_type = 1

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_xwk36"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_qf4do"]
texture = SubResource("CompressedTexture2D_xwk36")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_gc53a"]
default_input_values = [2, 0.5]
initialized = true
script = ExtResource("26_37c4m")

[sub_resource type="VisualShader" id="VisualShader_8l46s"]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_6 : source_color;
uniform sampler2D tex_frg_4 : source_color;


// BlendDarkerColor

		float blend_darker_color_f( float c1, float c2 )
		{
			return (c1 < c2) ? c1 : c2;
		}
		
		vec3 blend_darker_color(vec3 c1, vec3 c2, float opacity)
		{
			return opacity*vec3(blend_darker_color_f(c1.x, c2.x), blend_darker_color_f(c1.y, c2.y), blend_darker_color_f(c1.z, c2.z)) + (1.0-opacity)*c2;
		}
	

void fragment() {
// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, UV);


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


	vec3 n_out7p0;
// BlendDarkerColor:7
	float n_in7p2 = 0.50000;
	{
		n_out7p0.rgb = blend_darker_color(vec3(n_out6p0.xyz).rgb, vec3(n_out4p0.xyz).rgb, n_in7p2);
	}


// Output:0
	COLOR.rgb = n_out7p0;


}
"
graph_offset = Vector2(-159, 205)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(420, 240)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_ki8cq")
nodes/fragment/4/position = Vector2(-240, 320)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_qf4do")
nodes/fragment/6/position = Vector2(-240, 60)
nodes/fragment/7/node = SubResource("VisualShaderNodeCustom_gc53a")
nodes/fragment/7/position = Vector2(74, 249)
nodes/fragment/connections = PackedInt32Array(6, 0, 7, 0, 4, 0, 7, 1, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_uvepn"]
shader = SubResource("VisualShader_8l46s")

[sub_resource type="VisualShaderNodeColorConstant" id="VisualShaderNodeColorConstant_cc80l"]

[sub_resource type="VisualShaderNodeColorConstant" id="VisualShaderNodeColorConstant_2p266"]
constant = Color(0, 0, 0, 1)

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_pj0ae"]
default_input_values = [1, Vector2(8, 8)]
initialized = true
script = ExtResource("27_5htah")

[sub_resource type="VisualShader" id="VisualShader_bbxpt"]
code = "shader_type canvas_item;


// Checkerboard

		vec3 checkerboard(vec2 _uv, vec2 _tiling, vec3 _color1, vec3 _color2) {
			float _tiling_x = floor(mod((_uv.x / (1.0 / _tiling.x)), 2.0));
			float _tiling_y = floor(mod((_uv.y / (1.0 / _tiling.y)), 2.0));
			bool _compare_bool = (abs(_tiling_x - _tiling_y) < 0.00001);
			return mix(_color1.xyz, _color2.xyz, (_compare_bool ? 1.0 : 0.0));
		}
	

void fragment() {
// ColorConstant:3
	vec4 n_out3p0 = vec4(1.000000, 1.000000, 1.000000, 1.000000);


// ColorConstant:4
	vec4 n_out4p0 = vec4(0.000000, 0.000000, 0.000000, 1.000000);


	vec3 n_out5p0;
// Checkerboard:5
	vec2 n_in5p1 = vec2(8.00000, 8.00000);
	{
		n_out5p0.xyz = checkerboard(UV.xy, n_in5p1.xy, vec3(n_out3p0.xyz), vec3(n_out4p0.xyz));
	}


// Output:0
	COLOR.rgb = n_out5p0;


}
"
graph_offset = Vector2(-137, 25)
mode = 1
flags/light_only = false
nodes/fragment/3/node = SubResource("VisualShaderNodeColorConstant_cc80l")
nodes/fragment/3/position = Vector2(-60, 220)
nodes/fragment/4/node = SubResource("VisualShaderNodeColorConstant_2p266")
nodes/fragment/4/position = Vector2(-40, 300)
nodes/fragment/5/node = SubResource("VisualShaderNodeCustom_pj0ae")
nodes/fragment/5/position = Vector2(140, 120)
nodes/fragment/connections = PackedInt32Array(3, 0, 5, 2, 4, 0, 5, 3, 5, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ijt06"]
shader = SubResource("VisualShader_bbxpt")

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_iuo5i"]
default_input_values = [0, Vector2(0.195, 0.142), 1, Vector2(10, 10), 2, 0.0]
initialized = true
script = ExtResource("27_qxbdi")

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_0k1tk"]
input_name = "uv"

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_7u225"]
default_input_values = [1, Vector2(4, 4), 2, Vector2(0, 0)]
function = 1

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_hacq2"]
input_name = "time"

[sub_resource type="VisualShader" id="VisualShader_nrxtj"]
code = "shader_type canvas_item;


// PSRDNoise2D

		float psrdnoise2_with_gradient(vec2 x, vec2 period, float alpha, out vec2 gradient) {
			vec2 uv = vec2(x.x+x.y*0.5, x.y);
			vec2 i0 = floor(uv), f0 = fract(uv);
			float cmp = step(f0.y, f0.x);
			vec2 o1 = vec2(cmp, 1.0-cmp);
			vec2 i1 = i0 + o1, i2 = i0 + 1.0;
			vec2 v0 = vec2(i0.x - i0.y*0.5, i0.y);
			vec2 v1 = vec2(v0.x + o1.x - o1.y*0.5, v0.y + o1.y);
			vec2 v2 = vec2(v0.x + 0.5, v0.y + 1.0);
			vec2 x0 = x - v0, x1 = x - v1, x2 = x - v2;
			vec3 iu, iv, xw, yw;
			if(any(greaterThan(period, vec2(0.0)))) {
				xw = vec3(v0.x, v1.x, v2.x);
				yw = vec3(v0.y, v1.y, v2.y);
				if(period.x > 0.0)
				xw = mod(vec3(v0.x, v1.x, v2.x), period.x);
				if(period.y > 0.0)
				yw = mod(vec3(v0.y, v1.y, v2.y), period.y);
				iu = floor(xw + 0.5*yw + 0.5); iv = floor(yw + 0.5);
			} else {
				iu = vec3(i0.x, i1.x, i2.x); iv = vec3(i0.y, i1.y, i2.y);
			}
			vec3 hash = mod(iu, 289.0);
			hash = mod((hash*51.0 + 2.0)*hash + iv, 289.0);
			hash = mod((hash*34.0 + 10.0)*hash, 289.0);
			vec3 psi = hash*0.07482 + alpha;
			vec3 gx = cos(psi); vec3 gy = sin(psi);
			vec2 g0 = vec2(gx.x, gy.x);
			vec2 g1 = vec2(gx.y, gy.y);
			vec2 g2 = vec2(gx.z, gy.z);
			vec3 w = 0.8 - vec3(dot(x0, x0), dot(x1, x1), dot(x2, x2));
			w = max(w, 0.0); vec3 w2 = w*w; vec3 w4 = w2*w2;
			vec3 gdotx = vec3(dot(g0, x0), dot(g1, x1), dot(g2, x2));
			float n = dot(w4, gdotx);
			vec3 w3 = w2*w; vec3 dw = -8.0*w3*gdotx;
			vec2 dn0 = w4.x*g0 + dw.x*x0;
			vec2 dn1 = w4.y*g1 + dw.y*x1;
			vec2 dn2 = w4.z*g2 + dw.z*x2;
			gradient = 10.9*(dn0 + dn1 + dn2);
			return 10.9*n;
		}
		
		float psrdnoise2(vec2 x, vec2 period, float alpha) {
			vec2 gradient;
			return psrdnoise2_with_gradient(x, period, alpha, gradient);
		}
		
	

void fragment() {
// Input:4
	vec2 n_out4p0 = UV;


// UVFunc:5
	vec2 n_in5p1 = vec2(4.00000, 4.00000);
	vec2 n_in5p2 = vec2(0.00000, 0.00000);
	vec2 n_out5p0 = (n_out4p0 - n_in5p2) * n_in5p1 + n_in5p2;


// Input:6
	float n_out6p0 = TIME;


	float n_out2p0;
// PSRDNoise2D:2
	vec2 n_in2p1 = vec2(10.00000, 10.00000);
	{
		n_out2p0 = psrdnoise2(n_out5p0.xy, n_in2p1.xy, n_out6p0);
	}


// Output:0
	COLOR.rgb = vec3(n_out2p0);
	COLOR.a = n_out2p0;


}
"
graph_offset = Vector2(-213, 59)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(340, 160)
nodes/fragment/2/node = SubResource("VisualShaderNodeCustom_iuo5i")
nodes/fragment/2/position = Vector2(60, 180)
nodes/fragment/4/node = SubResource("VisualShaderNodeInput_0k1tk")
nodes/fragment/4/position = Vector2(-540, 80)
nodes/fragment/5/node = SubResource("VisualShaderNodeUVFunc_7u225")
nodes/fragment/5/position = Vector2(-200, 80)
nodes/fragment/6/node = SubResource("VisualShaderNodeInput_hacq2")
nodes/fragment/6/position = Vector2(-260, 280)
nodes/fragment/connections = PackedInt32Array(4, 0, 5, 0, 5, 0, 2, 0, 6, 0, 2, 2, 2, 0, 0, 0, 2, 0, 0, 1)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_qqdvx"]
shader = SubResource("VisualShader_nrxtj")

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_5rnkb"]
input_name = "uv"

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_2432w"]
default_input_values = [1, Vector2(4, 4), 2, Vector2(0, 0)]
function = 1

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_7kepg"]
input_name = "time"

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_o2eky"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1), 2, 1.0]
initialized = true
script = ExtResource("31_a7ssf")

[sub_resource type="VisualShader" id="VisualShader_xaol5"]
code = "shader_type canvas_item;


// PSRDNoise3D

		vec4 __psrdnoise3_permute(vec4 i) {
			vec4 im = mod(i, 289.0);
			return mod(((im*34.0)+10.0)*im, 289.0);
		}
		
		float psrdnoise3_with_gradient(vec3 x, vec3 period, float alpha, out vec3 gradient) {
			const mat3 M = mat3(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0));
			const mat3 Mi = mat3(vec3(-0.5, 0.5, 0.5), vec3(0.5,-0.5, 0.5), vec3(0.5, 0.5,-0.5));
			vec3 uvw = M * x;
			vec3 i0 = floor(uvw), f0 = fract(uvw);
			vec3 g_ = step(f0.xyx, f0.yzz), l_ = 1.0 - g_;
			vec3 g = vec3(l_.z, g_.xy), l = vec3(l_.xy, g_.z);
			vec3 o1 = min( g, l ), o2 = max( g, l );
			vec3 i1 = i0 + o1, i2 = i0 + o2, i3 = i0 + vec3(1.0);
			vec3 v0 = Mi * i0, v1 = Mi * i1, v2 = Mi * i2, v3 = Mi * i3;
			vec3 x0 = x - v0, x1 = x - v1, x2 = x - v2, x3 = x - v3;
			if(any(greaterThan(period, vec3(0.0)))) {
				vec4 vx = vec4(v0.x, v1.x, v2.x, v3.x);
				vec4 vy = vec4(v0.y, v1.y, v2.y, v3.y);
				vec4 vz = vec4(v0.z, v1.z, v2.z, v3.z);
				if(period.x > 0.0) vx = mod(vx, period.x);
				if(period.y > 0.0) vy = mod(vy, period.y);
				if(period.z > 0.0) vz = mod(vz, period.z);
				i0 = floor(M * vec3(vx.x, vy.x, vz.x) + 0.5);
				i1 = floor(M * vec3(vx.y, vy.y, vz.y) + 0.5);
				i2 = floor(M * vec3(vx.z, vy.z, vz.z) + 0.5);
				i3 = floor(M * vec3(vx.w, vy.w, vz.w) + 0.5);
			}
			
		vec4 hash = __psrdnoise3_permute( __psrdnoise3_permute( __psrdnoise3_permute( 
					  vec4(i0.z, i1.z, i2.z, i3.z ))
					+ vec4(i0.y, i1.y, i2.y, i3.y ))
					+ vec4(i0.x, i1.x, i2.x, i3.x ));
		vec4 theta = hash * 3.883222077;
		vec4 sz = hash * -0.006920415 + 0.996539792;
		vec4 psi = hash * 0.108705628;
		vec4 Ct = cos(theta), St = sin(theta);
		vec4 sz_prime = sqrt( 1.0 - sz*sz );
		vec4 gx, gy, gz;
		if(alpha != 0.0) {
			vec4 px = Ct * sz_prime, py = St * sz_prime, pz = sz;
			vec4 Sp = sin(psi), Cp = cos(psi), Ctp = St*Sp - Ct*Cp;
			vec4 qx = mix( Ctp*St, Sp, sz), qy = mix(-Ctp*Ct, Cp, sz);
			vec4 qz = -(py*Cp + px*Sp);
			vec4 Sa = vec4(sin(alpha)), Ca = vec4(cos(alpha));
			gx = Ca*px + Sa*qx; gy = Ca*py + Sa*qy; gz = Ca*pz + Sa*qz;
		} else {
			gx = Ct * sz_prime; gy = St * sz_prime; gz = sz;  
		}
		vec3 g0 = vec3(gx.x, gy.x, gz.x), g1 = vec3(gx.y, gy.y, gz.y);
		vec3 g2 = vec3(gx.z, gy.z, gz.z), g3 = vec3(gx.w, gy.w, gz.w);
		vec4 w = 0.5-vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3));
		w = max(w, 0.0); vec4 w2 = w * w, w3 = w2 * w;
		vec4 gdotx = vec4(dot(g0,x0), dot(g1,x1), dot(g2,x2), dot(g3,x3));
		float n = dot(w3, gdotx);
		vec4 dw = -6.0 * w2 * gdotx;
		vec3 dn0 = w3.x * g0 + dw.x * x0;
		vec3 dn1 = w3.y * g1 + dw.y * x1;
		vec3 dn2 = w3.z * g2 + dw.z * x2;
		vec3 dn3 = w3.w * g3 + dw.w * x3;
		gradient = 39.5 * (dn0 + dn1 + dn2 + dn3);
		return 39.5 * n;
		}
		
		float psrdnoise3(vec3 x, vec3 period, float alpha) {
			vec3 gradient;
			return psrdnoise3_with_gradient(x, period, alpha, gradient);
		}
		
	

void fragment() {
// Input:4
	vec2 n_out4p0 = UV;


// UVFunc:5
	vec2 n_in5p1 = vec2(4.00000, 4.00000);
	vec2 n_in5p2 = vec2(0.00000, 0.00000);
	vec2 n_out5p0 = (n_out4p0 - n_in5p2) * n_in5p1 + n_in5p2;


// Input:6
	float n_out6p0 = TIME;


	float n_out7p0;
// PSRDNoise3D:7
	vec3 n_in7p1 = vec3(1.00000, 1.00000, 1.00000);
	{
		n_out7p0 = psrdnoise3(vec3(n_out5p0, 0.0).xyz, n_in7p1.xyz, n_out6p0);
	}


// Output:0
	COLOR.rgb = vec3(n_out7p0);


}
"
graph_offset = Vector2(-460, 43)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(340, 160)
nodes/fragment/4/node = SubResource("VisualShaderNodeInput_5rnkb")
nodes/fragment/4/position = Vector2(-560, 80)
nodes/fragment/5/node = SubResource("VisualShaderNodeUVFunc_2432w")
nodes/fragment/5/position = Vector2(-220, 80)
nodes/fragment/6/node = SubResource("VisualShaderNodeInput_7kepg")
nodes/fragment/6/position = Vector2(-300, 280)
nodes/fragment/7/node = SubResource("VisualShaderNodeCustom_o2eky")
nodes/fragment/7/position = Vector2(60, 160)
nodes/fragment/connections = PackedInt32Array(4, 0, 5, 0, 6, 0, 7, 2, 7, 0, 0, 0, 5, 0, 7, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_iasic"]
shader = SubResource("VisualShader_xaol5")

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_s1pc4"]
default_input_values = [1, Vector2(0.5, 0.5), 2, 2.0]
initialized = true
script = ExtResource("43_ada6o")

[sub_resource type="VisualShader" id="VisualShader_caujt"]
code = "shader_type canvas_item;


// RadialGradient

		float uv_radial_gradient(vec2 uv, vec2 offset, float fraction_size) {
			vec2 __uv = uv - offset;
			float grad = atan(__uv.x, __uv.y);
			grad = fract(grad / (fraction_size * PI));
			return grad;
		}
	

void fragment() {
	float n_out2p0;
// RadialGradient:2
	vec2 n_in2p1 = vec2(0.50000, 0.50000);
	float n_in2p2 = 2.00000;
	{
		n_out2p0 = uv_radial_gradient(UV.xy, n_in2p1.xy, n_in2p2);
	}


// Output:0
	COLOR.rgb = vec3(n_out2p0);


}
"
graph_offset = Vector2(-883.727, 12.7051)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(-140, 60)
nodes/fragment/2/node = SubResource("VisualShaderNodeCustom_s1pc4")
nodes/fragment/2/position = Vector2(-420, 80)
nodes/fragment/connections = PackedInt32Array(2, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_65iv8"]
shader = SubResource("VisualShader_caujt")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_5d2we"]
texture = ExtResource("1_pmvkm")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_cdqbk"]
default_input_values = [1, 129.657, 2, -0.419, 3, 0.126]
initialized = true
script = ExtResource("28_ye5rl")

[sub_resource type="VisualShaderNodeColorFunc" id="VisualShaderNodeColorFunc_45eaf"]
function = 1

[sub_resource type="VisualShader" id="VisualShader_5n70k"]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_3 : source_color;


// HSVAdjustment

		vec3 hsv_adjustment(vec3 col, float hue_offset, float sat_offset, float val_offset) {
			vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
			vec4 p = mix(vec4(col.bg, K.wz), vec4(col.gb, K.xy), step(col.b, col.g));
			vec4 q = mix(vec4(p.xyw, col.r), vec4(col.r, p.yzx), step(p.x, col.r));
			float d = q.x - min(q.w, q.y);
			float e = 1.0e-10;
			vec3 hsv = vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
			hsv.x += hue_offset / 360.0;
			hsv.y += sat_offset;
			hsv.z += val_offset;
			return hsv;
		}
		
	

void fragment() {
// Texture2D:3
	vec4 n_out3p0 = texture(tex_frg_3, UV);


	vec3 n_out4p0;
// HSVAdjustment:4
	float n_in4p1 = 129.65700;
	float n_in4p2 = -0.41900;
	float n_in4p3 = 0.12600;
	{
		n_out4p0 = hsv_adjustment(vec3(n_out3p0.xyz).xyz, n_in4p1, n_in4p2, n_in4p3);
	}


	vec3 n_out6p0;
// ColorFunc:6
	{
		vec3 c = n_out4p0;
		vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
		vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
		n_out6p0 = c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
	}


// Output:0
	COLOR.rgb = n_out6p0;


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(580, 180)
nodes/fragment/3/node = SubResource("VisualShaderNodeTexture_5d2we")
nodes/fragment/3/position = Vector2(-220, 40)
nodes/fragment/4/node = SubResource("VisualShaderNodeCustom_cdqbk")
nodes/fragment/4/position = Vector2(60, 140)
nodes/fragment/6/node = SubResource("VisualShaderNodeColorFunc_45eaf")
nodes/fragment/6/position = Vector2(380, 200)
nodes/fragment/connections = PackedInt32Array(3, 0, 4, 0, 6, 0, 0, 0, 4, 0, 6, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_le34p"]
shader = SubResource("VisualShader_5n70k")

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_2kfye"]
output_port_for_preview = 0
default_input_values = [1, Vector2(0.5, 0.5), 2, Vector2(0.317, 0.316), 3, 0.0]
initialized = true
script = ExtResource("31_hcapl")

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_vmtac"]
input_name = "uv"

[sub_resource type="VisualShaderNodeIf" id="VisualShaderNodeIf_jr8jk"]
output_port_for_preview = 0
default_input_values = [0, 0.0, 1, 0.5, 2, 0.0, 3, Vector3(0, 0, 0), 4, Vector3(0, 0, 0), 5, Vector3(0, 0, 0)]

[sub_resource type="VisualShaderNodeVectorDecompose" id="VisualShaderNodeVectorDecompose_q1cc4"]
default_input_values = [0, Vector2(0, 0)]
op_type = 0

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_mirv2"]
output_port_for_preview = 0
default_input_values = [1, Vector2(0.5, 0.5), 2, Vector2(0.25, 0.25), 3, 0.057]
initialized = true
script = ExtResource("31_hcapl")

[sub_resource type="VisualShader" id="VisualShader_ew583"]
code = "shader_type canvas_item;


// Box

float sdBox_VisualShaderNodeBoxV2(vec2 _pos, vec2 _proportions, float _feather) {
	vec2 d = abs(_pos) - _proportions; 
	float outside = length(max(d, 0.));
	float inside = min(max(d.x, d.y), 0.);
	float both = outside + inside;
	
	//float f = outside - _feather; //makes a kind of outline
	
	// ok! smoothness is v sensitive tho.
	// when f is 0 the edge is sharp
	float f = _feather; 
	
	//ok::return smoothstep(outside, inside, f); //black on white
	return smoothstep(inside, outside, f); //white on black
}


void fragment() {
// Input:6
	vec2 n_out6p0 = UV;


// VectorDecompose:8
	float n_out8p0 = n_out6p0.x;
	float n_out8p1 = n_out6p0.y;


	float n_out9p0;
// Box:9
	vec2 n_in9p1 = vec2(0.50000, 0.50000);
	vec2 n_in9p2 = vec2(0.25000, 0.25000);
	float n_in9p3 = 0.05700;
	{
		n_out9p0 = sdBox_VisualShaderNodeBoxV2(UV-n_in9p1, n_in9p2, n_in9p3);
	}


	float n_out10p0;
// Box:10
	vec2 n_in10p1 = vec2(0.50000, 0.50000);
	vec2 n_in10p2 = vec2(0.31700, 0.31600);
	float n_in10p3 = 0.00000;
	{
		n_out10p0 = sdBox_VisualShaderNodeBoxV2(UV-n_in10p1, n_in10p2, n_in10p3);
	}


	vec3 n_out7p0;
// If:7
	float n_in7p1 = 0.50000;
	float n_in7p2 = 0.00000;
	vec3 n_in7p3 = vec3(0.00000, 0.00000, 0.00000);
	if(abs(n_out8p0 - n_in7p1) < n_in7p2)
	{
		n_out7p0 = n_in7p3;
	}
	else if(n_out8p0 < n_in7p1)
	{
		n_out7p0 = vec3(n_out10p0);
	}
	else
	{
		n_out7p0 = vec3(n_out9p0);
	}


// Output:0
	COLOR.rgb = n_out7p0;


}
"
graph_offset = Vector2(-452.579, 31.6431)
mode = 1
flags/light_only = false
nodes/fragment/6/node = SubResource("VisualShaderNodeInput_vmtac")
nodes/fragment/6/position = Vector2(-460, 540)
nodes/fragment/7/node = SubResource("VisualShaderNodeIf_jr8jk")
nodes/fragment/7/position = Vector2(120, 180)
nodes/fragment/8/node = SubResource("VisualShaderNodeVectorDecompose_q1cc4")
nodes/fragment/8/position = Vector2(-140, 460)
nodes/fragment/9/node = SubResource("VisualShaderNodeCustom_mirv2")
nodes/fragment/9/position = Vector2(-360, 180)
nodes/fragment/10/node = SubResource("VisualShaderNodeCustom_2kfye")
nodes/fragment/10/position = Vector2(-580, 100)
nodes/fragment/connections = PackedInt32Array(6, 0, 8, 0, 8, 0, 7, 0, 9, 0, 7, 4, 7, 0, 0, 0, 10, 0, 7, 5)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_yp0tr"]
shader = SubResource("VisualShader_ew583")

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_5lnj3"]
output_port_for_preview = 0
default_input_values = [1, Vector2(0.5, 0.5), 2, 0.276, 3, 0.988]
initialized = true
script = ExtResource("30_nhxin")

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_5kd2u"]
input_name = "uv"

[sub_resource type="VisualShaderNodeIf" id="VisualShaderNodeIf_x4hn7"]
output_port_for_preview = 0
default_input_values = [0, 0.0, 1, 0.5, 2, 0.001, 3, Vector3(0, 0, 0), 4, Vector3(0, 0, 0), 5, Vector3(0, 0, 0)]

[sub_resource type="VisualShaderNodeVectorDecompose" id="VisualShaderNodeVectorDecompose_6vtrh"]
default_input_values = [0, Vector2(0, 0)]
op_type = 0

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_cb4jc"]
output_port_for_preview = 0
default_input_values = [1, Vector2(0.5, 0.5), 2, 0.276, 3, 0.001]
initialized = true
script = ExtResource("30_nhxin")

[sub_resource type="VisualShader" id="VisualShader_b85uw"]
code = "shader_type canvas_item;


// Circle

//Original code
//float sdCircle(vec2 pos, float r) {
//	return step(length(pos) - r, pos).x;
//}

//New hack - faster than using length func
float VisualShaderNodeCircle_circle(vec2 position, float radius, float smoothness)
{
	return smoothstep(radius + smoothness, radius, dot(position, position) * 6.0);
}


void fragment() {
// Input:5
	vec2 n_out5p0 = UV;


// VectorDecompose:8
	float n_out8p0 = n_out5p0.x;
	float n_out8p1 = n_out5p0.y;


	float n_out4p0;
// Circle:4
	vec2 n_in4p1 = vec2(0.50000, 0.50000);
	float n_in4p2 = 0.27600;
	float n_in4p3 = 0.98800;
	{
		n_out4p0 = VisualShaderNodeCircle_circle(UV - n_in4p1, n_in4p2, n_in4p3);
	}


	float n_out9p0;
// Circle:9
	vec2 n_in9p1 = vec2(0.50000, 0.50000);
	float n_in9p2 = 0.27600;
	float n_in9p3 = 0.00100;
	{
		n_out9p0 = VisualShaderNodeCircle_circle(UV - n_in9p1, n_in9p2, n_in9p3);
	}


	vec3 n_out7p0;
// If:7
	float n_in7p1 = 0.50000;
	float n_in7p2 = 0.00100;
	vec3 n_in7p3 = vec3(0.00000, 0.00000, 0.00000);
	if(abs(n_out8p0 - n_in7p1) < n_in7p2)
	{
		n_out7p0 = n_in7p3;
	}
	else if(n_out8p0 < n_in7p1)
	{
		n_out7p0 = vec3(n_out9p0);
	}
	else
	{
		n_out7p0 = vec3(n_out4p0);
	}


// Output:0
	COLOR.rgb = n_out7p0;


}
"
graph_offset = Vector2(-319.527, 173.247)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(480, 240)
nodes/fragment/4/node = SubResource("VisualShaderNodeCustom_5lnj3")
nodes/fragment/4/position = Vector2(-380, 300)
nodes/fragment/5/node = SubResource("VisualShaderNodeInput_5kd2u")
nodes/fragment/5/position = Vector2(-520, 160)
nodes/fragment/7/node = SubResource("VisualShaderNodeIf_x4hn7")
nodes/fragment/7/position = Vector2(120, 320)
nodes/fragment/8/node = SubResource("VisualShaderNodeVectorDecompose_6vtrh")
nodes/fragment/8/position = Vector2(-120, 180)
nodes/fragment/9/node = SubResource("VisualShaderNodeCustom_cb4jc")
nodes/fragment/9/position = Vector2(-180, 480)
nodes/fragment/connections = PackedInt32Array(5, 0, 8, 0, 8, 0, 7, 0, 4, 0, 7, 4, 7, 0, 0, 0, 9, 0, 7, 5)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_52mrt"]
shader = SubResource("VisualShader_b85uw")

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_287f8"]

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_jvi73"]
default_input_values = [1, Vector2(0.5, 0.5), 2, 0.15, 3, 0.3, 4, 0.2]
initialized = true
script = ExtResource("31_3swwc")

[sub_resource type="VisualShader" id="VisualShader_jh5y8"]
code = "shader_type canvas_item;


// Parallelogram

		float sdParallelogram( in vec2 p, float wi, float he, float sk )
		{
			vec2 e = vec2(sk,he);
			p = (p.y<0.0)?-p:p;
			vec2  w = p - e; w.x -= clamp(w.x,-wi,wi);
			vec2  d = vec2(dot(w,w), -w.y);
			float s = p.x*e.y - p.y*e.x;
			p = (s<0.0)?-p:p;
			vec2  v = p - vec2(wi,0); v -= e*clamp(dot(v,e)/dot(e,e),-1.0,1.0);
			d = min( d, vec2(dot(v,v), wi*he-abs(s)));
			return sqrt(d.x)*sign(-d.y);
		}
	

void fragment() {
	float n_out4p0;
// Parallelogram:4
	vec2 n_in4p1 = vec2(0.50000, 0.50000);
	float n_in4p2 = 0.15000;
	float n_in4p3 = 0.30000;
	float n_in4p4 = 0.20000;
	{
		n_out4p0 = sdParallelogram(UV.xy - n_in4p1.xy, n_in4p2, n_in4p3, n_in4p4);
	}


// Step:3
	float n_in3p1 = 0.00000;
	float n_out3p0 = step(n_out4p0, n_in3p1);


// Output:0
	COLOR.rgb = vec3(n_out3p0);


}
"
graph_offset = Vector2(-306.727, -11.4546)
mode = 1
flags/light_only = false
nodes/fragment/3/node = SubResource("VisualShaderNodeStep_287f8")
nodes/fragment/3/position = Vector2(60, 180)
nodes/fragment/4/node = SubResource("VisualShaderNodeCustom_jvi73")
nodes/fragment/4/position = Vector2(-200, 120)
nodes/fragment/connections = PackedInt32Array(3, 0, 0, 0, 4, 0, 3, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_b8srd"]
shader = SubResource("VisualShader_jh5y8")

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_a2fts"]

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_qfav1"]
default_input_values = [1, Vector2(0.5, 0.5), 2, Vector2(0.25, 0.25)]
initialized = true
script = ExtResource("32_2uhvd")

[sub_resource type="VisualShader" id="VisualShader_atxn6"]
code = "shader_type canvas_item;


// Rhombus

		float ndot(vec2 a, vec2 b ) { return a.x*b.x - a.y*b.y; }
		float sdRhombus( in vec2 p, in vec2 b ) 
		{
			p = abs(p);
			float h = clamp( ndot(b-2.0*p,b)/dot(b,b), -1.0, 1.0 );
			float d = length( p-0.5*b*vec2(1.0-h,1.0+h) );
			return d * sign( p.x*b.y + p.y*b.x - b.x*b.y );
		}
	

void fragment() {
	float n_out4p0;
// Rhombus:4
	vec2 n_in4p1 = vec2(0.50000, 0.50000);
	vec2 n_in4p2 = vec2(0.25000, 0.25000);
	{
		n_out4p0 = sdRhombus(UV.xy - n_in4p1.xy, n_in4p2.xy);
	}


// Step:3
	float n_in3p1 = 0.00000;
	float n_out3p0 = step(n_out4p0, n_in3p1);


// Output:0
	COLOR.rgb = vec3(n_out3p0);


}
"
graph_offset = Vector2(-371, -38)
mode = 1
flags/light_only = false
nodes/fragment/3/node = SubResource("VisualShaderNodeStep_a2fts")
nodes/fragment/3/position = Vector2(60, 180)
nodes/fragment/4/node = SubResource("VisualShaderNodeCustom_qfav1")
nodes/fragment/4/position = Vector2(-211, 98)
nodes/fragment/connections = PackedInt32Array(3, 0, 0, 0, 4, 0, 3, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_yyiql"]
shader = SubResource("VisualShader_atxn6")

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_ronoj"]

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_eypac"]
default_input_values = [1, Vector2(0.5, 0.5), 2, Vector2(-0.25, -0.25), 3, Vector2(0.25, 0.25), 4, 0.2]
initialized = true
script = ExtResource("33_q3h5g")

[sub_resource type="VisualShader" id="VisualShader_2wk66"]
code = "shader_type canvas_item;


// PreciseBox

		float sdPreciseBox( in vec2 p, in vec2 a, in vec2 b, float th )
		{
			float l = length(b-a);
			vec2  d = (b-a)/l;
			vec2  q = (p-(a+b)*0.5);
				  q = mat2(vec2(d.x,-d.y), vec2(d.y,d.x))*q;
				  q = abs(q)-vec2(l,th)*0.5;
			return length(max(q,0.0)) + min(max(q.x,q.y),0.0);    
		}
	

void fragment() {
	float n_out4p0;
// PreciseBox:4
	vec2 n_in4p1 = vec2(0.50000, 0.50000);
	vec2 n_in4p2 = vec2(-0.25000, -0.25000);
	vec2 n_in4p3 = vec2(0.25000, 0.25000);
	float n_in4p4 = 0.20000;
	{
		n_out4p0 = sdPreciseBox(UV.xy - n_in4p1.xy, n_in4p2.xy, n_in4p3.xy, n_in4p4);
	}


// Step:3
	float n_in3p1 = 0.00000;
	float n_out3p0 = step(n_out4p0, n_in3p1);


// Output:0
	COLOR.rgb = vec3(n_out3p0);


}
"
graph_offset = Vector2(-282, -33)
mode = 1
flags/light_only = false
nodes/fragment/3/node = SubResource("VisualShaderNodeStep_ronoj")
nodes/fragment/3/position = Vector2(60, 180)
nodes/fragment/4/node = SubResource("VisualShaderNodeCustom_eypac")
nodes/fragment/4/position = Vector2(-200, 140)
nodes/fragment/connections = PackedInt32Array(3, 0, 0, 0, 4, 0, 3, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_lucsr"]
shader = SubResource("VisualShader_2wk66")

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_mvbda"]

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_d8n2b"]
default_input_values = [1, Vector2(0.5, 0.5), 2, Vector2(0.25, 0.25), 3, Vector4(0, 0, 0, 0)]
initialized = true
script = ExtResource("34_yicdm")

[sub_resource type="VisualShaderNodeVec4Parameter" id="VisualShaderNodeVec4Parameter_ma1o7"]
parameter_name = "Vector4Parameter"
default_value_enabled = true

[sub_resource type="VisualShader" id="VisualShader_e1125"]
code = "shader_type canvas_item;
uniform vec4 Vector4Parameter = vec4(0.000000, 0.000000, 0.000000, 0.000000);


// RoundedBox

		float sdRoundedBox( in vec2 __pos, in vec2 __proportions, in vec4 __radia )
		{
			__radia.xy = (__pos.x > 0.0) ? __radia.xy : vec2(__radia.w, __radia.z);
			__radia.x  = (__pos.y > 0.0) ? __radia.x  : __radia.y;
			vec2 __q = abs(__pos) - __proportions + __radia.x;
			return min(max(__q.x, __q.y), 0.0) + length(max(__q, 0.0)) - __radia.x;
		}
	

void fragment() {
// Vector4Parameter:7
	vec4 n_out7p0 = Vector4Parameter;


	float n_out6p0;
// RoundedBox:6
	vec2 n_in6p1 = vec2(0.50000, 0.50000);
	vec2 n_in6p2 = vec2(0.25000, 0.25000);
	{
		n_out6p0 = sdRoundedBox(UV.xy - n_in6p1.xy, n_in6p2.xy, n_out7p0.xyzw);
	}


// Step:3
	float n_in3p1 = 0.00000;
	float n_out3p0 = step(n_out6p0, n_in3p1);


// Output:0
	COLOR.rgb = vec3(n_out3p0);


}
"
graph_offset = Vector2(-616.6, 32.6)
mode = 1
flags/light_only = false
nodes/fragment/3/node = SubResource("VisualShaderNodeStep_mvbda")
nodes/fragment/3/position = Vector2(60, 180)
nodes/fragment/6/node = SubResource("VisualShaderNodeCustom_d8n2b")
nodes/fragment/6/position = Vector2(-191, 197)
nodes/fragment/7/node = SubResource("VisualShaderNodeVec4Parameter_ma1o7")
nodes/fragment/7/position = Vector2(-560, 180)
nodes/fragment/connections = PackedInt32Array(3, 0, 0, 0, 6, 0, 3, 0, 7, 0, 6, 3)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_pr0po"]
shader = SubResource("VisualShader_e1125")
shader_parameter/Vector4Parameter = Vector4(0.25, 0.056, 0.25, 0)

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_46s00"]

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_543dt"]
default_input_values = [1, Vector2(0.5, 0.5), 2, 0.15, 3, 0.35, 4, 0.25]
initialized = true
script = ExtResource("35_4prw4")

[sub_resource type="VisualShader" id="VisualShader_7tc5t"]
code = "shader_type canvas_item;


// Trapezoid

		float sdTrapezoid( in vec2 p, in float r1, float r2, float he )
		{
			vec2 k1 = vec2(r2,he);
			vec2 k2 = vec2(r2-r1,2.0*he);
			p.x = abs(p.x);
			vec2 ca = vec2(p.x-min(p.x,(p.y<0.0)?r1:r2), abs(p.y)-he);
			vec2 cb = p - k1 + k2*clamp( dot(k1-p,k2)/dot(k2, k2), 0.0, 1.0 );
			float s = (cb.x<0.0 && ca.y<0.0) ? -1.0 : 1.0;
			return s*sqrt( min(dot(ca, ca),dot(cb, cb)) );
		}
	

void fragment() {
	float n_out4p0;
// Trapezoid:4
	vec2 n_in4p1 = vec2(0.50000, 0.50000);
	float n_in4p2 = 0.15000;
	float n_in4p3 = 0.35000;
	float n_in4p4 = 0.25000;
	{
		n_out4p0 = sdTrapezoid(UV.xy - n_in4p1.xy, n_in4p2, n_in4p3, n_in4p4);
	}


// Step:3
	float n_in3p1 = 0.00000;
	float n_out3p0 = step(n_out4p0, n_in3p1);


// Output:0
	COLOR.rgb = vec3(n_out3p0);


}
"
graph_offset = Vector2(-411, -37)
mode = 1
flags/light_only = false
nodes/fragment/3/node = SubResource("VisualShaderNodeStep_46s00")
nodes/fragment/3/position = Vector2(60, 180)
nodes/fragment/4/node = SubResource("VisualShaderNodeCustom_543dt")
nodes/fragment/4/position = Vector2(-172, 144)
nodes/fragment/connections = PackedInt32Array(3, 0, 0, 0, 4, 0, 3, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_wr7cc"]
shader = SubResource("VisualShader_7tc5t")

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_rjno1"]

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_0ievt"]
default_input_values = [1, Vector2(0.5, 0.25), 2, Vector2(0.25, 0.5)]
initialized = true
script = ExtResource("36_4uciv")

[sub_resource type="VisualShader" id="VisualShader_sqnwd"]
code = "shader_type canvas_item;


// Triangle

		float sdTriangleIsosceles( in vec2 p, in vec2 q )
		{
			p.x = abs(p.x);
			vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );
			vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );
			float s = -sign( q.y );
			vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),
						  vec2( dot(b,b), s*(p.y-q.y)  ));
			return -sqrt(d.x)*sign(d.y);
		}
	

void fragment() {
	float n_out4p0;
// Triangle:4
	vec2 n_in4p1 = vec2(0.50000, 0.25000);
	vec2 n_in4p2 = vec2(0.25000, 0.50000);
	{
		n_out4p0 = sdTriangleIsosceles(UV.xy - n_in4p1.xy, n_in4p2.xy);
	}


// Step:3
	float n_in3p1 = 0.00000;
	float n_out3p0 = step(n_out4p0, n_in3p1);


// Output:0
	COLOR.rgb = vec3(n_out3p0);


}
"
graph_offset = Vector2(-386, -13)
mode = 1
flags/light_only = false
nodes/fragment/3/node = SubResource("VisualShaderNodeStep_rjno1")
nodes/fragment/3/position = Vector2(60, 180)
nodes/fragment/4/node = SubResource("VisualShaderNodeCustom_0ievt")
nodes/fragment/4/position = Vector2(-198, 163)
nodes/fragment/connections = PackedInt32Array(3, 0, 0, 0, 4, 0, 3, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_7wkl2"]
shader = SubResource("VisualShader_sqnwd")

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_8dss3"]
default_input_values = [1, Vector2(0.5, 0.5), 2, 10.0, 3, Vector2(0, 0)]
initialized = true
script = ExtResource("37_psyxx")

[sub_resource type="VisualShader" id="VisualShader_eqdrg"]
code = "shader_type canvas_item;


// UVTwirl

		vec2 Twirl(vec2 __uv, vec2 __center, float __strength, vec2 __offset)
		{
			vec2 __delta = __uv - __center;
			float __angle = __strength * length(__delta);
			float __x = cos(__angle) * __delta.x - sin(__angle) * __delta.y;
			float __y = sin(__angle) * __delta.x + cos(__angle) * __delta.y;
			return vec2(__x + __center.x + __offset.x, __y + __center.y + __offset.y);
		}
	

void fragment() {
	vec2 n_out2p0;
// UVTwirl:2
	vec2 n_in2p1 = vec2(0.50000, 0.50000);
	float n_in2p2 = 10.00000;
	vec2 n_in2p3 = vec2(0.00000, 0.00000);
	{
		n_out2p0.xy = Twirl(UV.xy, n_in2p1.xy, n_in2p2, n_in2p3.xy);
	}


// Output:0
	COLOR.rgb = vec3(n_out2p0, 0.0);


}
"
graph_offset = Vector2(-66.5925, -60.75)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(340, 40)
nodes/fragment/2/node = SubResource("VisualShaderNodeCustom_8dss3")
nodes/fragment/2/position = Vector2(-31.185, 12.5)
nodes/fragment/connections = PackedInt32Array(2, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_nk7cv"]
shader = SubResource("VisualShader_eqdrg")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_vdmwd"]
source = 5
texture = ExtResource("38_u53ku")
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_72wbf"]
default_input_values = [1, 24, 2, 1, 3, 0, 4, 24, 5, 0.3]
initialized = true
script = ExtResource("39_iilbj")

[sub_resource type="VisualShaderNodeVectorDecompose" id="VisualShaderNodeVectorDecompose_4i80k"]
default_input_values = [0, Quaternion(0, 0, 0, 0)]
op_type = 2

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_wfss0"]
default_input_values = [1, Vector2(1, 1), 2, Vector2(0.002, 0)]

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_3avxn"]
parameter_name = "MainTex"
texture_type = 1
texture_filter = 1

[sub_resource type="VisualShader" id="VisualShader_pgiym"]
code = "shader_type canvas_item;
uniform sampler2D MainTex : source_color, filter_nearest;


// UVFlipbook

		vec2 flipbook_anim(vec2 __uv, int __columns, int __rows, int __starting_frame, int __ending_frame, float __anim_speed) {
			__starting_frame += int(fract(TIME * __anim_speed) * float(__ending_frame));
			float frame = float(clamp(__starting_frame, 0, __ending_frame));
			vec2 offPerFrame = vec2((1.0 / float(__columns)), (1.0 / float(__rows)));
			
			vec2 sprite_size = vec2(__uv.x / float(__columns), __uv.y / float(__rows));
			vec2 current_sprite = vec2(0.0, 1.0 - offPerFrame.y);
			current_sprite.x += frame * offPerFrame.x;
			float rowIndex;
			float _mod = modf(frame / float(__columns), rowIndex);
			current_sprite.y -= rowIndex * offPerFrame.y;
			current_sprite.x -= rowIndex * float(__columns) * offPerFrame.x;
			
			vec2 sprite_uv = (sprite_size + current_sprite);
			
			return sprite_uv;
		}
	

void fragment() {
	vec2 n_out4p0;
// UVFlipbook:4
	int n_in4p1 = 24;
	int n_in4p2 = 1;
	int n_in4p3 = 0;
	int n_in4p4 = 24;
	float n_in4p5 = 0.30000;
	{
		n_out4p0.xy = flipbook_anim(UV.xy, n_in4p1, n_in4p2, n_in4p3, n_in4p4, n_in4p5 );
	}


// UVFunc:6
	vec2 n_in6p1 = vec2(1.00000, 1.00000);
	vec2 n_in6p2 = vec2(0.00200, 0.00000);
	vec2 n_out6p0 = n_in6p2 * n_in6p1 + n_out4p0;


	vec4 n_out3p0;
// Texture2D:3
	n_out3p0 = texture(MainTex, n_out6p0);


// VectorDecompose:5
	float n_out5p0 = n_out3p0.x;
	float n_out5p1 = n_out3p0.y;
	float n_out5p2 = n_out3p0.z;
	float n_out5p3 = n_out3p0.w;


// Output:0
	COLOR.rgb = vec3(n_out3p0.xyz);
	COLOR.a = n_out5p3;


}
"
graph_offset = Vector2(-18.7114, -102.932)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(1040, 60)
nodes/fragment/3/node = SubResource("VisualShaderNodeTexture_vdmwd")
nodes/fragment/3/position = Vector2(220, 20)
nodes/fragment/4/node = SubResource("VisualShaderNodeCustom_72wbf")
nodes/fragment/4/position = Vector2(-820, 100)
nodes/fragment/5/node = SubResource("VisualShaderNodeVectorDecompose_4i80k")
nodes/fragment/5/position = Vector2(560, 300)
nodes/fragment/6/node = SubResource("VisualShaderNodeUVFunc_wfss0")
nodes/fragment/6/position = Vector2(-380, 100)
nodes/fragment/7/node = SubResource("VisualShaderNodeTexture2DParameter_3avxn")
nodes/fragment/7/position = Vector2(-520, 400)
nodes/fragment/connections = PackedInt32Array(3, 0, 0, 0, 3, 0, 5, 0, 5, 3, 0, 1, 4, 0, 6, 0, 6, 0, 3, 0, 7, 0, 3, 2)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_esshf"]
shader = SubResource("VisualShader_pgiym")
shader_parameter/MainTex = ExtResource("38_u53ku")

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_8cwaj"]
default_input_values = [0, Vector2(2, 2), 1, 0.0, 2, 0.0, 3, 0.5]
initialized = true
script = ExtResource("40_x0ogt")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_e266m"]
texture = ExtResource("1_pmvkm")

[sub_resource type="VisualShader" id="VisualShader_8gnev"]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_3;


// UVTiler

vec2 vec2_rotate_NodeUVTilerV3(vec2 _uv, float _angle, vec2 _pivot) {
	_uv -= _pivot;
	_uv = mat2( vec2(cos(_angle), -sin(_angle)), vec2(sin(_angle), cos(_angle)) ) * _uv;
	_uv += _pivot;
	return _uv;
}
vec2 brick_tile_NodeUVTilerV3(vec2 _uv, float _zoom, float _shift)
{
	_uv.x += step(1.0, mod(_uv.y, 2.0))  *  _shift;
	return fract(_uv);
}
// Returns float from 0.0 to 1.0
float random_float_NodeUVTilerV3(vec2 input) {
	return fract(sin(dot(input.xy, vec2(12.9898,78.233))) * 43758.5453123);
}


void fragment() {
	vec2 n_out2p0;
// UVTiler:2
	vec2 n_in2p0 = vec2(2.00000, 2.00000);
	float n_in2p1 = 0.00000;
	float n_in2p2 = 0.00000;
	float n_in2p3 = 0.50000;
	{
		
			//Much simpler to calculate zoom from the tiling vec2 
			float zoom = (n_in2p0.x * n_in2p0.y);
			
			vec2 st = UV/n_in2p0;
			st *= zoom; //Scale coordinate system by zoom
			
			vec2 unique_val = floor( st ); //get the integer coordinates
			
			//Something about this calc is the problem with the brick shift when 
			//rr is > 0
			float rand_rotation = (( random_float_NodeUVTilerV3(unique_val) * 2.0) - 1.0) * n_in2p2;
			
			//Just add whatever static rotation may be input and clamp:
			rand_rotation = clamp(rand_rotation + n_in2p1, 0.0, 2.*PI);
			
			st = brick_tile_NodeUVTilerV3(st, zoom, n_in2p3);
			st = vec2_rotate_NodeUVTilerV3(st, rand_rotation, vec2(0.5));
			
			n_out2p0 = st;
			
	}


// Texture2D:3
	vec4 n_out3p0 = texture(tex_frg_3, n_out2p0);


// Output:0
	COLOR.rgb = vec3(n_out3p0.xyz);


}
"
graph_offset = Vector2(-324.562, -15.0541)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(340, 40)
nodes/fragment/2/node = SubResource("VisualShaderNodeCustom_8cwaj")
nodes/fragment/2/position = Vector2(-200, 100)
nodes/fragment/3/node = SubResource("VisualShaderNodeTexture_e266m")
nodes/fragment/3/position = Vector2(120, 160)
nodes/fragment/connections = PackedInt32Array(2, 0, 3, 0, 3, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_v8ct1"]
shader = SubResource("VisualShader_8gnev")

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_6p5lt"]
default_input_values = [1, Vector2(0.5, 0.5), 2, 11.97]
initialized = true
script = ExtResource("41_7oy85")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_pdxj7"]
texture = ExtResource("1_pmvkm")

[sub_resource type="VisualShader" id="VisualShader_7uhii"]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_3;


// UVRotate

vec2 vec2_rotate_NodeUVRotateV2(vec2 _uv, float _angle, vec2 _pivot) {
	_uv -= _pivot;
	_uv = mat2( vec2(cos(_angle), -sin(_angle)), vec2(sin(_angle), cos(_angle)) ) * _uv;
	_uv += _pivot;
	return _uv;
}

void fragment() {
	vec2 n_out2p0;
// UVRotate:2
	vec2 n_in2p1 = vec2(0.50000, 0.50000);
	float n_in2p2 = 11.97000;
	{
		
			vec2 rotated_uv = UV;
			rotated_uv = vec2_rotate_NodeUVRotateV2(UV, n_in2p2, n_in2p1);
			n_out2p0 = rotated_uv;
			
	}


// Texture2D:3
	vec4 n_out3p0 = texture(tex_frg_3, n_out2p0);


// Output:0
	COLOR.rgb = vec3(n_out3p0.xyz);


}
"
graph_offset = Vector2(-368.661, 10.4463)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(340, 40)
nodes/fragment/2/node = SubResource("VisualShaderNodeCustom_6p5lt")
nodes/fragment/2/position = Vector2(-166, 88)
nodes/fragment/3/node = SubResource("VisualShaderNodeTexture_pdxj7")
nodes/fragment/3/position = Vector2(60, 120)
nodes/fragment/connections = PackedInt32Array(2, 0, 3, 0, 3, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_cu70s"]
shader = SubResource("VisualShader_7uhii")

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_qhyoa"]
default_input_values = [1, 2.0, 2, 1.0, 3, 0.0]
initialized = true
script = ExtResource("42_ubein")

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_3o0vd"]
input_name = "time"

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_eqdgy"]
texture = ExtResource("1_pmvkm")
texture_type = 1

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_67ujy"]
operator = 2

[sub_resource type="VisualShader" id="VisualShader_wx5y0"]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_4 : source_color;


// TriangleWave

		float triangle_wave(float IN, float __amplitude, float __frequency, float __height) {
			return 1.0 - __amplitude * abs(round(IN / __frequency) - (IN / __frequency)) + __height;
		}
	

void fragment() {
// Input:3
	float n_out3p0 = TIME;


	float n_out2p0;
// TriangleWave:2
	float n_in2p1 = 2.00000;
	float n_in2p2 = 1.00000;
	float n_in2p3 = 0.00000;
	{
		n_out2p0 = triangle_wave(n_out3p0, n_in2p1, n_in2p2, n_in2p3);
	}


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


// VectorOp:5
	vec3 n_out5p0 = vec3(n_out2p0) * vec3(n_out4p0.xyz);


// Output:0
	COLOR.rgb = n_out5p0;


}
"
graph_offset = Vector2(-276.615, 2.24999)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(680, 140)
nodes/fragment/2/node = SubResource("VisualShaderNodeCustom_qhyoa")
nodes/fragment/2/position = Vector2(-280, 80)
nodes/fragment/3/node = SubResource("VisualShaderNodeInput_3o0vd")
nodes/fragment/3/position = Vector2(-1020, 60)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_eqdgy")
nodes/fragment/4/position = Vector2(-420, 400)
nodes/fragment/5/node = SubResource("VisualShaderNodeVectorOp_67ujy")
nodes/fragment/5/position = Vector2(200, 200)
nodes/fragment/connections = PackedInt32Array(3, 0, 2, 0, 2, 0, 5, 0, 4, 0, 5, 1, 5, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_o3d0f"]
shader = SubResource("VisualShader_wx5y0")

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_0j4rd"]
default_input_values = [1, 2.0, 2, 1.0, 3, 0.0]
initialized = true
script = ExtResource("43_7mn1k")

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_baknj"]
operator = 2

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_ikytu"]
texture = ExtResource("1_pmvkm")
texture_type = 1

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_gcea3"]
input_name = "time"

[sub_resource type="VisualShader" id="VisualShader_puwg7"]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_4 : source_color;


// SquareWave

		float square_wave(float IN, float __amplitude, float __frequency, float __height) {
			return __amplitude*sign(sin(2.0 * PI * IN * __frequency)) + __height;
		}
	

void fragment() {
// Input:5
	float n_out5p0 = TIME;


	float n_out2p0;
// SquareWave:2
	float n_in2p1 = 2.00000;
	float n_in2p2 = 1.00000;
	float n_in2p3 = 0.00000;
	{
		n_out2p0 = square_wave(n_out5p0, n_in2p1, n_in2p2, n_in2p3);
	}


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


// VectorOp:3
	vec3 n_out3p0 = vec3(n_out2p0) * vec3(n_out4p0.xyz);


// Output:0
	COLOR.rgb = n_out3p0;


}
"
graph_offset = Vector2(-133.185, 13.5)
mode = 1
flags/light_only = false
nodes/fragment/2/node = SubResource("VisualShaderNodeCustom_0j4rd")
nodes/fragment/2/position = Vector2(-380, 100)
nodes/fragment/3/node = SubResource("VisualShaderNodeVectorOp_baknj")
nodes/fragment/3/position = Vector2(-19.005, 181)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_ikytu")
nodes/fragment/4/position = Vector2(-520, 420)
nodes/fragment/5/node = SubResource("VisualShaderNodeInput_gcea3")
nodes/fragment/5/position = Vector2(-1140, 120)
nodes/fragment/connections = PackedInt32Array(2, 0, 3, 0, 4, 0, 3, 1, 5, 0, 2, 0, 3, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_t427w"]
shader = SubResource("VisualShader_puwg7")

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_nfkyf"]
default_input_values = [1, 1.0, 2, 1.0, 3, 0.0]
initialized = true
script = ExtResource("44_ikc7r")

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_won18"]
operator = 2

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_3hn32"]
texture = ExtResource("1_pmvkm")
texture_type = 1

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_g3y1n"]
input_name = "time"

[sub_resource type="VisualShader" id="VisualShader_y5gtx"]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_4 : source_color;


// SawtoothWave

		float sawtooth_wave(float IN, float __amplitude, float __period, float __height) {
			return 2.0 * __amplitude * ((IN/__period) - floor((1.0/2.0) + (IN / __period))) + __height;
		}
	

void fragment() {
// Input:5
	float n_out5p0 = TIME;


	float n_out2p0;
// SawtoothWave:2
	float n_in2p1 = 1.00000;
	float n_in2p2 = 1.00000;
	float n_in2p3 = 0.00000;
	{
		n_out2p0 = sawtooth_wave(n_out5p0, n_in2p1, n_in2p2, n_in2p3);
	}


// Texture2D:4
	vec4 n_out4p0 = texture(tex_frg_4, UV);


// VectorOp:3
	vec3 n_out3p0 = vec3(n_out2p0) * vec3(n_out4p0.xyz);


// Output:0
	COLOR.rgb = n_out3p0;


}
"
graph_offset = Vector2(-76.8375, 63)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(560, 320)
nodes/fragment/2/node = SubResource("VisualShaderNodeCustom_nfkyf")
nodes/fragment/2/position = Vector2(-280, 120)
nodes/fragment/3/node = SubResource("VisualShaderNodeVectorOp_won18")
nodes/fragment/3/position = Vector2(108.16, 266.5)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_3hn32")
nodes/fragment/4/position = Vector2(-420, 420)
nodes/fragment/5/node = SubResource("VisualShaderNodeInput_g3y1n")
nodes/fragment/5/position = Vector2(-980, 100)
nodes/fragment/connections = PackedInt32Array(2, 0, 3, 0, 4, 0, 3, 1, 5, 0, 2, 0, 3, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_7g4dk"]
shader = SubResource("VisualShader_y5gtx")

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_8d5ov"]
default_input_values = [1, 1.0, 2, 1.0, 3, 0.0, 4, 0.0]
initialized = true
script = ExtResource("45_w1ca0")

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_esgtp"]
input_name = "time"

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_28nfh"]
operator = 2

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_qt8jv"]
texture = ExtResource("1_pmvkm")
texture_type = 1

[sub_resource type="VisualShader" id="VisualShader_enkir"]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_5 : source_color;


// SineWave

		float sine_wave(float IN, float __amplitude, float __frequency, float __phase, float __height) {
			return __amplitude * sin(2.0 * PI * __frequency * IN + __phase) + __height;
		}
	

void fragment() {
// Input:3
	float n_out3p0 = TIME;


	float n_out2p0;
// SineWave:2
	float n_in2p1 = 1.00000;
	float n_in2p2 = 1.00000;
	float n_in2p3 = 0.00000;
	float n_in2p4 = 0.00000;
	{
		n_out2p0 = sine_wave(n_out3p0, n_in2p1, n_in2p2, n_in2p3, n_in2p4);
	}


// Texture2D:5
	vec4 n_out5p0 = texture(tex_frg_5, UV);


// VectorOp:4
	vec3 n_out4p0 = vec3(n_out2p0) * vec3(n_out5p0.xyz);


// Output:0
	COLOR.rgb = n_out4p0;


}
"
graph_offset = Vector2(-148.553, 29.25)
mode = 1
flags/light_only = false
nodes/fragment/2/node = SubResource("VisualShaderNodeCustom_8d5ov")
nodes/fragment/2/position = Vector2(-320, 40)
nodes/fragment/3/node = SubResource("VisualShaderNodeInput_esgtp")
nodes/fragment/3/position = Vector2(-1040, 60)
nodes/fragment/4/node = SubResource("VisualShaderNodeVectorOp_28nfh")
nodes/fragment/4/position = Vector2(60, 140)
nodes/fragment/5/node = SubResource("VisualShaderNodeTexture_qt8jv")
nodes/fragment/5/position = Vector2(-480, 400)
nodes/fragment/connections = PackedInt32Array(3, 0, 2, 0, 2, 0, 4, 0, 5, 0, 4, 1, 4, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_20n14"]
shader = SubResource("VisualShader_enkir")

[node name="Examples" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
size_flags_horizontal = 3
size_flags_vertical = 3

[node name="BlendModes" type="Control" parent="."]
visible = false
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="VBoxContainer" type="VBoxContainer" parent="BlendModes"]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="Label" type="Label" parent="BlendModes/VBoxContainer"]
layout_mode = 2
theme_override_font_sizes/font_size = 40
text = "Blend Modes"

[node name="ScrollContainer" type="ScrollContainer" parent="BlendModes/VBoxContainer"]
layout_mode = 2
size_flags_vertical = 3
horizontal_scroll_mode = 0

[node name="GridContainer" type="GridContainer" parent="BlendModes/VBoxContainer/ScrollContainer"]
layout_mode = 2
size_flags_vertical = 3
columns = 8

[node name="Normal" type="VBoxContainer" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/Normal"]
material = SubResource("69")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_pmvkm")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/Normal"]
layout_mode = 2
text = "Normal"
horizontal_alignment = 1

[node name="Dissolve" type="VBoxContainer" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/Dissolve"]
material = SubResource("ShaderMaterial_enr5s")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_pmvkm")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/Dissolve"]
layout_mode = 2
text = "Dissolve"
horizontal_alignment = 1

[node name="Screen" type="VBoxContainer" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/Screen"]
material = SubResource("ShaderMaterial_wu7lk")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_pmvkm")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/Screen"]
layout_mode = 2
text = "Screen"
horizontal_alignment = 1

[node name="Overlay" type="VBoxContainer" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/Overlay"]
material = SubResource("ShaderMaterial_kkpnf")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_pmvkm")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/Overlay"]
layout_mode = 2
text = "Overlay"
horizontal_alignment = 1

[node name="HardLight" type="VBoxContainer" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/HardLight"]
material = SubResource("ShaderMaterial_lkbav")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_pmvkm")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/HardLight"]
layout_mode = 2
text = "Hard Light"
horizontal_alignment = 1

[node name="SoftLight" type="VBoxContainer" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/SoftLight"]
material = SubResource("ShaderMaterial_qayvd")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_pmvkm")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/SoftLight"]
layout_mode = 2
text = "Soft Light"
horizontal_alignment = 1

[node name="Burn" type="VBoxContainer" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/Burn"]
material = SubResource("ShaderMaterial_deh4d")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_pmvkm")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/Burn"]
layout_mode = 2
text = "Burn"
horizontal_alignment = 1

[node name="Dodge" type="VBoxContainer" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/Dodge"]
material = SubResource("ShaderMaterial_wdg44")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_pmvkm")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/Dodge"]
layout_mode = 2
text = "Dodge"
horizontal_alignment = 1

[node name="Lighten" type="VBoxContainer" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/Lighten"]
material = SubResource("ShaderMaterial_vyc0v")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_pmvkm")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/Lighten"]
layout_mode = 2
text = "Lighten"
horizontal_alignment = 1

[node name="Darken" type="VBoxContainer" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/Darken"]
material = SubResource("ShaderMaterial_h8ry5")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_pmvkm")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/Darken"]
layout_mode = 2
text = "Darken"
horizontal_alignment = 1

[node name="Difference" type="VBoxContainer" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/Difference"]
material = SubResource("ShaderMaterial_d3mgk")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_pmvkm")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/Difference"]
layout_mode = 2
text = "Difference"
horizontal_alignment = 1

[node name="Additive" type="VBoxContainer" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/Additive"]
material = SubResource("ShaderMaterial_uof40")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_pmvkm")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/Additive"]
layout_mode = 2
text = "Additive"
horizontal_alignment = 1

[node name="AddSub" type="VBoxContainer" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/AddSub"]
material = SubResource("ShaderMaterial_eli8g")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_pmvkm")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/AddSub"]
layout_mode = 2
text = "AddSub"
horizontal_alignment = 1

[node name="LinearLight" type="VBoxContainer" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/LinearLight"]
material = SubResource("ShaderMaterial_nmcdm")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_pmvkm")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/LinearLight"]
layout_mode = 2
text = "Linear Light"
horizontal_alignment = 1

[node name="VividLight" type="VBoxContainer" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/VividLight"]
material = SubResource("ShaderMaterial_idbae")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_pmvkm")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/VividLight"]
layout_mode = 2
text = "Vivid Light"
horizontal_alignment = 1

[node name="PinLight" type="VBoxContainer" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/PinLight"]
material = SubResource("ShaderMaterial_4c0lm")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_pmvkm")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/PinLight"]
layout_mode = 2
text = "Pin Light"
horizontal_alignment = 1

[node name="HardMix" type="VBoxContainer" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/HardMix"]
material = SubResource("ShaderMaterial_pnkpk")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_pmvkm")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/HardMix"]
layout_mode = 2
text = "Hard Mix"
horizontal_alignment = 1

[node name="Exclusion" type="VBoxContainer" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/Exclusion"]
material = SubResource("ShaderMaterial_r53ff")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_pmvkm")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/Exclusion"]
layout_mode = 2
text = "Exclusion"
horizontal_alignment = 1

[node name="GammaIllumination" type="VBoxContainer" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/GammaIllumination"]
material = SubResource("ShaderMaterial_klgwi")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_pmvkm")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/GammaIllumination"]
layout_mode = 2
text = "Gamma Illumination"
horizontal_alignment = 1
autowrap_mode = 2

[node name="GammaLight" type="VBoxContainer" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/GammaLight"]
material = SubResource("ShaderMaterial_5g7rp")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_pmvkm")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/GammaLight"]
layout_mode = 2
text = "Gamma Light"
horizontal_alignment = 1

[node name="GammaDark" type="VBoxContainer" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/GammaDark"]
material = SubResource("ShaderMaterial_ommw6")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_pmvkm")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/GammaDark"]
layout_mode = 2
text = "Gamma Dark"
horizontal_alignment = 1

[node name="Luminosity" type="VBoxContainer" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/Luminosity"]
material = SubResource("ShaderMaterial_p71em")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_pmvkm")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/Luminosity"]
layout_mode = 2
text = "Luminosity"
horizontal_alignment = 1

[node name="LinearBurn" type="VBoxContainer" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/LinearBurn"]
material = SubResource("ShaderMaterial_fv25u")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_pmvkm")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/LinearBurn"]
layout_mode = 2
text = "Linear Burn"
horizontal_alignment = 1

[node name="LighterColor" type="VBoxContainer" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/LighterColor"]
material = SubResource("ShaderMaterial_n1onk")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_pmvkm")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/LighterColor"]
layout_mode = 2
text = "Lighter Color"
horizontal_alignment = 1

[node name="DarkerColor" type="VBoxContainer" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/DarkerColor"]
material = SubResource("ShaderMaterial_uvepn")
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1_pmvkm")

[node name="Label" type="Label" parent="BlendModes/VBoxContainer/ScrollContainer/GridContainer/DarkerColor"]
layout_mode = 2
text = "Darker Color"
horizontal_alignment = 1

[node name="Procedural" type="Control" parent="."]
visible = false
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="VBoxContainer" type="VBoxContainer" parent="Procedural"]
layout_mode = 0
offset_right = 40.0
offset_bottom = 40.0

[node name="Label" type="Label" parent="Procedural/VBoxContainer"]
layout_mode = 2
theme_override_font_sizes/font_size = 40
text = "Procedural"

[node name="HBoxContainer" type="HBoxContainer" parent="Procedural/VBoxContainer"]
layout_mode = 2

[node name="Checkerboard" type="VBoxContainer" parent="Procedural/VBoxContainer/HBoxContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="Procedural/VBoxContainer/HBoxContainer/Checkerboard"]
material = SubResource("ShaderMaterial_ijt06")
layout_mode = 2
texture = ExtResource("1_pmvkm")

[node name="Label" type="Label" parent="Procedural/VBoxContainer/HBoxContainer/Checkerboard"]
layout_mode = 2
text = "Checkerboard"
horizontal_alignment = 1

[node name="PSRDNoise2D" type="VBoxContainer" parent="Procedural/VBoxContainer/HBoxContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="Procedural/VBoxContainer/HBoxContainer/PSRDNoise2D"]
material = SubResource("ShaderMaterial_qqdvx")
layout_mode = 2
texture = ExtResource("1_pmvkm")

[node name="Label" type="Label" parent="Procedural/VBoxContainer/HBoxContainer/PSRDNoise2D"]
layout_mode = 2
text = "PSRD Noise2D"
horizontal_alignment = 1

[node name="PSRDNoise3D" type="VBoxContainer" parent="Procedural/VBoxContainer/HBoxContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="Procedural/VBoxContainer/HBoxContainer/PSRDNoise3D"]
material = SubResource("ShaderMaterial_iasic")
layout_mode = 2
texture = ExtResource("1_pmvkm")

[node name="Label" type="Label" parent="Procedural/VBoxContainer/HBoxContainer/PSRDNoise3D"]
layout_mode = 2
text = "PSRD Noise3D"
horizontal_alignment = 1

[node name="UVRadialGradient" type="VBoxContainer" parent="Procedural/VBoxContainer/HBoxContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="Procedural/VBoxContainer/HBoxContainer/UVRadialGradient"]
material = SubResource("ShaderMaterial_65iv8")
layout_mode = 2
texture = ExtResource("1_pmvkm")

[node name="Label" type="Label" parent="Procedural/VBoxContainer/HBoxContainer/UVRadialGradient"]
layout_mode = 2
text = "Radial Gradient"
horizontal_alignment = 1
autowrap_mode = 2

[node name="ColorAdjustment" type="Control" parent="."]
visible = false
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="VBoxContainer" type="VBoxContainer" parent="ColorAdjustment"]
layout_mode = 1
offset_right = 40.0
offset_bottom = 40.0

[node name="Label" type="Label" parent="ColorAdjustment/VBoxContainer"]
layout_mode = 2
theme_override_font_sizes/font_size = 40
text = "Color Adjustment"

[node name="HBoxContainer" type="HBoxContainer" parent="ColorAdjustment/VBoxContainer"]
layout_mode = 2

[node name="HSVAdjustment" type="VBoxContainer" parent="ColorAdjustment/VBoxContainer/HBoxContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="ColorAdjustment/VBoxContainer/HBoxContainer/HSVAdjustment"]
material = SubResource("ShaderMaterial_le34p")
layout_mode = 2
texture = ExtResource("1_pmvkm")

[node name="Label" type="Label" parent="ColorAdjustment/VBoxContainer/HBoxContainer/HSVAdjustment"]
layout_mode = 2
size_flags_vertical = 6
text = "HSVAdjustment"
horizontal_alignment = 1
vertical_alignment = 1

[node name="Shapes" type="Control" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = -3.0
offset_top = 3.0
offset_right = -3.0
offset_bottom = 3.0
grow_horizontal = 2
grow_vertical = 2

[node name="VBoxContainer" type="VBoxContainer" parent="Shapes"]
layout_mode = 0
offset_right = 40.0
offset_bottom = 40.0

[node name="Label" type="Label" parent="Shapes/VBoxContainer"]
layout_mode = 2
theme_override_font_sizes/font_size = 40
text = "Shapes"

[node name="HBoxContainer" type="HBoxContainer" parent="Shapes/VBoxContainer"]
layout_mode = 2

[node name="Box" type="VBoxContainer" parent="Shapes/VBoxContainer/HBoxContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="Shapes/VBoxContainer/HBoxContainer/Box"]
material = SubResource("ShaderMaterial_yp0tr")
layout_mode = 2
size_flags_vertical = 3
texture = ExtResource("1_pmvkm")

[node name="Label" type="Label" parent="Shapes/VBoxContainer/HBoxContainer/Box"]
layout_mode = 2
text = "Box"
horizontal_alignment = 1
vertical_alignment = 1

[node name="Circle" type="VBoxContainer" parent="Shapes/VBoxContainer/HBoxContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="Shapes/VBoxContainer/HBoxContainer/Circle"]
material = SubResource("ShaderMaterial_52mrt")
layout_mode = 2
size_flags_vertical = 3
texture = ExtResource("1_pmvkm")

[node name="Label" type="Label" parent="Shapes/VBoxContainer/HBoxContainer/Circle"]
layout_mode = 2
text = "Circle"
horizontal_alignment = 1
vertical_alignment = 1

[node name="Parallelogram" type="VBoxContainer" parent="Shapes/VBoxContainer/HBoxContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="Shapes/VBoxContainer/HBoxContainer/Parallelogram"]
material = SubResource("ShaderMaterial_b8srd")
layout_mode = 2
size_flags_vertical = 3
texture = ExtResource("1_pmvkm")

[node name="Label" type="Label" parent="Shapes/VBoxContainer/HBoxContainer/Parallelogram"]
layout_mode = 2
text = "Parallelogram"
horizontal_alignment = 1
vertical_alignment = 1

[node name="Rhombus" type="VBoxContainer" parent="Shapes/VBoxContainer/HBoxContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="Shapes/VBoxContainer/HBoxContainer/Rhombus"]
material = SubResource("ShaderMaterial_yyiql")
layout_mode = 2
size_flags_vertical = 3
texture = ExtResource("1_pmvkm")

[node name="Label" type="Label" parent="Shapes/VBoxContainer/HBoxContainer/Rhombus"]
layout_mode = 2
text = "Rhombus"
horizontal_alignment = 1
vertical_alignment = 1

[node name="PreciseBox" type="VBoxContainer" parent="Shapes/VBoxContainer/HBoxContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="Shapes/VBoxContainer/HBoxContainer/PreciseBox"]
material = SubResource("ShaderMaterial_lucsr")
layout_mode = 2
size_flags_vertical = 3
texture = ExtResource("1_pmvkm")

[node name="Label" type="Label" parent="Shapes/VBoxContainer/HBoxContainer/PreciseBox"]
layout_mode = 2
text = "Precise Box"
horizontal_alignment = 1
vertical_alignment = 1

[node name="RoundedBox" type="VBoxContainer" parent="Shapes/VBoxContainer/HBoxContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="Shapes/VBoxContainer/HBoxContainer/RoundedBox"]
material = SubResource("ShaderMaterial_pr0po")
layout_mode = 2
size_flags_vertical = 3
texture = ExtResource("1_pmvkm")

[node name="Label" type="Label" parent="Shapes/VBoxContainer/HBoxContainer/RoundedBox"]
layout_mode = 2
text = "Rounded Box"
horizontal_alignment = 1
vertical_alignment = 1

[node name="Trapezoid" type="VBoxContainer" parent="Shapes/VBoxContainer/HBoxContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="Shapes/VBoxContainer/HBoxContainer/Trapezoid"]
material = SubResource("ShaderMaterial_wr7cc")
layout_mode = 2
size_flags_vertical = 3
texture = ExtResource("1_pmvkm")

[node name="Label" type="Label" parent="Shapes/VBoxContainer/HBoxContainer/Trapezoid"]
layout_mode = 2
text = "Trapezoid"
horizontal_alignment = 1
vertical_alignment = 1

[node name="Triangle" type="VBoxContainer" parent="Shapes/VBoxContainer/HBoxContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="Shapes/VBoxContainer/HBoxContainer/Triangle"]
material = SubResource("ShaderMaterial_7wkl2")
layout_mode = 2
size_flags_vertical = 3
texture = ExtResource("1_pmvkm")

[node name="Label" type="Label" parent="Shapes/VBoxContainer/HBoxContainer/Triangle"]
layout_mode = 2
text = "Triangle"
horizontal_alignment = 1
vertical_alignment = 1

[node name="UV" type="Control" parent="."]
visible = false
layout_mode = 1
anchors_preset = 0
offset_right = 40.0
offset_bottom = 40.0

[node name="VBoxContainer" type="VBoxContainer" parent="UV"]
layout_mode = 0
offset_right = 40.0
offset_bottom = 40.0

[node name="Label" type="Label" parent="UV/VBoxContainer"]
layout_mode = 2
theme_override_font_sizes/font_size = 40
text = "UV"

[node name="HBoxContainer" type="HBoxContainer" parent="UV/VBoxContainer"]
layout_mode = 2

[node name="UVTwirl" type="VBoxContainer" parent="UV/VBoxContainer/HBoxContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="UV/VBoxContainer/HBoxContainer/UVTwirl"]
material = SubResource("ShaderMaterial_nk7cv")
layout_mode = 2
texture = ExtResource("1_pmvkm")

[node name="Label" type="Label" parent="UV/VBoxContainer/HBoxContainer/UVTwirl"]
layout_mode = 2
text = "UV Twirl"
horizontal_alignment = 1

[node name="UVFlipbook" type="VBoxContainer" parent="UV/VBoxContainer/HBoxContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="UV/VBoxContainer/HBoxContainer/UVFlipbook"]
material = SubResource("ShaderMaterial_esshf")
layout_mode = 2
texture = ExtResource("1_pmvkm")

[node name="Label" type="Label" parent="UV/VBoxContainer/HBoxContainer/UVFlipbook"]
layout_mode = 2
text = "UV Flipbook Animation"
horizontal_alignment = 1
autowrap_mode = 2

[node name="UVTiler" type="VBoxContainer" parent="UV/VBoxContainer/HBoxContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="UV/VBoxContainer/HBoxContainer/UVTiler"]
material = SubResource("ShaderMaterial_v8ct1")
layout_mode = 2
texture = ExtResource("1_pmvkm")

[node name="Label" type="Label" parent="UV/VBoxContainer/HBoxContainer/UVTiler"]
layout_mode = 2
text = "UV Tiler"
horizontal_alignment = 1

[node name="UVRotate" type="VBoxContainer" parent="UV/VBoxContainer/HBoxContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="UV/VBoxContainer/HBoxContainer/UVRotate"]
material = SubResource("ShaderMaterial_cu70s")
layout_mode = 2
texture = ExtResource("1_pmvkm")

[node name="Label" type="Label" parent="UV/VBoxContainer/HBoxContainer/UVRotate"]
layout_mode = 2
text = "UV Rotate"
horizontal_alignment = 1

[node name="Wave" type="Control" parent="."]
visible = false
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="VBoxContainer" type="VBoxContainer" parent="Wave"]
layout_mode = 0
offset_right = 40.0
offset_bottom = 40.0

[node name="Label" type="Label" parent="Wave/VBoxContainer"]
layout_mode = 2
theme_override_font_sizes/font_size = 40
text = "Wave"

[node name="HBoxContainer" type="HBoxContainer" parent="Wave/VBoxContainer"]
layout_mode = 2

[node name="TriangleWave" type="VBoxContainer" parent="Wave/VBoxContainer/HBoxContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="Wave/VBoxContainer/HBoxContainer/TriangleWave"]
material = SubResource("ShaderMaterial_o3d0f")
layout_mode = 2
texture = ExtResource("1_pmvkm")

[node name="Label" type="Label" parent="Wave/VBoxContainer/HBoxContainer/TriangleWave"]
layout_mode = 2
text = "Triangle Wave"
horizontal_alignment = 1
vertical_alignment = 1

[node name="SquareWave" type="VBoxContainer" parent="Wave/VBoxContainer/HBoxContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="Wave/VBoxContainer/HBoxContainer/SquareWave"]
material = SubResource("ShaderMaterial_t427w")
layout_mode = 2
texture = ExtResource("1_pmvkm")

[node name="Label" type="Label" parent="Wave/VBoxContainer/HBoxContainer/SquareWave"]
layout_mode = 2
text = "Square Wave"
horizontal_alignment = 1
vertical_alignment = 1

[node name="SawtoothWave" type="VBoxContainer" parent="Wave/VBoxContainer/HBoxContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="Wave/VBoxContainer/HBoxContainer/SawtoothWave"]
material = SubResource("ShaderMaterial_7g4dk")
layout_mode = 2
texture = ExtResource("1_pmvkm")

[node name="Label" type="Label" parent="Wave/VBoxContainer/HBoxContainer/SawtoothWave"]
layout_mode = 2
text = "Sawtooth Wave"
horizontal_alignment = 1
vertical_alignment = 1

[node name="SineWave" type="VBoxContainer" parent="Wave/VBoxContainer/HBoxContainer"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="Wave/VBoxContainer/HBoxContainer/SineWave"]
material = SubResource("ShaderMaterial_20n14")
layout_mode = 2
texture = ExtResource("1_pmvkm")

[node name="Label" type="Label" parent="Wave/VBoxContainer/HBoxContainer/SineWave"]
layout_mode = 2
text = "Sine Wave"
horizontal_alignment = 1
vertical_alignment = 1

[node name="Camera2D" type="Camera2D" parent="."]
anchor_mode = 0
